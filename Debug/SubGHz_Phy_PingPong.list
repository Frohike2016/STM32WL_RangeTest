
SubGHz_Phy_PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e464  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800e5a4  0800e5a4  0001e5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebd4  0800ebd4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebd4  0800ebd4  0001ebd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebdc  0800ebdc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebdc  0800ebdc  0001ebdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebe0  0800ebe0  0001ebe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800ebe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000804  20000090  0800ec74  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20000894  0800ec74  00020894  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027035  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006644  00000000  00000000  000470ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002380  00000000  00000000  0004d738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020e0  00000000  00000000  0004fab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f60  00000000  00000000  00051b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000287e5  00000000  00000000  00078af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6863  00000000  00000000  000a12dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177b40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a14  00000000  00000000  00177b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000090 	.word	0x20000090
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e58c 	.word	0x0800e58c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000094 	.word	0x20000094
 800017c:	0800e58c 	.word	0x0800e58c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8000538:	f001 fa08 	bl	800194c <SystemApp_Init>
  Sensor_Init();
 800053c:	f000 f80a 	bl	8000554 <Sensor_Init>
//  SubghzApp_Init();
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	f00c f8e6 	bl	800c71c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <Sensor_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void Sensor_Init(void)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b08b      	sub	sp, #44	; 0x2c
 8000558:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* TX timer */
  UTIL_TIMER_Create(&timerTx,0xFFFFFFFF,UTIL_TIMER_ONESHOT,OnTimerTxEvent,NULL);
 800055a:	2300      	movs	r3, #0
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	4b67      	ldr	r3, [pc, #412]	; (80006fc <Sensor_Init+0x1a8>)
 8000560:	2200      	movs	r2, #0
 8000562:	f04f 31ff 	mov.w	r1, #4294967295
 8000566:	4866      	ldr	r0, [pc, #408]	; (8000700 <Sensor_Init+0x1ac>)
 8000568:	f00c fa5e 	bl	800ca28 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&timerTx,TX_PERIOD_MS);
 800056c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000570:	4863      	ldr	r0, [pc, #396]	; (8000700 <Sensor_Init+0x1ac>)
 8000572:	f00c fb6d 	bl	800cc50 <UTIL_TIMER_SetPeriod>
  //UTIL_TIMER_Start(&timerTx);

  /* LED TX timer */
  UTIL_TIMER_Create(&timerLedTx,0xFFFFFFFF,UTIL_TIMER_ONESHOT,OnLedTxEvent,NULL);
 8000576:	2300      	movs	r3, #0
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	4b62      	ldr	r3, [pc, #392]	; (8000704 <Sensor_Init+0x1b0>)
 800057c:	2200      	movs	r2, #0
 800057e:	f04f 31ff 	mov.w	r1, #4294967295
 8000582:	4861      	ldr	r0, [pc, #388]	; (8000708 <Sensor_Init+0x1b4>)
 8000584:	f00c fa50 	bl	800ca28 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&timerLedTx, LED_PERIOD_MS);
 8000588:	2164      	movs	r1, #100	; 0x64
 800058a:	485f      	ldr	r0, [pc, #380]	; (8000708 <Sensor_Init+0x1b4>)
 800058c:	f00c fb60 	bl	800cc50 <UTIL_TIMER_SetPeriod>

  /* LED ERROR timer */
  UTIL_TIMER_Create(&timerLedError,0xFFFFFFFF,UTIL_TIMER_ONESHOT,OnLedErrorEvent,NULL);
 8000590:	2300      	movs	r3, #0
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	4b5d      	ldr	r3, [pc, #372]	; (800070c <Sensor_Init+0x1b8>)
 8000596:	2200      	movs	r2, #0
 8000598:	f04f 31ff 	mov.w	r1, #4294967295
 800059c:	485c      	ldr	r0, [pc, #368]	; (8000710 <Sensor_Init+0x1bc>)
 800059e:	f00c fa43 	bl	800ca28 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&timerLedError,LED_ERROR_PERIOD_MS);
 80005a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005a6:	485a      	ldr	r0, [pc, #360]	; (8000710 <Sensor_Init+0x1bc>)
 80005a8:	f00c fb52 	bl	800cc50 <UTIL_TIMER_SetPeriod>

  /* LED RX timer */
  UTIL_TIMER_Create(&timerLedRx,0xFFFFFFFF,UTIL_TIMER_ONESHOT,OnLedRxEvent,NULL);
 80005ac:	2300      	movs	r3, #0
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	4b58      	ldr	r3, [pc, #352]	; (8000714 <Sensor_Init+0x1c0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f04f 31ff 	mov.w	r1, #4294967295
 80005b8:	4857      	ldr	r0, [pc, #348]	; (8000718 <Sensor_Init+0x1c4>)
 80005ba:	f00c fa35 	bl	800ca28 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&timerLedRx,LED_PERIOD_MS);
 80005be:	2164      	movs	r1, #100	; 0x64
 80005c0:	4855      	ldr	r0, [pc, #340]	; (8000718 <Sensor_Init+0x1c4>)
 80005c2:	f00c fb45 	bl	800cc50 <UTIL_TIMER_SetPeriod>

  /* ADC measurement */
  SYS_InitMeasurement();
 80005c6:	f000 fbf3 	bl	8000db0 <SYS_InitMeasurement>

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 80005ca:	4b54      	ldr	r3, [pc, #336]	; (800071c <Sensor_Init+0x1c8>)
 80005cc:	4a54      	ldr	r2, [pc, #336]	; (8000720 <Sensor_Init+0x1cc>)
 80005ce:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 80005d0:	4b52      	ldr	r3, [pc, #328]	; (800071c <Sensor_Init+0x1c8>)
 80005d2:	4a54      	ldr	r2, [pc, #336]	; (8000724 <Sensor_Init+0x1d0>)
 80005d4:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 80005d6:	4b51      	ldr	r3, [pc, #324]	; (800071c <Sensor_Init+0x1c8>)
 80005d8:	4a53      	ldr	r2, [pc, #332]	; (8000728 <Sensor_Init+0x1d4>)
 80005da:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 80005dc:	4b4f      	ldr	r3, [pc, #316]	; (800071c <Sensor_Init+0x1c8>)
 80005de:	4a53      	ldr	r2, [pc, #332]	; (800072c <Sensor_Init+0x1d8>)
 80005e0:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 80005e2:	4b4e      	ldr	r3, [pc, #312]	; (800071c <Sensor_Init+0x1c8>)
 80005e4:	4a52      	ldr	r2, [pc, #328]	; (8000730 <Sensor_Init+0x1dc>)
 80005e6:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 80005e8:	4b52      	ldr	r3, [pc, #328]	; (8000734 <Sensor_Init+0x1e0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	484b      	ldr	r0, [pc, #300]	; (800071c <Sensor_Init+0x1c8>)
 80005ee:	4798      	blx	r3
  srand(Radio.Random());
 80005f0:	4b50      	ldr	r3, [pc, #320]	; (8000734 <Sensor_Init+0x1e0>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4798      	blx	r3
 80005f6:	4603      	mov	r3, r0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00c ff69 	bl	800d4d0 <srand>

#if (( USE_MODEM_LORA == 1 ) && ( USE_MODEM_FSK == 0 ))
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 80005fe:	4b4d      	ldr	r3, [pc, #308]	; (8000734 <Sensor_Init+0x1e0>)
 8000600:	69dc      	ldr	r4, [r3, #28]
 8000602:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000606:	9308      	str	r3, [sp, #32]
 8000608:	2300      	movs	r3, #0
 800060a:	9307      	str	r3, [sp, #28]
 800060c:	2300      	movs	r3, #0
 800060e:	9306      	str	r3, [sp, #24]
 8000610:	2300      	movs	r3, #0
 8000612:	9305      	str	r3, [sp, #20]
 8000614:	2301      	movs	r3, #1
 8000616:	9304      	str	r3, [sp, #16]
 8000618:	2300      	movs	r3, #0
 800061a:	9303      	str	r3, [sp, #12]
 800061c:	2308      	movs	r3, #8
 800061e:	9302      	str	r3, [sp, #8]
 8000620:	2301      	movs	r3, #1
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	2307      	movs	r3, #7
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	2200      	movs	r2, #0
 800062c:	210e      	movs	r1, #14
 800062e:	2001      	movs	r0, #1
 8000630:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8000632:	4b40      	ldr	r3, [pc, #256]	; (8000734 <Sensor_Init+0x1e0>)
 8000634:	699c      	ldr	r4, [r3, #24]
 8000636:	2301      	movs	r3, #1
 8000638:	9309      	str	r3, [sp, #36]	; 0x24
 800063a:	2300      	movs	r3, #0
 800063c:	9308      	str	r3, [sp, #32]
 800063e:	2300      	movs	r3, #0
 8000640:	9307      	str	r3, [sp, #28]
 8000642:	2300      	movs	r3, #0
 8000644:	9306      	str	r3, [sp, #24]
 8000646:	2301      	movs	r3, #1
 8000648:	9305      	str	r3, [sp, #20]
 800064a:	2300      	movs	r3, #0
 800064c:	9304      	str	r3, [sp, #16]
 800064e:	2300      	movs	r3, #0
 8000650:	9303      	str	r3, [sp, #12]
 8000652:	2305      	movs	r3, #5
 8000654:	9302      	str	r3, [sp, #8]
 8000656:	2308      	movs	r3, #8
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	2300      	movs	r3, #0
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	2207      	movs	r2, #7
 8000662:	2100      	movs	r1, #0
 8000664:	2001      	movs	r0, #1
 8000666:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, BUFFER_SIZE);
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <Sensor_Init+0x1e0>)
 800066a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	2001      	movs	r0, #1
 8000670:	4798      	blx	r3

#else
#error "Please define a frequency band in the sys_conf.h file."
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */

  Radio.SetChannel(RF_FREQUENCY);
 8000672:	4b30      	ldr	r3, [pc, #192]	; (8000734 <Sensor_Init+0x1e0>)
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	4830      	ldr	r0, [pc, #192]	; (8000738 <Sensor_Init+0x1e4>)
 8000678:	4798      	blx	r3

  SYS_LED_Init(SYS_LED_BLUE);
 800067a:	2000      	movs	r0, #0
 800067c:	f001 fdf2 	bl	8002264 <SYS_LED_Init>
  SYS_LED_Init(SYS_LED_GREEN);
 8000680:	2001      	movs	r0, #1
 8000682:	f001 fdef 	bl	8002264 <SYS_LED_Init>
  SYS_LED_Init(SYS_LED_RED);
 8000686:	2002      	movs	r0, #2
 8000688:	f001 fdec 	bl	8002264 <SYS_LED_Init>

  Radio.Rx(RX_TIMEOUT_VALUE);
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <Sensor_Init+0x1e0>)
 800068e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000690:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000694:	4798      	blx	r3

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_Sensor_Process), 0, Sensor_Process);
 8000696:	4a29      	ldr	r2, [pc, #164]	; (800073c <Sensor_Init+0x1e8>)
 8000698:	2100      	movs	r1, #0
 800069a:	2001      	movs	r0, #1
 800069c:	f00c f922 	bl	800c8e4 <UTIL_SEQ_RegTask>

  OnTimerTxEvent(NULL);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 faad 	bl	8000c00 <OnTimerTxEvent>

  APP_LOG(TS_OFF, VLEVEL_L, "\r\nSensor start -> ");
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <Sensor_Init+0x1ec>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	2001      	movs	r0, #1
 80006ae:	f00c fc57 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF,VLEVEL_L," ID=%02X",NODE_ID);
 80006b2:	2301      	movs	r3, #1
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <Sensor_Init+0x1f0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	2001      	movs	r0, #1
 80006be:	f00c fc4f 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_L, " , RF=%uMHz , SF=%u",RF_FREQUENCY,LORA_SPREADING_FACTOR);
 80006c2:	2307      	movs	r3, #7
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <Sensor_Init+0x1e4>)
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <Sensor_Init+0x1f4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	2001      	movs	r0, #1
 80006d2:	f00c fc45 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF,VLEVEL_L," , CS=%ddBm",RF_CHANNEL_FREE_RSSI_TRESHOLD);
 80006d6:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <Sensor_Init+0x1f8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	2001      	movs	r0, #1
 80006e4:	f00c fc3c 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_L, "\r\n");
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <Sensor_Init+0x1fc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	2001      	movs	r0, #1
 80006f0:	f00c fc36 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 80006f4:	bf00      	nop
 80006f6:	3704      	adds	r7, #4
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	08000c01 	.word	0x08000c01
 8000700:	2000013c 	.word	0x2000013c
 8000704:	08000bbd 	.word	0x08000bbd
 8000708:	200000f4 	.word	0x200000f4
 800070c:	08000be9 	.word	0x08000be9
 8000710:	20000124 	.word	0x20000124
 8000714:	08000bd3 	.word	0x08000bd3
 8000718:	2000010c 	.word	0x2000010c
 800071c:	20000154 	.word	0x20000154
 8000720:	08000ae5 	.word	0x08000ae5
 8000724:	08000b01 	.word	0x08000b01
 8000728:	08000b69 	.word	0x08000b69
 800072c:	08000b85 	.word	0x08000b85
 8000730:	08000ba1 	.word	0x08000ba1
 8000734:	0800e944 	.word	0x0800e944
 8000738:	33bca100 	.word	0x33bca100
 800073c:	08000755 	.word	0x08000755
 8000740:	0800e5a4 	.word	0x0800e5a4
 8000744:	0800e5b8 	.word	0x0800e5b8
 8000748:	0800e5c4 	.word	0x0800e5c4
 800074c:	0800e5d8 	.word	0x0800e5d8
 8000750:	0800e5e4 	.word	0x0800e5e4

08000754 <Sensor_Process>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void Sensor_Process(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af02      	add	r7, sp, #8
  uint32_t i,backoffTime,carrierSenseTime;
  int16_t rssi = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	827b      	strh	r3, [r7, #18]
  bool isChannelFree = true;
 800075e:	2301      	movs	r3, #1
 8000760:	747b      	strb	r3, [r7, #17]

  switch (State)
 8000762:	4b91      	ldr	r3, [pc, #580]	; (80009a8 <Sensor_Process+0x254>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b06      	cmp	r3, #6
 8000768:	f200 819c 	bhi.w	8000aa4 <Sensor_Process+0x350>
 800076c:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <Sensor_Process+0x20>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	08000983 	.word	0x08000983
 8000778:	08000a51 	.word	0x08000a51
 800077c:	08000a65 	.word	0x08000a65
 8000780:	08000791 	.word	0x08000791
 8000784:	08000aa5 	.word	0x08000aa5
 8000788:	08000957 	.word	0x08000957
 800078c:	08000a85 	.word	0x08000a85
  {
    case TX_START:
	  i = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
#if 1  /* Byte data format */
	  Buffer[i++] = NODE_ID;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	617a      	str	r2, [r7, #20]
 800079a:	4a84      	ldr	r2, [pc, #528]	; (80009ac <Sensor_Process+0x258>)
 800079c:	2101      	movs	r1, #1
 800079e:	54d1      	strb	r1, [r2, r3]
	  Buffer[i++] = (uint8_t)(GetTemperatureLevel());
 80007a0:	f001 f934 	bl	8001a0c <GetTemperatureLevel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4619      	mov	r1, r3
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	617a      	str	r2, [r7, #20]
 80007ae:	b2c9      	uxtb	r1, r1
 80007b0:	4a7e      	ldr	r2, [pc, #504]	; (80009ac <Sensor_Process+0x258>)
 80007b2:	54d1      	strb	r1, [r2, r3]
	  Buffer[i++] = GetBatteryLevel();
 80007b4:	697c      	ldr	r4, [r7, #20]
 80007b6:	1c63      	adds	r3, r4, #1
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	f001 f8ef 	bl	800199c <GetBatteryLevel>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b7a      	ldr	r3, [pc, #488]	; (80009ac <Sensor_Process+0x258>)
 80007c4:	551a      	strb	r2, [r3, r4]
	  Buffer[i++] = (FrameSentCnt>>8) & 0xFF;
 80007c6:	4b7a      	ldr	r3, [pc, #488]	; (80009b0 <Sensor_Process+0x25c>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	0a1b      	lsrs	r3, r3, #8
 80007cc:	b299      	uxth	r1, r3
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	617a      	str	r2, [r7, #20]
 80007d4:	b2c9      	uxtb	r1, r1
 80007d6:	4a75      	ldr	r2, [pc, #468]	; (80009ac <Sensor_Process+0x258>)
 80007d8:	54d1      	strb	r1, [r2, r3]
	  Buffer[i++] = FrameSentCnt & 0xFF;
 80007da:	4b75      	ldr	r3, [pc, #468]	; (80009b0 <Sensor_Process+0x25c>)
 80007dc:	8819      	ldrh	r1, [r3, #0]
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	617a      	str	r2, [r7, #20]
 80007e4:	b2c9      	uxtb	r1, r1
 80007e6:	4a71      	ldr	r2, [pc, #452]	; (80009ac <Sensor_Process+0x258>)
 80007e8:	54d1      	strb	r1, [r2, r3]
	  Buffer[i++] = (FrameAckCnt>>8) & 0xFF;
 80007ea:	4b72      	ldr	r3, [pc, #456]	; (80009b4 <Sensor_Process+0x260>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	0a1b      	lsrs	r3, r3, #8
 80007f0:	b299      	uxth	r1, r3
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	617a      	str	r2, [r7, #20]
 80007f8:	b2c9      	uxtb	r1, r1
 80007fa:	4a6c      	ldr	r2, [pc, #432]	; (80009ac <Sensor_Process+0x258>)
 80007fc:	54d1      	strb	r1, [r2, r3]
	  Buffer[i++] = FrameAckCnt & 0xFF;
 80007fe:	4b6d      	ldr	r3, [pc, #436]	; (80009b4 <Sensor_Process+0x260>)
 8000800:	8819      	ldrh	r1, [r3, #0]
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	1c5a      	adds	r2, r3, #1
 8000806:	617a      	str	r2, [r7, #20]
 8000808:	b2c9      	uxtb	r1, r1
 800080a:	4a68      	ldr	r2, [pc, #416]	; (80009ac <Sensor_Process+0x258>)
 800080c:	54d1      	strb	r1, [r2, r3]
	  Buffer[i++] = 'r';
	  Buffer[i++] = 'o';
	  Buffer[i++] = 'w';
	  Buffer[i++] = 'n';
#endif
	  BufferSize = i;
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	b29a      	uxth	r2, r3
 8000812:	4b69      	ldr	r3, [pc, #420]	; (80009b8 <Sensor_Process+0x264>)
 8000814:	801a      	strh	r2, [r3, #0]
	  /* RF collisions avoidance and TX section */
	  Radio.SetChannel(RF_FREQUENCY);
 8000816:	4b69      	ldr	r3, [pc, #420]	; (80009bc <Sensor_Process+0x268>)
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	4869      	ldr	r0, [pc, #420]	; (80009c0 <Sensor_Process+0x26c>)
 800081c:	4798      	blx	r3
	  Radio.Rx(0);
 800081e:	4b67      	ldr	r3, [pc, #412]	; (80009bc <Sensor_Process+0x268>)
 8000820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000822:	2000      	movs	r0, #0
 8000824:	4798      	blx	r3
	  HAL_Delay(Radio.GetWakeupTime());
 8000826:	4b65      	ldr	r3, [pc, #404]	; (80009bc <Sensor_Process+0x268>)
 8000828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800082a:	4798      	blx	r3
 800082c:	4603      	mov	r3, r0
 800082e:	4618      	mov	r0, r3
 8000830:	f001 f9a3 	bl	8001b7a <HAL_Delay>
	  for (i=0;i<RF_CHANNEL_FREE_TRIALS_MAX;i++)
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	e05b      	b.n	80008f2 <Sensor_Process+0x19e>
	  {
	    APP_LOG(TS_ON,VLEVEL_L,"RF Channel Sensing #%u ...",i+1);
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	3301      	adds	r3, #1
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	4b60      	ldr	r3, [pc, #384]	; (80009c4 <Sensor_Process+0x270>)
 8000842:	2201      	movs	r2, #1
 8000844:	2100      	movs	r1, #0
 8000846:	2001      	movs	r0, #1
 8000848:	f00c fb8a 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
		isChannelFree = true;
 800084c:	2301      	movs	r3, #1
 800084e:	747b      	strb	r3, [r7, #17]
		carrierSenseTime = UTIL_TIMER_GetCurrentTime();
 8000850:	f00c faa8 	bl	800cda4 <UTIL_TIMER_GetCurrentTime>
 8000854:	60b8      	str	r0, [r7, #8]
		while( UTIL_TIMER_GetElapsedTime(carrierSenseTime) < RSSI_SENSING_TIME)
 8000856:	e00d      	b.n	8000874 <Sensor_Process+0x120>
		{
		  rssi = Radio.Rssi(MODEM_LORA);
 8000858:	4b58      	ldr	r3, [pc, #352]	; (80009bc <Sensor_Process+0x268>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	2001      	movs	r0, #1
 800085e:	4798      	blx	r3
 8000860:	4603      	mov	r3, r0
 8000862:	827b      	strh	r3, [r7, #18]
		  if (rssi > RF_CHANNEL_FREE_RSSI_TRESHOLD) { isChannelFree = false; break; }
 8000864:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000868:	f113 0f4f 	cmn.w	r3, #79	; 0x4f
 800086c:	db02      	blt.n	8000874 <Sensor_Process+0x120>
 800086e:	2300      	movs	r3, #0
 8000870:	747b      	strb	r3, [r7, #17]
 8000872:	e005      	b.n	8000880 <Sensor_Process+0x12c>
		while( UTIL_TIMER_GetElapsedTime(carrierSenseTime) < RSSI_SENSING_TIME)
 8000874:	68b8      	ldr	r0, [r7, #8]
 8000876:	f00c faa7 	bl	800cdc8 <UTIL_TIMER_GetElapsedTime>
 800087a:	4603      	mov	r3, r0
 800087c:	2b09      	cmp	r3, #9
 800087e:	d9eb      	bls.n	8000858 <Sensor_Process+0x104>
		}
		carrierSenseTime = UTIL_TIMER_GetElapsedTime(carrierSenseTime);
 8000880:	68b8      	ldr	r0, [r7, #8]
 8000882:	f00c faa1 	bl	800cdc8 <UTIL_TIMER_GetElapsedTime>
 8000886:	60b8      	str	r0, [r7, #8]
		APP_LOG(TS_OFF,VLEVEL_L," CS: %ddBm , CS time: %ums\r\n",rssi,carrierSenseTime);
 8000888:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800088c:	68ba      	ldr	r2, [r7, #8]
 800088e:	9201      	str	r2, [sp, #4]
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	4b4d      	ldr	r3, [pc, #308]	; (80009c8 <Sensor_Process+0x274>)
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	2001      	movs	r0, #1
 800089a:	f00c fb61 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
		if (isChannelFree)
 800089e:	7c7b      	ldrb	r3, [r7, #17]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d12a      	bne.n	80008fa <Sensor_Process+0x1a6>
		{
		  break; //RF collisions avoidance loop
		}
		else
		{
		  if (i<RF_CHANNEL_FREE_TRIALS_MAX-1)
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d820      	bhi.n	80008ec <Sensor_Process+0x198>
		  {
		    backoffTime = CS_BACKOFF_TIME_UNIT * (1 + (rand() % powInt(2,i+1)));
 80008aa:	f00c fe3f 	bl	800d52c <rand>
 80008ae:	4603      	mov	r3, r0
 80008b0:	461c      	mov	r4, r3
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	3301      	adds	r3, #1
 80008b6:	4619      	mov	r1, r3
 80008b8:	2002      	movs	r0, #2
 80008ba:	f000 f9bf 	bl	8000c3c <powInt>
 80008be:	4603      	mov	r3, r0
 80008c0:	fbb4 f2f3 	udiv	r2, r4, r3
 80008c4:	fb02 f303 	mul.w	r3, r2, r3
 80008c8:	1ae3      	subs	r3, r4, r3
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	4613      	mov	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	607b      	str	r3, [r7, #4]
		    APP_LOG(TS_ON,VLEVEL_L,"RF channel is busy, next attempt after %ums...\r\n",backoffTime);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <Sensor_Process+0x278>)
 80008dc:	2201      	movs	r2, #1
 80008de:	2100      	movs	r1, #0
 80008e0:	2001      	movs	r0, #1
 80008e2:	f00c fb3d 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
		    HAL_Delay(backoffTime);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f001 f947 	bl	8001b7a <HAL_Delay>
	  for (i=0;i<RF_CHANNEL_FREE_TRIALS_MAX;i++)
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	3301      	adds	r3, #1
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	d9a0      	bls.n	800083a <Sensor_Process+0xe6>
 80008f8:	e000      	b.n	80008fc <Sensor_Process+0x1a8>
		  break; //RF collisions avoidance loop
 80008fa:	bf00      	nop
		  }
		}
      }
	  /* TX data over the air */
	  if (isChannelFree)
 80008fc:	7c7b      	ldrb	r3, [r7, #17]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d01a      	beq.n	8000938 <Sensor_Process+0x1e4>
	  {
	    Radio.SetChannel(RF_FREQUENCY);
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <Sensor_Process+0x268>)
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	482e      	ldr	r0, [pc, #184]	; (80009c0 <Sensor_Process+0x26c>)
 8000908:	4798      	blx	r3
	    HAL_Delay(Radio.GetWakeupTime() + TCXO_WORKAROUND_TIME_MARGIN);
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <Sensor_Process+0x268>)
 800090c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800090e:	4798      	blx	r3
 8000910:	4603      	mov	r3, r0
 8000912:	3332      	adds	r3, #50	; 0x32
 8000914:	4618      	mov	r0, r3
 8000916:	f001 f930 	bl	8001b7a <HAL_Delay>
	    Radio.Send(Buffer,BufferSize);  // to be filled by attendee
 800091a:	4b28      	ldr	r3, [pc, #160]	; (80009bc <Sensor_Process+0x268>)
 800091c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091e:	4a26      	ldr	r2, [pc, #152]	; (80009b8 <Sensor_Process+0x264>)
 8000920:	8812      	ldrh	r2, [r2, #0]
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4611      	mov	r1, r2
 8000926:	4821      	ldr	r0, [pc, #132]	; (80009ac <Sensor_Process+0x258>)
 8000928:	4798      	blx	r3
	    APP_LOG(TS_ON,VLEVEL_L,"TX...\r\n");
 800092a:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <Sensor_Process+0x27c>)
 800092c:	2201      	movs	r2, #1
 800092e:	2100      	movs	r1, #0
 8000930:	2001      	movs	r0, #1
 8000932:	f00c fb15 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
	  {
	    UTIL_TIMER_Start(&timerLedError);
		SYS_LED_On(SYS_LED_RED);
		APP_LOG(TS_ON, VLEVEL_L, "RF channel: %uHz is BUSY\r\n\r\n",RF_FREQUENCY);
	  }
	  break;  //case
 8000936:	e0b8      	b.n	8000aaa <Sensor_Process+0x356>
	    UTIL_TIMER_Start(&timerLedError);
 8000938:	4826      	ldr	r0, [pc, #152]	; (80009d4 <Sensor_Process+0x280>)
 800093a:	f00c f8ab 	bl	800ca94 <UTIL_TIMER_Start>
		SYS_LED_On(SYS_LED_RED);
 800093e:	2002      	movs	r0, #2
 8000940:	f001 fcca 	bl	80022d8 <SYS_LED_On>
		APP_LOG(TS_ON, VLEVEL_L, "RF channel: %uHz is BUSY\r\n\r\n",RF_FREQUENCY);
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <Sensor_Process+0x26c>)
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <Sensor_Process+0x284>)
 800094a:	2201      	movs	r2, #1
 800094c:	2100      	movs	r1, #0
 800094e:	2001      	movs	r0, #1
 8000950:	f00c fb06 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
	  break;  //case
 8000954:	e0a9      	b.n	8000aaa <Sensor_Process+0x356>

	case RX_START:
	  FrameSentCnt++;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <Sensor_Process+0x25c>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <Sensor_Process+0x25c>)
 8000960:	801a      	strh	r2, [r3, #0]
	  Radio.SetChannel(RF_FREQUENCY);
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <Sensor_Process+0x268>)
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	4816      	ldr	r0, [pc, #88]	; (80009c0 <Sensor_Process+0x26c>)
 8000968:	4798      	blx	r3
	  Radio.Rx(RX_TIMEOUT_VALUE);
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <Sensor_Process+0x268>)
 800096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000972:	4798      	blx	r3
	  APP_LOG(TS_ON, VLEVEL_L, "RX...\r\n");
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <Sensor_Process+0x288>)
 8000976:	2201      	movs	r2, #1
 8000978:	2100      	movs	r1, #0
 800097a:	2001      	movs	r0, #1
 800097c:	f00c faf0 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
	  break;
 8000980:	e093      	b.n	8000aaa <Sensor_Process+0x356>

	case RX_DONE:
	  Radio.Sleep();
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <Sensor_Process+0x268>)
 8000984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000986:	4798      	blx	r3
	  UTIL_TIMER_Start(&timerLedRx);
 8000988:	4815      	ldr	r0, [pc, #84]	; (80009e0 <Sensor_Process+0x28c>)
 800098a:	f00c f883 	bl	800ca94 <UTIL_TIMER_Start>
	  SYS_LED_On(SYS_LED_GREEN);
 800098e:	2001      	movs	r0, #1
 8000990:	f001 fca2 	bl	80022d8 <SYS_LED_On>
	  APP_LOG(TS_ON,VLEVEL_L,"RX hex: ");
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <Sensor_Process+0x290>)
 8000996:	2201      	movs	r2, #1
 8000998:	2100      	movs	r1, #0
 800099a:	2001      	movs	r0, #1
 800099c:	f00c fae0 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
	  for(uint16_t i=0;i<BufferSize;i++) APP_LOG(TS_OFF,VLEVEL_L,"%02X|",Buffer[i]);
 80009a0:	2300      	movs	r3, #0
 80009a2:	81fb      	strh	r3, [r7, #14]
 80009a4:	e02d      	b.n	8000a02 <Sensor_Process+0x2ae>
 80009a6:	bf00      	nop
 80009a8:	20000002 	.word	0x20000002
 80009ac:	200000ac 	.word	0x200000ac
 80009b0:	200000ec 	.word	0x200000ec
 80009b4:	200000ee 	.word	0x200000ee
 80009b8:	20000000 	.word	0x20000000
 80009bc:	0800e944 	.word	0x0800e944
 80009c0:	33bca100 	.word	0x33bca100
 80009c4:	0800e5e8 	.word	0x0800e5e8
 80009c8:	0800e604 	.word	0x0800e604
 80009cc:	0800e624 	.word	0x0800e624
 80009d0:	0800e658 	.word	0x0800e658
 80009d4:	20000124 	.word	0x20000124
 80009d8:	0800e660 	.word	0x0800e660
 80009dc:	0800e680 	.word	0x0800e680
 80009e0:	2000010c 	.word	0x2000010c
 80009e4:	0800e688 	.word	0x0800e688
 80009e8:	89fb      	ldrh	r3, [r7, #14]
 80009ea:	4a32      	ldr	r2, [pc, #200]	; (8000ab4 <Sensor_Process+0x360>)
 80009ec:	5cd3      	ldrb	r3, [r2, r3]
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <Sensor_Process+0x364>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2001      	movs	r0, #1
 80009f8:	f00c fab2 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
 80009fc:	89fb      	ldrh	r3, [r7, #14]
 80009fe:	3301      	adds	r3, #1
 8000a00:	81fb      	strh	r3, [r7, #14]
 8000a02:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <Sensor_Process+0x368>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	89fa      	ldrh	r2, [r7, #14]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d3ed      	bcc.n	80009e8 <Sensor_Process+0x294>
	  APP_LOG(TS_OFF,VLEVEL_L,"\r\nRSSI=%ddBm , SNR=%ddB\r\n\r\n",RssiValue,SnrValue);
 8000a0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ac0 <Sensor_Process+0x36c>)
 8000a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <Sensor_Process+0x370>)
 8000a16:	f993 3000 	ldrsb.w	r3, [r3]
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	9200      	str	r2, [sp, #0]
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <Sensor_Process+0x374>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2001      	movs	r0, #1
 8000a26:	f00c fa9b 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
	  if ((Buffer[0]=='A') && (Buffer[1]=='C') && (Buffer[2]=='K'))
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <Sensor_Process+0x360>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b41      	cmp	r3, #65	; 0x41
 8000a30:	d13a      	bne.n	8000aa8 <Sensor_Process+0x354>
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <Sensor_Process+0x360>)
 8000a34:	785b      	ldrb	r3, [r3, #1]
 8000a36:	2b43      	cmp	r3, #67	; 0x43
 8000a38:	d136      	bne.n	8000aa8 <Sensor_Process+0x354>
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <Sensor_Process+0x360>)
 8000a3c:	789b      	ldrb	r3, [r3, #2]
 8000a3e:	2b4b      	cmp	r3, #75	; 0x4b
 8000a40:	d132      	bne.n	8000aa8 <Sensor_Process+0x354>
	  {
	    FrameAckCnt++;
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <Sensor_Process+0x378>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b20      	ldr	r3, [pc, #128]	; (8000acc <Sensor_Process+0x378>)
 8000a4c:	801a      	strh	r2, [r3, #0]
	  }
	  break;
 8000a4e:	e02b      	b.n	8000aa8 <Sensor_Process+0x354>

	case RX_TO:
	  Radio.Sleep();
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <Sensor_Process+0x37c>)
 8000a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a54:	4798      	blx	r3
	  APP_LOG(TS_ON, VLEVEL_L, "RX timeout\r\n\r\n");
 8000a56:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <Sensor_Process+0x380>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f00c fa7f 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
	  break;
 8000a62:	e022      	b.n	8000aaa <Sensor_Process+0x356>

	case RX_ERR:
	  Radio.Sleep();
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <Sensor_Process+0x37c>)
 8000a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a68:	4798      	blx	r3
	  UTIL_TIMER_Start(&timerLedError);
 8000a6a:	481b      	ldr	r0, [pc, #108]	; (8000ad8 <Sensor_Process+0x384>)
 8000a6c:	f00c f812 	bl	800ca94 <UTIL_TIMER_Start>
	  SYS_LED_On(SYS_LED_RED);
 8000a70:	2002      	movs	r0, #2
 8000a72:	f001 fc31 	bl	80022d8 <SYS_LED_On>
	  APP_LOG(TS_ON, VLEVEL_L, "RX error\r\n");
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <Sensor_Process+0x388>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f00c fa6f 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
	  break;
 8000a82:	e012      	b.n	8000aaa <Sensor_Process+0x356>

	case TX_TO:
	  Radio.Sleep();
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <Sensor_Process+0x37c>)
 8000a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a88:	4798      	blx	r3
	  UTIL_TIMER_Start(&timerLedError);
 8000a8a:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <Sensor_Process+0x384>)
 8000a8c:	f00c f802 	bl	800ca94 <UTIL_TIMER_Start>
	  SYS_LED_On(SYS_LED_RED);
 8000a90:	2002      	movs	r0, #2
 8000a92:	f001 fc21 	bl	80022d8 <SYS_LED_On>
	  APP_LOG(TS_ON, VLEVEL_L, "TX timeout\r\n");
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <Sensor_Process+0x38c>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f00c fa5f 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
	  break;
 8000aa2:	e002      	b.n	8000aaa <Sensor_Process+0x356>

	default:
      break;
 8000aa4:	bf00      	nop
 8000aa6:	e000      	b.n	8000aaa <Sensor_Process+0x356>
	  break;
 8000aa8:	bf00      	nop
  }
}
 8000aaa:	bf00      	nop
 8000aac:	371c      	adds	r7, #28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd90      	pop	{r4, r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200000ac 	.word	0x200000ac
 8000ab8:	0800e694 	.word	0x0800e694
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	200000f0 	.word	0x200000f0
 8000ac4:	200000f1 	.word	0x200000f1
 8000ac8:	0800e69c 	.word	0x0800e69c
 8000acc:	200000ee 	.word	0x200000ee
 8000ad0:	0800e944 	.word	0x0800e944
 8000ad4:	0800e6b8 	.word	0x0800e6b8
 8000ad8:	20000124 	.word	0x20000124
 8000adc:	0800e6c8 	.word	0x0800e6c8
 8000ae0:	0800e6d4 	.word	0x0800e6d4

08000ae4 <OnTxDone>:

static void OnTxDone(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  State = RX_START;
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <OnTxDone+0x18>)
 8000aea:	2205      	movs	r2, #5
 8000aec:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_Sensor_Process), CFG_SEQ_Prio_0);
 8000aee:	2100      	movs	r1, #0
 8000af0:	2001      	movs	r0, #1
 8000af2:	f00b ff19 	bl	800c928 <UTIL_SEQ_SetTask>
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000002 	.word	0x20000002

08000b00 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	4608      	mov	r0, r1
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4603      	mov	r3, r0
 8000b10:	817b      	strh	r3, [r7, #10]
 8000b12:	460b      	mov	r3, r1
 8000b14:	813b      	strh	r3, [r7, #8]
 8000b16:	4613      	mov	r3, r2
 8000b18:	71fb      	strb	r3, [r7, #7]
  BufferSize = size;
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <OnRxDone+0x54>)
 8000b1c:	897b      	ldrh	r3, [r7, #10]
 8000b1e:	8013      	strh	r3, [r2, #0]
  memcpy(Buffer, payload, BufferSize);
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <OnRxDone+0x54>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	68f9      	ldr	r1, [r7, #12]
 8000b28:	480b      	ldr	r0, [pc, #44]	; (8000b58 <OnRxDone+0x58>)
 8000b2a:	f00c fcbb 	bl	800d4a4 <memcpy>
  RssiValue = rssi;
 8000b2e:	893b      	ldrh	r3, [r7, #8]
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <OnRxDone+0x5c>)
 8000b34:	701a      	strb	r2, [r3, #0]
  SnrValue = LoraSnr_FskCfo;
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <OnRxDone+0x60>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	7013      	strb	r3, [r2, #0]

  State = RX_DONE;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <OnRxDone+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_Sensor_Process), CFG_SEQ_Prio_0);
 8000b42:	2100      	movs	r1, #0
 8000b44:	2001      	movs	r0, #1
 8000b46:	f00b feef 	bl	800c928 <UTIL_SEQ_SetTask>
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000000 	.word	0x20000000
 8000b58:	200000ac 	.word	0x200000ac
 8000b5c:	200000f0 	.word	0x200000f0
 8000b60:	200000f1 	.word	0x200000f1
 8000b64:	20000002 	.word	0x20000002

08000b68 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  State = TX_TO;
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <OnTxTimeout+0x18>)
 8000b6e:	2206      	movs	r2, #6
 8000b70:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_Sensor_Process), CFG_SEQ_Prio_0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2001      	movs	r0, #1
 8000b76:	f00b fed7 	bl	800c928 <UTIL_SEQ_SetTask>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000002 	.word	0x20000002

08000b84 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  State = RX_TO;
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <OnRxTimeout+0x18>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_Sensor_Process), CFG_SEQ_Prio_0);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2001      	movs	r0, #1
 8000b92:	f00b fec9 	bl	800c928 <UTIL_SEQ_SetTask>
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000002 	.word	0x20000002

08000ba0 <OnRxError>:

static void OnRxError(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  State = RX_ERR;
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <OnRxError+0x18>)
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_Sensor_Process), CFG_SEQ_Prio_0);
 8000baa:	2100      	movs	r1, #0
 8000bac:	2001      	movs	r0, #1
 8000bae:	f00b febb 	bl	800c928 <UTIL_SEQ_SetTask>
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000002 	.word	0x20000002

08000bbc <OnLedTxEvent>:

static void OnLedTxEvent(void *context)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  SYS_LED_Off(SYS_LED_BLUE) ;
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f001 fba1 	bl	800230c <SYS_LED_Off>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <OnLedRxEvent>:

static void OnLedRxEvent(void *context)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  SYS_LED_Off(SYS_LED_GREEN) ;
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f001 fb96 	bl	800230c <SYS_LED_Off>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <OnLedErrorEvent>:

static void OnLedErrorEvent(void *context)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  SYS_LED_Off(SYS_LED_RED) ;
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f001 fb8b 	bl	800230c <SYS_LED_Off>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <OnTimerTxEvent>:

static void OnTimerTxEvent(void *context)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  State = TX_START;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <OnTimerTxEvent+0x30>)
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	701a      	strb	r2, [r3, #0]
  UTIL_TIMER_Start(&timerTx);
 8000c0e:	4809      	ldr	r0, [pc, #36]	; (8000c34 <OnTimerTxEvent+0x34>)
 8000c10:	f00b ff40 	bl	800ca94 <UTIL_TIMER_Start>
  UTIL_TIMER_Start(&timerLedTx);
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <OnTimerTxEvent+0x38>)
 8000c16:	f00b ff3d 	bl	800ca94 <UTIL_TIMER_Start>
  SYS_LED_On(SYS_LED_BLUE);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f001 fb5c 	bl	80022d8 <SYS_LED_On>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_Sensor_Process), CFG_SEQ_Prio_0);
 8000c20:	2100      	movs	r1, #0
 8000c22:	2001      	movs	r0, #1
 8000c24:	f00b fe80 	bl	800c928 <UTIL_SEQ_SetTask>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000002 	.word	0x20000002
 8000c34:	2000013c 	.word	0x2000013c
 8000c38:	200000f4 	.word	0x200000f4

08000c3c <powInt>:

static uint32_t powInt(uint32_t base, uint32_t exp)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
    uint32_t result = 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
    while(exp) { result *= base; exp--; }
 8000c4a:	e007      	b.n	8000c5c <powInt+0x20>
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	fb02 f303 	mul.w	r3, r2, r3
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1f4      	bne.n	8000c4c <powInt+0x10>
    return result;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b085      	sub	sp, #20
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr

08000c9e <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000caa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
	...

08000cc4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000cc8:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <MX_ADC_Init+0x94>)
 8000cca:	4a24      	ldr	r2, [pc, #144]	; (8000d5c <MX_ADC_Init+0x98>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cce:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <MX_ADC_Init+0x94>)
 8000cd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000cd4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000cd6:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <MX_ADC_Init+0x94>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <MX_ADC_Init+0x94>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <MX_ADC_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <MX_ADC_Init+0x94>)
 8000cea:	2204      	movs	r2, #4
 8000cec:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <MX_ADC_Init+0x94>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <MX_ADC_Init+0x94>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <MX_ADC_Init+0x94>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <MX_ADC_Init+0x94>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_ADC_Init+0x94>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <MX_ADC_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_ADC_Init+0x94>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_ADC_Init+0x94>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <MX_ADC_Init+0x94>)
 8000d24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d28:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_ADC_Init+0x94>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_ADC_Init+0x94>)
 8000d32:	2207      	movs	r2, #7
 8000d34:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <MX_ADC_Init+0x94>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_ADC_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_ADC_Init+0x94>)
 8000d46:	f001 fd65 	bl	8002814 <HAL_ADC_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000d50:	f000 fd1e 	bl	8001790 <Error_Handler>
  }

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000170 	.word	0x20000170
 8000d5c:	40012400 	.word	0x40012400

08000d60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <HAL_ADC_MspInit+0x24>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d103      	bne.n	8000d7a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d76:	f7ff ff7a 	bl	8000c6e <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40012400 	.word	0x40012400

08000d88 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a05      	ldr	r2, [pc, #20]	; (8000dac <HAL_ADC_MspDeInit+0x24>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d103      	bne.n	8000da2 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000d9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d9e:	f7ff ff7e 	bl	8000c9e <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40012400 	.word	0x40012400

08000db0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <SYS_InitMeasurement+0x14>)
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <SYS_InitMeasurement+0x18>)
 8000db8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000170 	.word	0x20000170
 8000dc8:	40012400 	.word	0x40012400

08000dcc <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000dda:	f000 f871 	bl	8000ec0 <SYS_GetBatteryLevel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000de2:	4830      	ldr	r0, [pc, #192]	; (8000ea4 <SYS_GetTemperatureLevel+0xd8>)
 8000de4:	f000 f8a0 	bl	8000f28 <ADC_ReadChannels>
 8000de8:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000dea:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <SYS_GetTemperatureLevel+0xdc>)
 8000dec:	881a      	ldrh	r2, [r3, #0]
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <SYS_GetTemperatureLevel+0xe0>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d026      	beq.n	8000e44 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <SYS_GetTemperatureLevel+0xdc>)
 8000df8:	881a      	ldrh	r2, [r3, #0]
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <SYS_GetTemperatureLevel+0xe0>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d01c      	beq.n	8000e3c <SYS_GetTemperatureLevel+0x70>
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	fb02 f303 	mul.w	r3, r2, r3
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	4a28      	ldr	r2, [pc, #160]	; (8000eb0 <SYS_GetTemperatureLevel+0xe4>)
 8000e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <SYS_GetTemperatureLevel+0xe0>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2264      	movs	r2, #100	; 0x64
 8000e1e:	fb03 f202 	mul.w	r2, r3, r2
 8000e22:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <SYS_GetTemperatureLevel+0xdc>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	4619      	mov	r1, r3
 8000e28:	4b20      	ldr	r3, [pc, #128]	; (8000eac <SYS_GetTemperatureLevel+0xe0>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	331e      	adds	r3, #30
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	e001      	b.n	8000e40 <SYS_GetTemperatureLevel+0x74>
 8000e3c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000e40:	81fb      	strh	r3, [r7, #14]
 8000e42:	e01c      	b.n	8000e7e <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	fb03 f202 	mul.w	r2, r3, r2
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <SYS_GetTemperatureLevel+0xe8>)
 8000e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e52:	1ad2      	subs	r2, r2, r3
 8000e54:	0852      	lsrs	r2, r2, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	0adb      	lsrs	r3, r3, #11
 8000e5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8000e66:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8000e6a:	4a13      	ldr	r2, [pc, #76]	; (8000eb8 <SYS_GetTemperatureLevel+0xec>)
 8000e6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e70:	1292      	asrs	r2, r2, #10
 8000e72:	17db      	asrs	r3, r3, #31
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	331e      	adds	r3, #30
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8000e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <SYS_GetTemperatureLevel+0xf0>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f00c f868 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8000e90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 8000e98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	b0001000 	.word	0xb0001000
 8000ea8:	1fff75c8 	.word	0x1fff75c8
 8000eac:	1fff75a8 	.word	0x1fff75a8
 8000eb0:	09ee009f 	.word	0x09ee009f
 8000eb4:	00100101 	.word	0x00100101
 8000eb8:	68db8bad 	.word	0x68db8bad
 8000ebc:	0800e6e4 	.word	0x0800e6e4

08000ec0 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000ece:	4813      	ldr	r0, [pc, #76]	; (8000f1c <SYS_GetBatteryLevel+0x5c>)
 8000ed0:	f000 f82a 	bl	8000f28 <ADC_ReadChannels>
 8000ed4:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	80fb      	strh	r3, [r7, #6]
 8000ee0:	e016      	b.n	8000f10 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <SYS_GetBatteryLevel+0x60>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00b      	beq.n	8000f06 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <SYS_GetBatteryLevel+0x60>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000ef8:	fb03 f202 	mul.w	r2, r3, r2
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	80fb      	strh	r3, [r7, #6]
 8000f04:	e004      	b.n	8000f10 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000f06:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <SYS_GetBatteryLevel+0x64>)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	b4002000 	.word	0xb4002000
 8000f20:	1fff75aa 	.word	0x1fff75aa
 8000f24:	004c08d8 	.word	0x004c08d8

08000f28 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8000f40:	f7ff fec0 	bl	8000cc4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f44:	481a      	ldr	r0, [pc, #104]	; (8000fb0 <ADC_ReadChannels+0x88>)
 8000f46:	f002 fa4b 	bl	80033e0 <HAL_ADCEx_Calibration_Start>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8000f50:	f000 fc1e 	bl	8001790 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	4619      	mov	r1, r3
 8000f66:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <ADC_ReadChannels+0x88>)
 8000f68:	f001 ffb2 	bl	8002ed0 <HAL_ADC_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8000f72:	f000 fc0d 	bl	8001790 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <ADC_ReadChannels+0x88>)
 8000f78:	f001 fe8e 	bl	8002c98 <HAL_ADC_Start>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8000f82:	f000 fc05 	bl	8001790 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f86:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8a:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <ADC_ReadChannels+0x88>)
 8000f8c:	f001 fefc 	bl	8002d88 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <ADC_ReadChannels+0x88>)
 8000f92:	f001 fec7 	bl	8002d24 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f96:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <ADC_ReadChannels+0x88>)
 8000f98:	f001 ff8d 	bl	8002eb6 <HAL_ADC_GetValue>
 8000f9c:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8000f9e:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <ADC_ReadChannels+0x88>)
 8000fa0:	f001 fdfe 	bl	8002ba0 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8000fa4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000170 	.word	0x20000170

08000fb4 <LL_AHB1_GRP1_EnableClock>:
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fe8:	2004      	movs	r0, #4
 8000fea:	f7ff ffe3 	bl	8000fb4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff ffe0 	bl	8000fb4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	200f      	movs	r0, #15
 8000ffa:	f002 fb44 	bl	8003686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ffe:	200f      	movs	r0, #15
 8001000:	f002 fb5b 	bl	80036ba <HAL_NVIC_EnableIRQ>

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800100c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800101c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <LL_APB1_GRP1_EnableClock>:
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001034:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001044:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800104c:	68fb      	ldr	r3, [r7, #12]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08c      	sub	sp, #48	; 0x30
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	222c      	movs	r2, #44	; 0x2c
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f00c fa2b 	bl	800d4c0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <MX_RTC_Init+0x9c>)
 800106c:	4a22      	ldr	r2, [pc, #136]	; (80010f8 <MX_RTC_Init+0xa0>)
 800106e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001070:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <MX_RTC_Init+0x9c>)
 8001072:	221f      	movs	r2, #31
 8001074:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <MX_RTC_Init+0x9c>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_RTC_Init+0x9c>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <MX_RTC_Init+0x9c>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_RTC_Init+0x9c>)
 800108a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_RTC_Init+0x9c>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_RTC_Init+0x9c>)
 8001098:	f44f 7280 	mov.w	r2, #256	; 0x100
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800109e:	4815      	ldr	r0, [pc, #84]	; (80010f4 <MX_RTC_Init+0x9c>)
 80010a0:	f004 fd70 	bl	8005b84 <HAL_RTC_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80010aa:	f000 fb71 	bl	8001790 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80010ae:	4811      	ldr	r0, [pc, #68]	; (80010f4 <MX_RTC_Init+0x9c>)
 80010b0:	f005 f85e 	bl	8006170 <HAL_RTCEx_SetSSRU_IT>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80010ba:	f000 fb69 	bl	8001790 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80010ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010ce:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80010d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
//  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_RTC_Init+0x9c>)
 80010de:	f004 fdcb 	bl	8005c78 <HAL_RTC_SetAlarm_IT>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80010e8:	f000 fb52 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3730      	adds	r7, #48	; 0x30
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200001d4 	.word	0x200001d4
 80010f8:	40002800 	.word	0x40002800

080010fc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b090      	sub	sp, #64	; 0x40
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	2238      	movs	r2, #56	; 0x38
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f00c f9d7 	bl	800d4c0 <memset>
  if(rtcHandle->Instance==RTC)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a16      	ldr	r2, [pc, #88]	; (8001170 <HAL_RTC_MspInit+0x74>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d125      	bne.n	8001168 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800111c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001120:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001126:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4618      	mov	r0, r3
 800112e:	f004 fc0f 	bl	8005950 <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001138:	f000 fb2a 	bl	8001790 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800113c:	f7ff ff64 	bl	8001008 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001140:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001144:	f7ff ff70 	bl	8001028 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	2002      	movs	r0, #2
 800114e:	f002 fa9a 	bl	8003686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001152:	2002      	movs	r0, #2
 8001154:	f002 fab1 	bl	80036ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	202a      	movs	r0, #42	; 0x2a
 800115e:	f002 fa92 	bl	8003686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001162:	202a      	movs	r0, #42	; 0x2a
 8001164:	f002 faa9 	bl	80036ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001168:	bf00      	nop
 800116a:	3740      	adds	r7, #64	; 0x40
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40002800 	.word	0x40002800

08001174 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800117c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001180:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4313      	orrs	r3, r2
 800118a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800118c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001190:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4013      	ands	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001198:	68fb      	ldr	r3, [r7, #12]
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_SUBGHZ_Init+0x20>)
 80011aa:	2208      	movs	r2, #8
 80011ac:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_SUBGHZ_Init+0x20>)
 80011b0:	f005 f906 	bl	80063c0 <HAL_SUBGHZ_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80011ba:	f000 fae9 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000020c 	.word	0x2000020c

080011c8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff ffcf 	bl	8001174 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2032      	movs	r0, #50	; 0x32
 80011dc:	f002 fa53 	bl	8003686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80011e0:	2032      	movs	r0, #50	; 0x32
 80011e2:	f002 fa6a 	bl	80036ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <LL_AHB2_GRP1_EnableClock>:
{
 80011ee:	b480      	push	{r7}
 80011f0:	b085      	sub	sp, #20
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4313      	orrs	r3, r2
 8001204:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4013      	ands	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <LL_APB1_GRP1_EnableClock>:
{
 800121e:	b480      	push	{r7}
 8001220:	b085      	sub	sp, #20
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800122c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4313      	orrs	r3, r2
 8001234:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4013      	ands	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <LL_APB1_GRP1_DisableClock>:
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	43db      	mvns	r3, r3
 8001260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001264:	4013      	ands	r3, r2
 8001266:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
	...

08001274 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <MX_USART2_UART_Init+0x90>)
 800127a:	4a23      	ldr	r2, [pc, #140]	; (8001308 <MX_USART2_UART_Init+0x94>)
 800127c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = USART_BAUDRATE;
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_USART2_UART_Init+0x90>)
 8001280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001284:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_USART2_UART_Init+0x90>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_USART2_UART_Init+0x90>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_USART2_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_USART2_UART_Init+0x90>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_USART2_UART_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_USART2_UART_Init+0x90>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_USART2_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_USART2_UART_Init+0x90>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_USART2_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012bc:	4811      	ldr	r0, [pc, #68]	; (8001304 <MX_USART2_UART_Init+0x90>)
 80012be:	f005 fcba 	bl	8006c36 <HAL_UART_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012c8:	f000 fa62 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012cc:	2100      	movs	r1, #0
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_USART2_UART_Init+0x90>)
 80012d0:	f007 fd0b 	bl	8008cea <HAL_UARTEx_SetTxFifoThreshold>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012da:	f000 fa59 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012de:	2100      	movs	r1, #0
 80012e0:	4808      	ldr	r0, [pc, #32]	; (8001304 <MX_USART2_UART_Init+0x90>)
 80012e2:	f007 fd40 	bl	8008d66 <HAL_UARTEx_SetRxFifoThreshold>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012ec:	f000 fa50 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_USART2_UART_Init+0x90>)
 80012f2:	f007 fcbf 	bl	8008c74 <HAL_UARTEx_EnableFifoMode>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012fc:	f000 fa48 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000218 	.word	0x20000218
 8001308:	40004400 	.word	0x40004400

0800130c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b096      	sub	sp, #88	; 0x58
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	2238      	movs	r2, #56	; 0x38
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f00c f8c7 	bl	800d4c0 <memset>
  if(uartHandle->Instance==USART2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a33      	ldr	r2, [pc, #204]	; (8001404 <HAL_UART_MspInit+0xf8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d15f      	bne.n	80013fc <HAL_UART_MspInit+0xf0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800133c:	2302      	movs	r3, #2
 800133e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001340:	4b31      	ldr	r3, [pc, #196]	; (8001408 <HAL_UART_MspInit+0xfc>)
 8001342:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	4618      	mov	r0, r3
 800134a:	f004 fb01 	bl	8005950 <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001354:	f000 fa1c 	bl	8001790 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001358:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800135c:	f7ff ff5f 	bl	800121e <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	2001      	movs	r0, #1
 8001362:	f7ff ff44 	bl	80011ee <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001366:	230c      	movs	r3, #12
 8001368:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001376:	2307      	movs	r3, #7
 8001378:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001384:	f002 fdce 	bl	8003f24 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_UART_MspInit+0x100>)
 800138a:	4a21      	ldr	r2, [pc, #132]	; (8001410 <HAL_UART_MspInit+0x104>)
 800138c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <HAL_UART_MspInit+0x100>)
 8001390:	2214      	movs	r2, #20
 8001392:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <HAL_UART_MspInit+0x100>)
 8001396:	2210      	movs	r2, #16
 8001398:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <HAL_UART_MspInit+0x100>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <HAL_UART_MspInit+0x100>)
 80013a2:	2280      	movs	r2, #128	; 0x80
 80013a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_UART_MspInit+0x100>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <HAL_UART_MspInit+0x100>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_UART_MspInit+0x100>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_UART_MspInit+0x100>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80013be:	4813      	ldr	r0, [pc, #76]	; (800140c <HAL_UART_MspInit+0x100>)
 80013c0:	f002 f998 	bl	80036f4 <HAL_DMA_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80013ca:	f000 f9e1 	bl	8001790 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80013ce:	2110      	movs	r1, #16
 80013d0:	480e      	ldr	r0, [pc, #56]	; (800140c <HAL_UART_MspInit+0x100>)
 80013d2:	f002 fccf 	bl	8003d74 <HAL_DMA_ConfigChannelAttributes>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 80013dc:	f000 f9d8 	bl	8001790 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_UART_MspInit+0x100>)
 80013e4:	679a      	str	r2, [r3, #120]	; 0x78
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_UART_MspInit+0x100>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2102      	movs	r1, #2
 80013f0:	2025      	movs	r0, #37	; 0x25
 80013f2:	f002 f948 	bl	8003686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013f6:	2025      	movs	r0, #37	; 0x25
 80013f8:	f002 f95f 	bl	80036ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013fc:	bf00      	nop
 80013fe:	3758      	adds	r7, #88	; 0x58
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40004400 	.word	0x40004400
 8001408:	000c0004 	.word	0x000c0004
 800140c:	200002a8 	.word	0x200002a8
 8001410:	40020058 	.word	0x40020058

08001414 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <HAL_UART_MspDeInit+0x3c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d110      	bne.n	8001448 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001426:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800142a:	f7ff ff10 	bl	800124e <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800142e:	210c      	movs	r1, #12
 8001430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001434:	f002 fed6 	bl	80041e4 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800143c:	4618      	mov	r0, r3
 800143e:	f002 fa01 	bl	8003844 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001442:	2025      	movs	r0, #37	; 0x25
 8001444:	f002 f947 	bl	80036d6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40004400 	.word	0x40004400

08001454 <LL_APB1_GRP1_ForceReset>:
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800145c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001462:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4313      	orrs	r3, r2
 800146a:	638b      	str	r3, [r1, #56]	; 0x38
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <LL_APB1_GRP1_ReleaseReset>:
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800147e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	43db      	mvns	r3, r3
 8001488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800148c:	4013      	ands	r3, r2
 800148e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
	...

0800149c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80014a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80014aa:	4905      	ldr	r1, [pc, #20]	; (80014c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	58000800 	.word	0x58000800

080014c4 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <vcom_Init+0x28>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80014d2:	f7ff fd87 	bl	8000fe4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014d6:	f7ff fecd 	bl	8001274 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 80014da:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80014de:	f7ff ffdd 	bl	800149c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80014e2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000030c 	.word	0x2000030c

080014f0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 80014f4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80014f8:	f7ff ffac 	bl	8001454 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 80014fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001500:	f7ff ffb9 	bl	8001476 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <vcom_DeInit+0x28>)
 8001506:	f7ff ff85 	bl	8001414 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800150a:	200f      	movs	r0, #15
 800150c:	f002 f8e3 	bl	80036d6 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8001510:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001512:	4618      	mov	r0, r3
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000218 	.word	0x20000218

0800151c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001528:	887b      	ldrh	r3, [r7, #2]
 800152a:	461a      	mov	r2, r3
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4804      	ldr	r0, [pc, #16]	; (8001540 <vcom_Trace_DMA+0x24>)
 8001530:	f005 fc28 	bl	8006d84 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8001534:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000218 	.word	0x20000218

08001544 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800154c:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <vcom_ReceiveInit+0x70>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001552:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001556:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001558:	f107 0308 	add.w	r3, r7, #8
 800155c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001560:	4815      	ldr	r0, [pc, #84]	; (80015b8 <vcom_ReceiveInit+0x74>)
 8001562:	f007 fafa 	bl	8008b5a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001566:	bf00      	nop
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <vcom_ReceiveInit+0x74>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001576:	d0f7      	beq.n	8001568 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001578:	bf00      	nop
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <vcom_ReceiveInit+0x74>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001588:	d1f7      	bne.n	800157a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <vcom_ReceiveInit+0x74>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <vcom_ReceiveInit+0x74>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001598:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800159a:	4807      	ldr	r0, [pc, #28]	; (80015b8 <vcom_ReceiveInit+0x74>)
 800159c:	f007 fb38 	bl	8008c10 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80015a0:	2201      	movs	r2, #1
 80015a2:	4906      	ldr	r1, [pc, #24]	; (80015bc <vcom_ReceiveInit+0x78>)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <vcom_ReceiveInit+0x74>)
 80015a6:	f005 fb97 	bl	8006cd8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80015aa:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000310 	.word	0x20000310
 80015b8:	20000218 	.word	0x20000218
 80015bc:	20000308 	.word	0x20000308

080015c0 <vcom_Resume>:

void vcom_Resume(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c4:	4808      	ldr	r0, [pc, #32]	; (80015e8 <vcom_Resume+0x28>)
 80015c6:	f005 fb36 	bl	8006c36 <HAL_UART_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <vcom_Resume+0x14>
  {
    Error_Handler();
 80015d0:	f000 f8de 	bl	8001790 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <vcom_Resume+0x2c>)
 80015d6:	f002 f88d 	bl	80036f4 <HAL_DMA_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <vcom_Resume+0x24>
  {
    Error_Handler();
 80015e0:	f000 f8d6 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000218 	.word	0x20000218
 80015ec:	200002a8 	.word	0x200002a8

080015f0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_UART_TxCpltCallback+0x18>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2000      	movs	r0, #0
 80015fe:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000030c 	.word	0x2000030c

0800160c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_UART_RxCpltCallback+0x38>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00a      	beq.n	8001632 <HAL_UART_RxCpltCallback+0x26>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001622:	2b00      	cmp	r3, #0
 8001624:	d105      	bne.n	8001632 <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <HAL_UART_RxCpltCallback+0x38>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2200      	movs	r2, #0
 800162c:	2101      	movs	r1, #1
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <HAL_UART_RxCpltCallback+0x3c>)
 8001630:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8001632:	2201      	movs	r2, #1
 8001634:	4904      	ldr	r1, [pc, #16]	; (8001648 <HAL_UART_RxCpltCallback+0x3c>)
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f005 fb4e 	bl	8006cd8 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000310 	.word	0x20000310
 8001648:	20000308 	.word	0x20000308

0800164c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800164e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001650:	f000 fbbc 	bl	8001dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001654:	480c      	ldr	r0, [pc, #48]	; (8001688 <LoopForever+0x6>)
  ldr r1, =_edata
 8001656:	490d      	ldr	r1, [pc, #52]	; (800168c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001658:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <LoopForever+0xe>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800166c:	4c0a      	ldr	r4, [pc, #40]	; (8001698 <LoopForever+0x16>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800167a:	f00b feef 	bl	800d45c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800167e:	f000 f823 	bl	80016c8 <main>

08001682 <LoopForever>:

LoopForever:
    b LoopForever
 8001682:	e7fe      	b.n	8001682 <LoopForever>
  ldr   r0, =_estack
 8001684:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001690:	0800ebe4 	.word	0x0800ebe4
  ldr r2, =_sbss
 8001694:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001698:	20000894 	.word	0x20000894

0800169c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC_IRQHandler>

0800169e <LL_RCC_LSE_SetDriveCapability>:
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80016a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	f023 0218 	bic.w	r2, r3, #24
 80016b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016cc:	f000 fec6 	bl	800245c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d0:	f000 f806 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_SubGHz_Phy_Init();
 80016d4:	f7fe ff2e 	bl	8000534 <MX_SubGHz_Phy_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 80016d8:	f7fe ff34 	bl	8000544 <MX_SubGHz_Phy_Process>
 80016dc:	e7fc      	b.n	80016d8 <main+0x10>
	...

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b09a      	sub	sp, #104	; 0x68
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0320 	add.w	r3, r7, #32
 80016ea:	2248      	movs	r2, #72	; 0x48
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f00b fee6 	bl	800d4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]
 8001702:	615a      	str	r2, [r3, #20]
 8001704:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001706:	f002 fe53 	bl	80043b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff ffc7 	bl	800169e <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001710:	4b1e      	ldr	r3, [pc, #120]	; (800178c <SystemClock_Config+0xac>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001718:	4a1c      	ldr	r2, [pc, #112]	; (800178c <SystemClock_Config+0xac>)
 800171a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <SystemClock_Config+0xac>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800172c:	2324      	movs	r3, #36	; 0x24
 800172e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001730:	2381      	movs	r3, #129	; 0x81
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001734:	2301      	movs	r3, #1
 8001736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001738:	2300      	movs	r3, #0
 800173a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800173c:	23b0      	movs	r3, #176	; 0xb0
 800173e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001740:	2300      	movs	r3, #0
 8001742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001744:	f107 0320 	add.w	r3, r7, #32
 8001748:	4618      	mov	r0, r3
 800174a:	f003 f9a5 	bl	8004a98 <HAL_RCC_OscConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001754:	f000 f81c 	bl	8001790 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001758:	234f      	movs	r3, #79	; 0x4f
 800175a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	2102      	movs	r1, #2
 8001774:	4618      	mov	r0, r3
 8001776:	f003 fd2b 	bl	80051d0 <HAL_RCC_ClockConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001780:	f000 f806 	bl	8001790 <Error_Handler>
  }
}
 8001784:	bf00      	nop
 8001786:	3768      	adds	r7, #104	; 0x68
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	58000400 	.word	0x58000400

08001790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001794:	b672      	cpsid	i
}
 8001796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001798:	e7fe      	b.n	8001798 <Error_Handler+0x8>
	...

0800179c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	58000400 	.word	0x58000400

080017b4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  /* Suspend sysTick : work around for degugger problem in dual core (tickets 71085,  72038, 71087 ) */
  HAL_SuspendTick();
 80017d0:	f000 fe76 	bl	80024c0 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80017d4:	f7ff ffe2 	bl	800179c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80017d8:	2001      	movs	r0, #1
 80017da:	f002 fe7b 	bl	80044d4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80017e6:	f000 fe79 	bl	80024dc <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80017ea:	f7ff fee9 	bl	80015c0 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80017f6:	f000 fe63 	bl	80024c0 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80017fa:	2101      	movs	r1, #1
 80017fc:	2000      	movs	r0, #0
 80017fe:	f002 fde5 	bl	80043cc <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}

08001806 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 800180a:	f000 fe67 	bl	80024dc <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <NMI_Handler+0x4>

08001824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <HardFault_Handler+0x4>

0800182a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <MemManage_Handler+0x4>

08001830 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <BusFault_Handler+0x4>

08001836 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <UsageFault_Handler+0x4>

0800183c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001864:	f000 fe1a 	bl	800249c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}

0800186c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001872:	f004 fcb9 	bl	80061e8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200001d4 	.word	0x200001d4

08001880 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <DMA1_Channel5_IRQHandler+0x10>)
 8001886:	f002 f9af 	bl	8003be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200002a8 	.word	0x200002a8

08001894 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <USART2_IRQHandler+0x10>)
 800189a:	f005 fb05 	bl	8006ea8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000218 	.word	0x20000218

080018a8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <RTC_Alarm_IRQHandler+0x10>)
 80018ae:	f004 fb4b 	bl	8005f48 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200001d4 	.word	0x200001d4

080018bc <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <SUBGHZ_Radio_IRQHandler+0x10>)
 80018c2:	f004 fff9 	bl	80068b8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000020c 	.word	0x2000020c

080018d0 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80018e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <LL_AHB2_GRP1_EnableClock>:
{
 80018f6:	b480      	push	{r7}
 80018f8:	b085      	sub	sp, #20
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001904:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4313      	orrs	r3, r2
 800190c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800190e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001912:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4013      	ands	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <LL_AHB2_GRP1_DisableClock>:
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800192e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	43db      	mvns	r3, r3
 8001938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800193c:	4013      	ands	r3, r2
 800193e:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
	...

0800194c <SystemApp_Init>:
  * @brief initialises the system (dbg pins, trace, mbmux, systiemr, LPM, ...)
  * @param none
  * @retval  none
  */
void SystemApp_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff ffbd 	bl	80018d0 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001956:	f00b f857 	bl	800ca08 <UTIL_TIMER_Init>

  Gpio_PreInit();
 800195a:	f000 f88b 	bl	8001a74 <Gpio_PreInit>
#if defined (DEBUGGER_ENABLED) && (DEBUGGER_ENABLED == 1)
  /* Configure the debug mode*/
  DBG_Init();
#else
  /* Debug config : disable serial wires and DbgMcu pins settings */
  DBG_Disable();
 800195e:	f000 f930 	bl	8001bc2 <DBG_Disable>
#endif /* DEBUGGER_ENABLED */

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 8001962:	f000 f96c 	bl	8001c3e <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001966:	f00b fadf 	bl	800cf28 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800196a:	4808      	ldr	r0, [pc, #32]	; (800198c <SystemApp_Init+0x40>)
 800196c:	f00b fb78 	bl	800d060 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001970:	2002      	movs	r0, #2
 8001972:	f00b fb83 	bl	800d07c <UTIL_ADV_TRACE_SetVerboseLevel>
  
  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001976:	f7ff fa1b 	bl	8000db0 <SYS_InitMeasurement>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800197a:	f00a fb33 	bl	800bfe4 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800197e:	2101      	movs	r1, #1
 8001980:	2001      	movs	r0, #1
 8001982:	f00a fb6f 	bl	800c064 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	08001a35 	.word	0x08001a35

08001990 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001994:	f00a fb96 	bl	800c0c4 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80019a6:	f7ff fa8b 	bl	8000ec0 <SYS_GetBatteryLevel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	80bb      	strh	r3, [r7, #4]

  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80019ae:	88bb      	ldrh	r3, [r7, #4]
 80019b0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d902      	bls.n	80019be <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80019b8:	23fe      	movs	r3, #254	; 0xfe
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	e014      	b.n	80019e8 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80019be:	88bb      	ldrh	r3, [r7, #4]
 80019c0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80019c4:	d202      	bcs.n	80019cc <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	71fb      	strb	r3, [r7, #7]
 80019ca:	e00d      	b.n	80019e8 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80019cc:	88bb      	ldrh	r3, [r7, #4]
 80019ce:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80019d2:	461a      	mov	r2, r3
 80019d4:	4613      	mov	r3, r2
 80019d6:	01db      	lsls	r3, r3, #7
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	461a      	mov	r2, r3
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <GetBatteryLevel+0x68>)
 80019e0:	fba3 2302 	umull	r2, r3, r3, r2
 80019e4:	09db      	lsrs	r3, r3, #7
 80019e6:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <GetBatteryLevel+0x6c>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	2100      	movs	r1, #0
 80019f2:	2002      	movs	r0, #2
 80019f4:	f00b fab4 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80019f8:	79fb      	ldrb	r3, [r7, #7]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	1b4e81b5 	.word	0x1b4e81b5
 8001a08:	0800e6f0 	.word	0x0800e6f0

08001a0c <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001a16:	f7ff f9d9 	bl	8000dcc <SYS_GetTemperatureLevel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da00      	bge.n	8001a22 <GetTemperatureLevel+0x16>
 8001a20:	33ff      	adds	r3, #255	; 0xff
 8001a22:	121b      	asrs	r3, r3, #8
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001a28:	88fb      	ldrh	r3, [r7, #6]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af02      	add	r7, sp, #8
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	4618      	mov	r0, r3
 8001a44:	f00a fbc8 	bl	800c1d8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001a4e:	9200      	str	r2, [sp, #0]
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <TimestampNow+0x3c>)
 8001a52:	2110      	movs	r1, #16
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f869 	bl	8001b2c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7fe fb90 	bl	8000180 <strlen>
 8001a60:	4603      	mov	r3, r0
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	0800e6fc 	.word	0x0800e6fc

08001a74 <Gpio_PreInit>:

static void Gpio_PreInit(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Gpio_PreInit_1 */

  /* USER CODE END Gpio_PreInit_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f7ff ff34 	bl	80018f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	2002      	movs	r0, #2
 8001a90:	f7ff ff31 	bl	80018f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a94:	2004      	movs	r0, #4
 8001a96:	f7ff ff2e 	bl	80018f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a9a:	2080      	movs	r0, #128	; 0x80
 8001a9c:	f7ff ff2b 	bl	80018f6 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8001aa8:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8001aac:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab6:	f002 fa35 	bl	8003f24 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8001aba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001abe:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480e      	ldr	r0, [pc, #56]	; (8001b00 <Gpio_PreInit+0x8c>)
 8001ac6:	f002 fa2d 	bl	8003f24 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	480d      	ldr	r0, [pc, #52]	; (8001b04 <Gpio_PreInit+0x90>)
 8001ad0:	f002 fa28 	bl	8003f24 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480b      	ldr	r0, [pc, #44]	; (8001b08 <Gpio_PreInit+0x94>)
 8001ada:	f002 fa23 	bl	8003f24 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f7ff ff21 	bl	8001926 <LL_AHB2_GRP1_DisableClock>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	f7ff ff1e 	bl	8001926 <LL_AHB2_GRP1_DisableClock>
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8001aea:	2004      	movs	r0, #4
 8001aec:	f7ff ff1b 	bl	8001926 <LL_AHB2_GRP1_DisableClock>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8001af0:	2080      	movs	r0, #128	; 0x80
 8001af2:	f7ff ff18 	bl	8001926 <LL_AHB2_GRP1_DisableClock>
  /* USER CODE BEGIN Gpio_PreInit_2 */

  /* USER CODE END Gpio_PreInit_2 */
}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	48000400 	.word	0x48000400
 8001b04:	48000800 	.word	0x48000800
 8001b08:	48001c00 	.word	0x48001c00

08001b0c <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001b10:	2101      	movs	r1, #1
 8001b12:	2002      	movs	r0, #2
 8001b14:	f00a fa76 	bl	800c004 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001b20:	2100      	movs	r1, #0
 8001b22:	2002      	movs	r0, #2
 8001b24:	f00a fa6e 	bl	800c004 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001b2c:	b40c      	push	{r2, r3}
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001b3e:	6839      	ldr	r1, [r7, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f00a fc93 	bl	800c470 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b54:	b002      	add	sp, #8
 8001b56:	4770      	bx	lr

08001b58 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_GetTick>:
  * @brief Provide a tick value in millisecond
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter than SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001b70:	f000 f9ee 	bl	8001f50 <TIMER_IF_GetTimerValue>
 8001b74:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_Delay>:
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter than SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 fa6a 	bl	800205e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <LL_AHB2_GRP1_EnableClock>:
{
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ba0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <DBG_Disable>:

/**
  * @brief Disable debugger (serial wires pins)
  */
void DBG_Disable(void)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 ) /* DEBUGGER_DISABLED */
  /* Put the debugger pin PA13 and P14 in analog for LowPower*/
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8001bde:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001be2:	607b      	str	r3, [r7, #4]
  /* make sure clock is enabled before setting the pins with HAL_GPIO_Init() */
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7ff ffd4 	bl	8001b92 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	4619      	mov	r1, r3
 8001bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf2:	f002 f997 	bl	8003f24 <HAL_GPIO_Init>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_DISABLED */

  /* Disabled HAL_DBGMCU_  */
  DBG_ConfigForLpm(0);
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f000 f804 	bl	8001c04 <DBG_ConfigForLpm>

  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t enable_dbg = enableDbg;
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN DBG_ConfigForLpm_1 */

  /* USER CODE END DBG_ConfigForLpm_1 */

#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 ) /* DEBUGGER_DISABLED */
  enable_dbg = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_DISABLED */

  if (enable_dbg == 1)
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d106      	bne.n	8001c2a <DBG_ConfigForLpm+0x26>
  {
    HAL_DBGMCU_EnableDBGSleepMode();
 8001c1c:	f000 fc6c 	bl	80024f8 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8001c20:	f000 fc76 	bl	8002510 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8001c24:	f000 fc80 	bl	8002528 <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8001c28:	e005      	b.n	8001c36 <DBG_ConfigForLpm+0x32>
    HAL_DBGMCU_DisableDBGSleepMode();
 8001c2a:	f000 fc6b 	bl	8002504 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8001c2e:	f000 fc75 	bl	800251c <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8001c32:	f000 fc7f 	bl	8002534 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
	return 1;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <_kill>:

int _kill(int pid, int sig)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c62:	f00b fbf5 	bl	800d450 <__errno>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2216      	movs	r2, #22
 8001c6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_exit>:

void _exit (int status)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ffe7 	bl	8001c58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c8a:	e7fe      	b.n	8001c8a <_exit+0x12>

08001c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	e00a      	b.n	8001cb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c9e:	f3af 8000 	nop.w
 8001ca2:	4601      	mov	r1, r0
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	60ba      	str	r2, [r7, #8]
 8001caa:	b2ca      	uxtb	r2, r1
 8001cac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	dbf0      	blt.n	8001c9e <_read+0x12>
	}

return len;
 8001cbc:	687b      	ldr	r3, [r7, #4]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e009      	b.n	8001cec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	60ba      	str	r2, [r7, #8]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbf1      	blt.n	8001cd8 <_write+0x12>
	}
	return len;
 8001cf4:	687b      	ldr	r3, [r7, #4]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_close>:

int _close(int file)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
	return -1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d24:	605a      	str	r2, [r3, #4]
	return 0;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <_isatty>:

int _isatty(int file)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
	return 1;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b085      	sub	sp, #20
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
	return 0;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
	...

08001d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <_sbrk+0x5c>)
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <_sbrk+0x60>)
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <_sbrk+0x64>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <_sbrk+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d207      	bcs.n	8001da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d90:	f00b fb5e 	bl	800d450 <__errno>
 8001d94:	4603      	mov	r3, r0
 8001d96:	220c      	movs	r2, #12
 8001d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e009      	b.n	8001db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <_sbrk+0x64>)
 8001db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20008000 	.word	0x20008000
 8001dc0:	00000800 	.word	0x00000800
 8001dc4:	20000314 	.word	0x20000314
 8001dc8:	20000898 	.word	0x20000898

08001dcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
	...

08001df0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <TIMER_IF_Init+0x5c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	f083 0301 	eor.w	r3, r3, #1
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01b      	beq.n	8001e40 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <TIMER_IF_Init+0x60>)
 8001e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001e10:	f7ff f922 	bl	8001058 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001e14:	f000 f856 	bl	8001ec4 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <TIMER_IF_Init+0x60>)
 8001e1e:	f004 f837 	bl	8005e90 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <TIMER_IF_Init+0x60>)
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001e2a:	4809      	ldr	r0, [pc, #36]	; (8001e50 <TIMER_IF_Init+0x60>)
 8001e2c:	f004 f96e 	bl	800610c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001e30:	2000      	movs	r0, #0
 8001e32:	f000 f9d3 	bl	80021dc <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001e36:	f000 f85f 	bl	8001ef8 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <TIMER_IF_Init+0x5c>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001e40:	79fb      	ldrb	r3, [r7, #7]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000318 	.word	0x20000318
 8001e50:	200001d4 	.word	0x200001d4

08001e54 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08e      	sub	sp, #56	; 0x38
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	222c      	movs	r2, #44	; 0x2c
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f00b fb28 	bl	800d4c0 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001e70:	f000 f828 	bl	8001ec4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <TIMER_IF_StartTimer+0x68>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001e8c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e90:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001e98:	f107 0308 	add.w	r3, r7, #8
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <TIMER_IF_StartTimer+0x6c>)
 8001ea2:	f003 fee9 	bl	8005c78 <HAL_RTC_SetAlarm_IT>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001eac:	f7ff fc70 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001eb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3738      	adds	r7, #56	; 0x38
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	2000031c 	.word	0x2000031c
 8001ec0:	200001d4 	.word	0x200001d4

08001ec4 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <TIMER_IF_StopTimer+0x2c>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ed8:	4806      	ldr	r0, [pc, #24]	; (8001ef4 <TIMER_IF_StopTimer+0x30>)
 8001eda:	f003 ffd9 	bl	8005e90 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <TIMER_IF_StopTimer+0x30>)
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40002800 	.word	0x40002800
 8001ef4:	200001d4 	.word	0x200001d4

08001ef8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001efc:	f000 f98e 	bl	800221c <GetTimerTicks>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <TIMER_IF_SetTimerContext+0x18>)
 8001f04:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001f06:	4b02      	ldr	r3, [pc, #8]	; (8001f10 <TIMER_IF_SetTimerContext+0x18>)
 8001f08:	681b      	ldr	r3, [r3, #0]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000031c 	.word	0x2000031c

08001f14 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001f18:	4b02      	ldr	r3, [pc, #8]	; (8001f24 <TIMER_IF_GetTimerContext+0x10>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	2000031c 	.word	0x2000031c

08001f28 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001f32:	f000 f973 	bl	800221c <GetTimerTicks>
 8001f36:	4602      	mov	r2, r0
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001f40:	687b      	ldr	r3, [r7, #4]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000031c 	.word	0x2000031c

08001f50 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <TIMER_IF_GetTimerValue+0x24>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001f62:	f000 f95b 	bl	800221c <GetTimerTicks>
 8001f66:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001f68:	687b      	ldr	r3, [r7, #4]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000318 	.word	0x20000318

08001f78 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001f82:	2303      	movs	r3, #3
 8001f84:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001f86:	687b      	ldr	r3, [r7, #4]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001f92:	b5b0      	push	{r4, r5, r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	460a      	mov	r2, r1
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	0d95      	lsrs	r5, r2, #22
 8001fa8:	0294      	lsls	r4, r2, #10
 8001faa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	f7fe f93b 	bl	8000230 <__aeabi_uldivmod>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bdb0      	pop	{r4, r5, r7, pc}

08001fcc <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001fcc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	2000      	movs	r0, #0
 8001fde:	460c      	mov	r4, r1
 8001fe0:	4605      	mov	r5, r0
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	f04f 0a00 	mov.w	sl, #0
 8001fea:	f04f 0b00 	mov.w	fp, #0
 8001fee:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001ff2:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001ff6:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001ffa:	4650      	mov	r0, sl
 8001ffc:	4659      	mov	r1, fp
 8001ffe:	1b02      	subs	r2, r0, r4
 8002000:	eb61 0305 	sbc.w	r3, r1, r5
 8002004:	f04f 0000 	mov.w	r0, #0
 8002008:	f04f 0100 	mov.w	r1, #0
 800200c:	0099      	lsls	r1, r3, #2
 800200e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002012:	0090      	lsls	r0, r2, #2
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	eb12 0804 	adds.w	r8, r2, r4
 800201c:	eb43 0905 	adc.w	r9, r3, r5
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800202c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002030:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002034:	4690      	mov	r8, r2
 8002036:	4699      	mov	r9, r3
 8002038:	4640      	mov	r0, r8
 800203a:	4649      	mov	r1, r9
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	0a82      	lsrs	r2, r0, #10
 8002046:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800204a:	0a8b      	lsrs	r3, r1, #10
 800204c:	4613      	mov	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002050:	68fb      	ldr	r3, [r7, #12]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800205c:	4770      	bx	lr

0800205e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ff93 	bl	8001f92 <TIMER_IF_Convert_ms2Tick>
 800206c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800206e:	f000 f8d5 	bl	800221c <GetTimerTicks>
 8002072:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002074:	e000      	b.n	8002078 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002076:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002078:	f000 f8d0 	bl	800221c <GetTimerTicks>
 800207c:	4602      	mov	r2, r0
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	429a      	cmp	r2, r3
 8002086:	d8f6      	bhi.n	8002076 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800209a:	f00a fe03 	bl	800cca4 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80020ae:	f000 f8a5 	bl	80021fc <TIMER_IF_BkUp_Read_MSBticks>
 80020b2:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3301      	adds	r3, #1
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 f88f 	bl	80021dc <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80020c6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ca:	b08c      	sub	sp, #48	; 0x30
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80020d4:	f000 f8a2 	bl	800221c <GetTimerTicks>
 80020d8:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80020da:	f000 f88f 	bl	80021fc <TIMER_IF_BkUp_Read_MSBticks>
 80020de:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	2200      	movs	r2, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	60fa      	str	r2, [r7, #12]
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	000b      	movs	r3, r1
 80020f4:	2200      	movs	r2, #0
 80020f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020f8:	2000      	movs	r0, #0
 80020fa:	460c      	mov	r4, r1
 80020fc:	4605      	mov	r5, r0
 80020fe:	eb12 0804 	adds.w	r8, r2, r4
 8002102:	eb43 0905 	adc.w	r9, r3, r5
 8002106:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800210a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	0a82      	lsrs	r2, r0, #10
 8002118:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800211c:	0a8b      	lsrs	r3, r1, #10
 800211e:	4613      	mov	r3, r2
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2200      	movs	r2, #0
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002130:	f04f 0b00 	mov.w	fp, #0
 8002134:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff46 	bl	8001fcc <TIMER_IF_Convert_Tick2ms>
 8002140:	4603      	mov	r3, r0
 8002142:	b29a      	uxth	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800214a:	4618      	mov	r0, r3
 800214c:	3730      	adds	r7, #48	; 0x30
 800214e:	46bd      	mov	sp, r7
 8002150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002154 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	2100      	movs	r1, #0
 8002160:	4803      	ldr	r0, [pc, #12]	; (8002170 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002162:	f004 f865 	bl	8006230 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200001d4 	.word	0x200001d4

08002174 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	2101      	movs	r1, #1
 8002180:	4803      	ldr	r0, [pc, #12]	; (8002190 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002182:	f004 f855 	bl	8006230 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200001d4 	.word	0x200001d4

08002194 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800219e:	2100      	movs	r1, #0
 80021a0:	4804      	ldr	r0, [pc, #16]	; (80021b4 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80021a2:	f004 f85d 	bl	8006260 <HAL_RTCEx_BKUPRead>
 80021a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80021a8:	687b      	ldr	r3, [r7, #4]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200001d4 	.word	0x200001d4

080021b8 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80021c2:	2101      	movs	r1, #1
 80021c4:	4804      	ldr	r0, [pc, #16]	; (80021d8 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80021c6:	f004 f84b 	bl	8006260 <HAL_RTCEx_BKUPRead>
 80021ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80021cc:	687b      	ldr	r3, [r7, #4]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200001d4 	.word	0x200001d4

080021dc <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	2102      	movs	r1, #2
 80021e8:	4803      	ldr	r0, [pc, #12]	; (80021f8 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80021ea:	f004 f821 	bl	8006230 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200001d4 	.word	0x200001d4

080021fc <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002202:	2102      	movs	r1, #2
 8002204:	4804      	ldr	r0, [pc, #16]	; (8002218 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002206:	f004 f82b 	bl	8006260 <HAL_RTCEx_BKUPRead>
 800220a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 800220c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200001d4 	.word	0x200001d4

0800221c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8002220:	4803      	ldr	r0, [pc, #12]	; (8002230 <GetTimerTicks+0x14>)
 8002222:	f7ff fdd9 	bl	8001dd8 <LL_RTC_TIME_GetSubSecond>
 8002226:	4603      	mov	r3, r0
 8002228:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800222a:	4618      	mov	r0, r3
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40002800 	.word	0x40002800

08002234 <LL_AHB2_GRP1_EnableClock>:
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800223c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4313      	orrs	r3, r2
 800224a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800224c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002250:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4013      	ands	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002258:	68fb      	ldr	r3, [r7, #12]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <SYS_LED_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t SYS_LED_Init(Sys_Led_TypeDef Led)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]
  /* Enable the GPIO_SYS_LED Clock */
  SYS_LEDx_GPIO_CLK_ENABLE(Led);
 800227e:	2002      	movs	r0, #2
 8002280:	f7ff ffd8 	bl	8002234 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_SYS_LED pin */
  gpio_init_structure.Pin = SYS_LED_PIN[Led];
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <SYS_LED_Init+0x6c>)
 8002288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800228c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800228e:	2301      	movs	r3, #1
 8002290:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002296:	2302      	movs	r3, #2
 8002298:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(SYS_LED_PORT[Led], &gpio_init_structure);
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <SYS_LED_Init+0x70>)
 800229e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a2:	f107 020c 	add.w	r2, r7, #12
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f001 fe3b 	bl	8003f24 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(SYS_LED_PORT[Led], SYS_LED_PIN[Led], GPIO_PIN_RESET);
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <SYS_LED_Init+0x70>)
 80022b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <SYS_LED_Init+0x6c>)
 80022ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022be:	2200      	movs	r2, #0
 80022c0:	4619      	mov	r1, r3
 80022c2:	f002 f85d 	bl	8004380 <HAL_GPIO_WritePin>

  return 0;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	0800e914 	.word	0x0800e914
 80022d4:	20000008 	.word	0x20000008

080022d8 <SYS_LED_On>:

  return 0;
}

int32_t SYS_LED_On(Sys_Led_TypeDef Led)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(SYS_LED_PORT[Led], SYS_LED_PIN[Led], GPIO_PIN_SET);
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	4a07      	ldr	r2, [pc, #28]	; (8002304 <SYS_LED_On+0x2c>)
 80022e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4a06      	ldr	r2, [pc, #24]	; (8002308 <SYS_LED_On+0x30>)
 80022ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022f2:	2201      	movs	r2, #1
 80022f4:	4619      	mov	r1, r3
 80022f6:	f002 f843 	bl	8004380 <HAL_GPIO_WritePin>

  return 0;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000008 	.word	0x20000008
 8002308:	0800e914 	.word	0x0800e914

0800230c <SYS_LED_Off>:

int32_t SYS_LED_Off(Sys_Led_TypeDef Led)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(SYS_LED_PORT[Led], SYS_LED_PIN[Led], GPIO_PIN_RESET);
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	4a07      	ldr	r2, [pc, #28]	; (8002338 <SYS_LED_Off+0x2c>)
 800231a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	4a06      	ldr	r2, [pc, #24]	; (800233c <SYS_LED_Off+0x30>)
 8002322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002326:	2200      	movs	r2, #0
 8002328:	4619      	mov	r1, r3
 800232a:	f002 f829 	bl	8004380 <HAL_GPIO_WritePin>

  return 0;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000008 	.word	0x20000008
 800233c:	0800e914 	.word	0x0800e914

08002340 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800234a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	71fb      	strb	r3, [r7, #7]
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8002364:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800237a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800238c:	2301      	movs	r3, #1
 800238e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 8002390:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 80023a2:	2301      	movs	r3, #1
 80023a4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 80023a6:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
	...

080023b4 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a03      	ldr	r2, [pc, #12]	; (80023cc <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6053      	str	r3, [r2, #4]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	e0042000 	.word	0xe0042000

080023d0 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a03      	ldr	r2, [pc, #12]	; (80023e8 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	6053      	str	r3, [r2, #4]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	e0042000 	.word	0xe0042000

080023ec <LL_DBGMCU_EnableDBGStopMode>:
  *        in Stop mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a03      	ldr	r2, [pc, #12]	; (8002404 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	6053      	str	r3, [r2, #4]
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	e0042000 	.word	0xe0042000

08002408 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a03      	ldr	r2, [pc, #12]	; (8002420 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002412:	f023 0302 	bic.w	r3, r3, #2
 8002416:	6053      	str	r3, [r2, #4]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	e0042000 	.word	0xe0042000

08002424 <LL_DBGMCU_EnableDBGStandbyMode>:
  *        in Standby mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a03      	ldr	r2, [pc, #12]	; (800243c <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800242e:	f043 0304 	orr.w	r3, r3, #4
 8002432:	6053      	str	r3, [r2, #4]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	e0042000 	.word	0xe0042000

08002440 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4a03      	ldr	r2, [pc, #12]	; (8002458 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800244a:	f023 0304 	bic.w	r3, r3, #4
 800244e:	6053      	str	r3, [r2, #4]
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	e0042000 	.word	0xe0042000

0800245c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002466:	2003      	movs	r0, #3
 8002468:	f001 f902 	bl	8003670 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800246c:	f003 f892 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 8002470:	4603      	mov	r3, r0
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_Init+0x3c>)
 8002474:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002476:	200f      	movs	r0, #15
 8002478:	f7ff fb6e 	bl	8001b58 <HAL_InitTick>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	71fb      	strb	r3, [r7, #7]
 8002486:	e001      	b.n	800248c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002488:	f7ff f9c3 	bl	8001812 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800248c:	79fb      	ldrb	r3, [r7, #7]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000004 	.word	0x20000004

0800249c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_IncTick+0x1c>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_IncTick+0x20>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	4a03      	ldr	r2, [pc, #12]	; (80024bc <HAL_IncTick+0x20>)
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	20000018 	.word	0x20000018
 80024bc:	20000320 	.word	0x20000320

080024c0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <HAL_SuspendTick+0x18>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a03      	ldr	r2, [pc, #12]	; (80024d8 <HAL_SuspendTick+0x18>)
 80024ca:	f023 0302 	bic.w	r3, r3, #2
 80024ce:	6013      	str	r3, [r2, #0]
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	e000e010 	.word	0xe000e010

080024dc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <HAL_ResumeTick+0x18>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a03      	ldr	r2, [pc, #12]	; (80024f4 <HAL_ResumeTick+0x18>)
 80024e6:	f043 0302 	orr.w	r3, r3, #2
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	e000e010 	.word	0xe000e010

080024f8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80024fc:	f7ff ff5a 	bl	80023b4 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002508:	f7ff ff62 	bl	80023d0 <LL_DBGMCU_DisableDBGSleepMode>
}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002514:	f7ff ff6a 	bl	80023ec <LL_DBGMCU_EnableDBGStopMode>
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002520:	f7ff ff72 	bl	8002408 <LL_DBGMCU_DisableDBGStopMode>
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 800252c:	f7ff ff7a 	bl	8002424 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002538:	f7ff ff82 	bl	8002440 <LL_DBGMCU_DisableDBGStandbyMode>
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}

08002540 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	601a      	str	r2, [r3, #0]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800257e:	b480      	push	{r7}
 8002580:	b085      	sub	sp, #20
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2107      	movs	r1, #7
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	401a      	ands	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	431a      	orrs	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr

080025de <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025de:	b480      	push	{r7}
 80025e0:	b085      	sub	sp, #20
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	210f      	movs	r1, #15
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	401a      	ands	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	f003 010f 	and.w	r1, r3, #15
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	431a      	orrs	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	629a      	str	r2, [r3, #40]	; 0x28
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002658:	43db      	mvns	r3, r3
 800265a:	401a      	ands	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800266a:	b480      	push	{r7}
 800266c:	b085      	sub	sp, #20
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	43db      	mvns	r3, r3
 8002680:	401a      	ands	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	0219      	lsls	r1, r3, #8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	400b      	ands	r3, r1
 800268a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800268e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002692:	431a      	orrs	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026b2:	f023 0317 	bic.w	r3, r3, #23
 80026b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026d8:	f023 0317 	bic.w	r3, r3, #23
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6093      	str	r3, [r2, #8]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026fe:	d101      	bne.n	8002704 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002720:	f023 0317 	bic.w	r3, r3, #23
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002746:	f023 0317 	bic.w	r3, r3, #23
 800274a:	f043 0202 	orr.w	r2, r3, #2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <LL_ADC_IsEnabled+0x18>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <LL_ADC_IsEnabled+0x1a>
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b02      	cmp	r3, #2
 8002792:	d101      	bne.n	8002798 <LL_ADC_IsDisableOngoing+0x18>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <LL_ADC_IsDisableOngoing+0x1a>
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027b4:	f023 0317 	bic.w	r3, r3, #23
 80027b8:	f043 0204 	orr.w	r2, r3, #4
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027da:	f023 0317 	bic.w	r3, r3, #23
 80027de:	f043 0210 	orr.w	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b04      	cmp	r3, #4
 8002802:	d101      	bne.n	8002808 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002820:	2300      	movs	r3, #0
 8002822:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002828:	2300      	movs	r3, #0
 800282a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e1ae      	b.n	8002b94 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002840:	2b00      	cmp	r3, #0
 8002842:	d109      	bne.n	8002858 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7fe fa8b 	bl	8000d60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff44 	bl	80026ea <LL_ADC_IsInternalRegulatorEnabled>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d115      	bne.n	8002894 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff18 	bl	80026a2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002872:	4b9b      	ldr	r3, [pc, #620]	; (8002ae0 <HAL_ADC_Init+0x2cc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	4a9a      	ldr	r2, [pc, #616]	; (8002ae4 <HAL_ADC_Init+0x2d0>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	099b      	lsrs	r3, r3, #6
 8002880:	3301      	adds	r3, #1
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002886:	e002      	b.n	800288e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	3b01      	subs	r3, #1
 800288c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f9      	bne.n	8002888 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff26 	bl	80026ea <LL_ADC_IsInternalRegulatorEnabled>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10d      	bne.n	80028c0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	f043 0210 	orr.w	r2, r3, #16
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	f043 0201 	orr.w	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff93 	bl	80027f0 <LL_ADC_REG_IsConversionOngoing>
 80028ca:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f040 8154 	bne.w	8002b82 <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f040 8150 	bne.w	8002b82 <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028ea:	f043 0202 	orr.w	r2, r3, #2
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ff30 	bl	800275c <LL_ADC_IsEnabled>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d14f      	bne.n	80029a2 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f023 0118 	bic.w	r1, r3, #24
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002924:	4313      	orrs	r3, r2
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002932:	2b01      	cmp	r3, #1
 8002934:	d111      	bne.n	800295a <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002942:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002948:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800294e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	4b61      	ldr	r3, [pc, #388]	; (8002ae8 <HAL_ADC_Init+0x2d4>)
 8002962:	4013      	ands	r3, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	6979      	ldr	r1, [r7, #20]
 800296a:	430b      	orrs	r3, r1
 800296c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002976:	d014      	beq.n	80029a2 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800297c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002980:	d00f      	beq.n	80029a2 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800298a:	d00a      	beq.n	80029a2 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800298c:	4b57      	ldr	r3, [pc, #348]	; (8002aec <HAL_ADC_Init+0x2d8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800299c:	4953      	ldr	r1, [pc, #332]	; (8002aec <HAL_ADC_Init+0x2d8>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7e1b      	ldrb	r3, [r3, #24]
 80029a6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7e5b      	ldrb	r3, [r3, #25]
 80029ac:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80029ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7e9b      	ldrb	r3, [r3, #26]
 80029b4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80029b6:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029bc:	2a00      	cmp	r2, #0
 80029be:	d002      	beq.n	80029c6 <HAL_ADC_Init+0x1b2>
 80029c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029c4:	e000      	b.n	80029c8 <HAL_ADC_Init+0x1b4>
 80029c6:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80029c8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80029ce:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	da04      	bge.n	80029e2 <HAL_ADC_Init+0x1ce>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029e0:	e001      	b.n	80029e6 <HAL_ADC_Init+0x1d2>
 80029e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 80029e6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80029ee:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80029f0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d114      	bne.n	8002a2c <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7e9b      	ldrb	r3, [r3, #26]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d104      	bne.n	8002a14 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	e00b      	b.n	8002a2c <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a24:	f043 0201 	orr.w	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d009      	beq.n	8002a48 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002a40:	4313      	orrs	r3, r2
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002a52:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	69b9      	ldr	r1, [r7, #24]
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <HAL_ADC_Init+0x2dc>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	6979      	ldr	r1, [r7, #20]
 8002a70:	430b      	orrs	r3, r1
 8002a72:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2100      	movs	r1, #0
 8002a80:	f7ff fd7d 	bl	800257e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4919      	ldr	r1, [pc, #100]	; (8002af4 <HAL_ADC_Init+0x2e0>)
 8002a90:	f7ff fd75 	bl	800257e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d108      	bne.n	8002aae <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f062 020f 	orn	r2, r2, #15
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8002aac:	e044      	b.n	8002b38 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ab6:	d13f      	bne.n	8002b38 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	e00c      	b.n	8002ad8 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	2b0f      	cmp	r3, #15
 8002ad0:	d012      	beq.n	8002af8 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	2b07      	cmp	r3, #7
 8002adc:	d9ef      	bls.n	8002abe <HAL_ADC_Init+0x2aa>
 8002ade:	e00c      	b.n	8002afa <HAL_ADC_Init+0x2e6>
 8002ae0:	20000004 	.word	0x20000004
 8002ae4:	053e2d63 	.word	0x053e2d63
 8002ae8:	1ffffc02 	.word	0x1ffffc02
 8002aec:	40012708 	.word	0x40012708
 8002af0:	dffffc02 	.word	0xdffffc02
 8002af4:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8002af8:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d108      	bne.n	8002b12 <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f062 020f 	orn	r2, r2, #15
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b10:	e012      	b.n	8002b38 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	f003 031c 	and.w	r3, r3, #28
 8002b24:	f06f 020f 	mvn.w	r2, #15
 8002b28:	fa02 f103 	lsl.w	r1, r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <HAL_ADC_Init+0x388>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d10b      	bne.n	8002b60 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	f043 0201 	orr.w	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b5e:	e018      	b.n	8002b92 <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	f023 0312 	bic.w	r3, r3, #18
 8002b68:	f043 0210 	orr.w	r2, r3, #16
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b80:	e007      	b.n	8002b92 <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	f043 0210 	orr.w	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	833fffe7 	.word	0x833fffe7

08002ba0 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e06a      	b.n	8002c88 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	f043 0202 	orr.w	r2, r3, #2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fabe 	bl	8003140 <ADC_ConversionStop>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10f      	bne.n	8002bee <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fb82 	bl	80032d8 <ADC_Disable>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fd6d 	bl	80026c8 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8002bfc:	f023 0303 	bic.w	r3, r3, #3
 8002c00:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f240 329f 	movw	r2, #927	; 0x39f
 8002c0a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68d9      	ldr	r1, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <HAL_ADC_DeInit+0xf0>)
 8002c18:	400b      	ands	r3, r1
 8002c1a:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002c2a:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0207 	bic.w	r2, r2, #7
 8002c3a:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6a1a      	ldr	r2, [r3, #32]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8002c4a:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2200      	movs	r2, #0
 8002c58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <HAL_ADC_DeInit+0xf4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <HAL_ADC_DeInit+0xf4>)
 8002c60:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8002c64:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe f88e 	bl	8000d88 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	833e0200 	.word	0x833e0200
 8002c94:	40012708 	.word	0x40012708

08002c98 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fda3 	bl	80027f0 <LL_ADC_REG_IsConversionOngoing>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d132      	bne.n	8002d16 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADC_Start+0x26>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e02e      	b.n	8002d1c <HAL_ADC_Start+0x84>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fa80 	bl	80031cc <ADC_Enable>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d11a      	bne.n	8002d0c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	221c      	movs	r2, #28
 8002cf6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fd4d 	bl	80027a4 <LL_ADC_REG_StartConversion>
 8002d0a:	e006      	b.n	8002d1a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002d14:	e001      	b.n	8002d1a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
 8002d18:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_Stop+0x16>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e022      	b.n	8002d80 <HAL_ADC_Stop+0x5c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f9fc 	bl	8003140 <ADC_ConversionStop>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d111      	bne.n	8002d76 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fac0 	bl	80032d8 <ADC_Disable>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	f043 0201 	orr.w	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d102      	bne.n	8002da0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	e010      	b.n	8002dc2 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db2:	f043 0220 	orr.w	r2, r3, #32
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e077      	b.n	8002eae <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dc2:	f7fe fed3 	bl	8001b6c <HAL_GetTick>
 8002dc6:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002dc8:	e021      	b.n	8002e0e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d01d      	beq.n	8002e0e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002dd2:	f7fe fecb 	bl	8001b6c <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d302      	bcc.n	8002de8 <HAL_ADC_PollForConversion+0x60>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d112      	bne.n	8002e0e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10b      	bne.n	8002e0e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	f043 0204 	orr.w	r2, r3, #4
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e04f      	b.n	8002eae <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0d6      	beq.n	8002dca <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fbc4 	bl	80025ba <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d031      	beq.n	8002e9c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7e9b      	ldrb	r3, [r3, #26]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d12d      	bne.n	8002e9c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d126      	bne.n	8002e9c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fccc 	bl	80027f0 <LL_ADC_REG_IsConversionOngoing>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d112      	bne.n	8002e84 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 020c 	bic.w	r2, r2, #12
 8002e6c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	f043 0201 	orr.w	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	659a      	str	r2, [r3, #88]	; 0x58
 8002e82:	e00b      	b.n	8002e9c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e94:	f043 0201 	orr.w	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d103      	bne.n	8002eac <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	220c      	movs	r2, #12
 8002eaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x28>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e110      	b.n	800311a <HAL_ADC_ConfigChannel+0x24a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fc73 	bl	80027f0 <LL_ADC_REG_IsConversionOngoing>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f040 80f7 	bne.w	8003100 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	f000 80b1 	beq.w	800307e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f24:	d004      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f2a:	4a7e      	ldr	r2, [pc, #504]	; (8003124 <HAL_ADC_ConfigChannel+0x254>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d108      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f7ff fb70 	bl	8002620 <LL_ADC_REG_SetSequencerChAdd>
 8002f40:	e041      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 031f 	and.w	r3, r3, #31
 8002f4e:	210f      	movs	r1, #15
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	401a      	ands	r2, r3
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0xa0>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	0e9b      	lsrs	r3, r3, #26
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	e011      	b.n	8002f94 <HAL_ADC_ConfigChannel+0xc4>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8002f88:	2320      	movs	r3, #32
 8002f8a:	e003      	b.n	8002f94 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	6839      	ldr	r1, [r7, #0]
 8002f96:	6849      	ldr	r1, [r1, #4]
 8002f98:	f001 011f 	and.w	r1, r1, #31
 8002f9c:	408b      	lsls	r3, r1
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	089b      	lsrs	r3, r3, #2
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d808      	bhi.n	8002fc6 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6859      	ldr	r1, [r3, #4]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f7ff fb0c 	bl	80025de <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6819      	ldr	r1, [r3, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f7ff fb49 	bl	800266a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f280 8097 	bge.w	8003110 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fe2:	4851      	ldr	r0, [pc, #324]	; (8003128 <HAL_ADC_ConfigChannel+0x258>)
 8002fe4:	f7ff fabe 	bl	8002564 <LL_ADC_GetCommonPathInternalCh>
 8002fe8:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a4f      	ldr	r2, [pc, #316]	; (800312c <HAL_ADC_ConfigChannel+0x25c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d120      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d11b      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003004:	4619      	mov	r1, r3
 8003006:	4848      	ldr	r0, [pc, #288]	; (8003128 <HAL_ADC_ConfigChannel+0x258>)
 8003008:	f7ff fa9a 	bl	8002540 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800300c:	4b48      	ldr	r3, [pc, #288]	; (8003130 <HAL_ADC_ConfigChannel+0x260>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	4a48      	ldr	r2, [pc, #288]	; (8003134 <HAL_ADC_ConfigChannel+0x264>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	099b      	lsrs	r3, r3, #6
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003026:	e002      	b.n	800302e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	3b01      	subs	r3, #1
 800302c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f9      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003034:	e06c      	b.n	8003110 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a3f      	ldr	r2, [pc, #252]	; (8003138 <HAL_ADC_ConfigChannel+0x268>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10c      	bne.n	800305a <HAL_ADC_ConfigChannel+0x18a>
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d107      	bne.n	800305a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003050:	4619      	mov	r1, r3
 8003052:	4835      	ldr	r0, [pc, #212]	; (8003128 <HAL_ADC_ConfigChannel+0x258>)
 8003054:	f7ff fa74 	bl	8002540 <LL_ADC_SetCommonPathInternalCh>
 8003058:	e05a      	b.n	8003110 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a37      	ldr	r2, [pc, #220]	; (800313c <HAL_ADC_ConfigChannel+0x26c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d155      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800306a:	2b00      	cmp	r3, #0
 800306c:	d150      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003074:	4619      	mov	r1, r3
 8003076:	482c      	ldr	r0, [pc, #176]	; (8003128 <HAL_ADC_ConfigChannel+0x258>)
 8003078:	f7ff fa62 	bl	8002540 <LL_ADC_SetCommonPathInternalCh>
 800307c:	e048      	b.n	8003110 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003086:	d004      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800308c:	4a25      	ldr	r2, [pc, #148]	; (8003124 <HAL_ADC_ConfigChannel+0x254>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d107      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4619      	mov	r1, r3
 800309c:	4610      	mov	r0, r2
 800309e:	f7ff fad1 	bl	8002644 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	da32      	bge.n	8003110 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030aa:	481f      	ldr	r0, [pc, #124]	; (8003128 <HAL_ADC_ConfigChannel+0x258>)
 80030ac:	f7ff fa5a 	bl	8002564 <LL_ADC_GetCommonPathInternalCh>
 80030b0:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1d      	ldr	r2, [pc, #116]	; (800312c <HAL_ADC_ConfigChannel+0x25c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d107      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030c2:	4619      	mov	r1, r3
 80030c4:	4818      	ldr	r0, [pc, #96]	; (8003128 <HAL_ADC_ConfigChannel+0x258>)
 80030c6:	f7ff fa3b 	bl	8002540 <LL_ADC_SetCommonPathInternalCh>
 80030ca:	e021      	b.n	8003110 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a19      	ldr	r2, [pc, #100]	; (8003138 <HAL_ADC_ConfigChannel+0x268>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d107      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030dc:	4619      	mov	r1, r3
 80030de:	4812      	ldr	r0, [pc, #72]	; (8003128 <HAL_ADC_ConfigChannel+0x258>)
 80030e0:	f7ff fa2e 	bl	8002540 <LL_ADC_SetCommonPathInternalCh>
 80030e4:	e014      	b.n	8003110 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a14      	ldr	r2, [pc, #80]	; (800313c <HAL_ADC_ConfigChannel+0x26c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d10f      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80030f6:	4619      	mov	r1, r3
 80030f8:	480b      	ldr	r0, [pc, #44]	; (8003128 <HAL_ADC_ConfigChannel+0x258>)
 80030fa:	f7ff fa21 	bl	8002540 <LL_ADC_SetCommonPathInternalCh>
 80030fe:	e007      	b.n	8003110 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003118:	7ffb      	ldrb	r3, [r7, #31]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	80000004 	.word	0x80000004
 8003128:	40012708 	.word	0x40012708
 800312c:	b0001000 	.word	0xb0001000
 8003130:	20000004 	.word	0x20000004
 8003134:	053e2d63 	.word	0x053e2d63
 8003138:	b8004000 	.word	0xb8004000
 800313c:	b4002000 	.word	0xb4002000

08003140 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fb4f 	bl	80027f0 <LL_ADC_REG_IsConversionOngoing>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d033      	beq.n	80031c0 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fb0f 	bl	8002780 <LL_ADC_IsDisableOngoing>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d104      	bne.n	8003172 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fb2c 	bl	80027ca <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003172:	f7fe fcfb 	bl	8001b6c <HAL_GetTick>
 8003176:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003178:	e01b      	b.n	80031b2 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800317a:	f7fe fcf7 	bl	8001b6c <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d914      	bls.n	80031b2 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	f043 0210 	orr.w	r2, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	f043 0201 	orr.w	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e007      	b.n	80031c2 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1dc      	bne.n	800317a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fabd 	bl	800275c <LL_ADC_IsEnabled>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d169      	bne.n	80032bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	4b36      	ldr	r3, [pc, #216]	; (80032c8 <ADC_Enable+0xfc>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00d      	beq.n	8003212 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	f043 0210 	orr.w	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e055      	b.n	80032be <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fa7a 	bl	8002710 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800321c:	482b      	ldr	r0, [pc, #172]	; (80032cc <ADC_Enable+0x100>)
 800321e:	f7ff f9a1 	bl	8002564 <LL_ADC_GetCommonPathInternalCh>
 8003222:	4603      	mov	r3, r0
 8003224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00f      	beq.n	800324c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800322c:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <ADC_Enable+0x104>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	099b      	lsrs	r3, r3, #6
 8003232:	4a28      	ldr	r2, [pc, #160]	; (80032d4 <ADC_Enable+0x108>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	099b      	lsrs	r3, r3, #6
 800323a:	3301      	adds	r3, #1
 800323c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800323e:	e002      	b.n	8003246 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	3b01      	subs	r3, #1
 8003244:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f9      	bne.n	8003240 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7e5b      	ldrb	r3, [r3, #25]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d033      	beq.n	80032bc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003254:	f7fe fc8a 	bl	8001b6c <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800325a:	e028      	b.n	80032ae <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fa7b 	bl	800275c <LL_ADC_IsEnabled>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d104      	bne.n	8003276 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fa4d 	bl	8002710 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003276:	f7fe fc79 	bl	8001b6c <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d914      	bls.n	80032ae <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b01      	cmp	r3, #1
 8003290:	d00d      	beq.n	80032ae <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	f043 0210 	orr.w	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	f043 0201 	orr.w	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e007      	b.n	80032be <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d1cf      	bne.n	800325c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	80000017 	.word	0x80000017
 80032cc:	40012708 	.word	0x40012708
 80032d0:	20000004 	.word	0x20000004
 80032d4:	053e2d63 	.word	0x053e2d63

080032d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fa4b 	bl	8002780 <LL_ADC_IsDisableOngoing>
 80032ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fa33 	bl	800275c <LL_ADC_IsEnabled>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d047      	beq.n	800338c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d144      	bne.n	800338c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0305 	and.w	r3, r3, #5
 800330c:	2b01      	cmp	r3, #1
 800330e:	d10c      	bne.n	800332a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fa0e 	bl	8002736 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2203      	movs	r2, #3
 8003320:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003322:	f7fe fc23 	bl	8001b6c <HAL_GetTick>
 8003326:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003328:	e029      	b.n	800337e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332e:	f043 0210 	orr.w	r2, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	f043 0201 	orr.w	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e023      	b.n	800338e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003346:	f7fe fc11 	bl	8001b6c <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d914      	bls.n	800337e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00d      	beq.n	800337e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	f043 0210 	orr.w	r2, r3, #16
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e007      	b.n	800338e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1dc      	bne.n	8003346 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <LL_ADC_IsEnabled>:
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <LL_ADC_IsEnabled+0x18>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <LL_ADC_IsEnabled+0x1a>
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr

080033ba <LL_ADC_IsCalibrationOnGoing>:
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ce:	d101      	bne.n	80033d4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_ADCEx_Calibration_Start+0x1a>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e068      	b.n	80034cc <HAL_ADCEx_Calibration_Start+0xec>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff ff68 	bl	80032d8 <ADC_Disable>
 8003408:	4603      	mov	r3, r0
 800340a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ffc0 	bl	8003396 <LL_ADC_IsEnabled>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d14c      	bne.n	80034b6 <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003420:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003424:	f043 0202 	orr.w	r2, r3, #2
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0203 	bic.w	r2, r2, #3
 8003446:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003456:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003458:	e014      	b.n	8003484 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3301      	adds	r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003466:	d30d      	bcc.n	8003484 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	f023 0312 	bic.w	r3, r3, #18
 8003470:	f043 0210 	orr.w	r2, r3, #16
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e023      	b.n	80034cc <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff96 	bl	80033ba <LL_ADC_IsCalibrationOnGoing>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e2      	bne.n	800345a <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68d9      	ldr	r1, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	f023 0303 	bic.w	r3, r3, #3
 80034ac:	f043 0201 	orr.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	659a      	str	r2, [r3, #88]	; 0x58
 80034b4:	e005      	b.n	80034c2 <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ba:	f043 0210 	orr.w	r2, r3, #16
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e4:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <__NVIC_SetPriorityGrouping+0x44>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034f0:	4013      	ands	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003506:	4a04      	ldr	r2, [pc, #16]	; (8003518 <__NVIC_SetPriorityGrouping+0x44>)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	60d3      	str	r3, [r2, #12]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <__NVIC_GetPriorityGrouping+0x18>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	0a1b      	lsrs	r3, r3, #8
 8003526:	f003 0307 	and.w	r3, r3, #7
}
 800352a:	4618      	mov	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	2b00      	cmp	r3, #0
 8003548:	db0b      	blt.n	8003562 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	f003 021f 	and.w	r2, r3, #31
 8003550:	4906      	ldr	r1, [pc, #24]	; (800356c <__NVIC_EnableIRQ+0x34>)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	2001      	movs	r0, #1
 800355a:	fa00 f202 	lsl.w	r2, r0, r2
 800355e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	e000e100 	.word	0xe000e100

08003570 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	2b00      	cmp	r3, #0
 8003580:	db12      	blt.n	80035a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	f003 021f 	and.w	r2, r3, #31
 8003588:	490a      	ldr	r1, [pc, #40]	; (80035b4 <__NVIC_DisableIRQ+0x44>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2001      	movs	r0, #1
 8003592:	fa00 f202 	lsl.w	r2, r0, r2
 8003596:	3320      	adds	r3, #32
 8003598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800359c:	f3bf 8f4f 	dsb	sy
}
 80035a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80035a2:	f3bf 8f6f 	isb	sy
}
 80035a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	e000e100 	.word	0xe000e100

080035b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	6039      	str	r1, [r7, #0]
 80035c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	db0a      	blt.n	80035e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	490c      	ldr	r1, [pc, #48]	; (8003604 <__NVIC_SetPriority+0x4c>)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	0112      	lsls	r2, r2, #4
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	440b      	add	r3, r1
 80035dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035e0:	e00a      	b.n	80035f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	4908      	ldr	r1, [pc, #32]	; (8003608 <__NVIC_SetPriority+0x50>)
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	3b04      	subs	r3, #4
 80035f0:	0112      	lsls	r2, r2, #4
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	440b      	add	r3, r1
 80035f6:	761a      	strb	r2, [r3, #24]
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000e100 	.word	0xe000e100
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800360c:	b480      	push	{r7}
 800360e:	b089      	sub	sp, #36	; 0x24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f1c3 0307 	rsb	r3, r3, #7
 8003626:	2b04      	cmp	r3, #4
 8003628:	bf28      	it	cs
 800362a:	2304      	movcs	r3, #4
 800362c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	3304      	adds	r3, #4
 8003632:	2b06      	cmp	r3, #6
 8003634:	d902      	bls.n	800363c <NVIC_EncodePriority+0x30>
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3b03      	subs	r3, #3
 800363a:	e000      	b.n	800363e <NVIC_EncodePriority+0x32>
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003640:	f04f 32ff 	mov.w	r2, #4294967295
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43da      	mvns	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	401a      	ands	r2, r3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003654:	f04f 31ff 	mov.w	r1, #4294967295
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	fa01 f303 	lsl.w	r3, r1, r3
 800365e:	43d9      	mvns	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003664:	4313      	orrs	r3, r2
         );
}
 8003666:	4618      	mov	r0, r3
 8003668:	3724      	adds	r7, #36	; 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ff2b 	bl	80034d4 <__NVIC_SetPriorityGrouping>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	4603      	mov	r3, r0
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003694:	f7ff ff42 	bl	800351c <__NVIC_GetPriorityGrouping>
 8003698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	6978      	ldr	r0, [r7, #20]
 80036a0:	f7ff ffb4 	bl	800360c <NVIC_EncodePriority>
 80036a4:	4602      	mov	r2, r0
 80036a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036aa:	4611      	mov	r1, r2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ff83 	bl	80035b8 <__NVIC_SetPriority>
}
 80036b2:	bf00      	nop
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff ff35 	bl	8003538 <__NVIC_EnableIRQ>
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	4603      	mov	r3, r0
 80036de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80036e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff43 	bl	8003570 <__NVIC_DisableIRQ>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e08e      	b.n	8003824 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	4b47      	ldr	r3, [pc, #284]	; (800382c <HAL_DMA_Init+0x138>)
 800370e:	429a      	cmp	r2, r3
 8003710:	d80f      	bhi.n	8003732 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	4b45      	ldr	r3, [pc, #276]	; (8003830 <HAL_DMA_Init+0x13c>)
 800371a:	4413      	add	r3, r2
 800371c:	4a45      	ldr	r2, [pc, #276]	; (8003834 <HAL_DMA_Init+0x140>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	009a      	lsls	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a42      	ldr	r2, [pc, #264]	; (8003838 <HAL_DMA_Init+0x144>)
 800372e:	641a      	str	r2, [r3, #64]	; 0x40
 8003730:	e00e      	b.n	8003750 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	4b40      	ldr	r3, [pc, #256]	; (800383c <HAL_DMA_Init+0x148>)
 800373a:	4413      	add	r3, r2
 800373c:	4a3d      	ldr	r2, [pc, #244]	; (8003834 <HAL_DMA_Init+0x140>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	091b      	lsrs	r3, r3, #4
 8003744:	009a      	lsls	r2, r3, #2
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a3c      	ldr	r2, [pc, #240]	; (8003840 <HAL_DMA_Init+0x14c>)
 800374e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6819      	ldr	r1, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fb52 	bl	8003e4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037b0:	d102      	bne.n	80037b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037ce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d010      	beq.n	80037fa <HAL_DMA_Init+0x106>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d80c      	bhi.n	80037fa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fb7b 	bl	8003edc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	e008      	b.n	800380c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40020407 	.word	0x40020407
 8003830:	bffdfff8 	.word	0xbffdfff8
 8003834:	cccccccd 	.word	0xcccccccd
 8003838:	40020000 	.word	0x40020000
 800383c:	bffdfbf8 	.word	0xbffdfbf8
 8003840:	40020400 	.word	0x40020400

08003844 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e07b      	b.n	800394e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	4b3a      	ldr	r3, [pc, #232]	; (8003958 <HAL_DMA_DeInit+0x114>)
 800386e:	429a      	cmp	r2, r3
 8003870:	d80f      	bhi.n	8003892 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	4b38      	ldr	r3, [pc, #224]	; (800395c <HAL_DMA_DeInit+0x118>)
 800387a:	4413      	add	r3, r2
 800387c:	4a38      	ldr	r2, [pc, #224]	; (8003960 <HAL_DMA_DeInit+0x11c>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	009a      	lsls	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a35      	ldr	r2, [pc, #212]	; (8003964 <HAL_DMA_DeInit+0x120>)
 800388e:	641a      	str	r2, [r3, #64]	; 0x40
 8003890:	e00e      	b.n	80038b0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	4b33      	ldr	r3, [pc, #204]	; (8003968 <HAL_DMA_DeInit+0x124>)
 800389a:	4413      	add	r3, r2
 800389c:	4a30      	ldr	r2, [pc, #192]	; (8003960 <HAL_DMA_DeInit+0x11c>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	009a      	lsls	r2, r3, #2
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a2f      	ldr	r2, [pc, #188]	; (800396c <HAL_DMA_DeInit+0x128>)
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038bc:	f003 021c 	and.w	r2, r3, #28
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	2101      	movs	r1, #1
 80038c6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ca:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fabd 	bl	8003e4c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038e2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00f      	beq.n	800390c <HAL_DMA_DeInit+0xc8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d80b      	bhi.n	800390c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 faf1 	bl	8003edc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800390a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40020407 	.word	0x40020407
 800395c:	bffdfff8 	.word	0xbffdfff8
 8003960:	cccccccd 	.word	0xcccccccd
 8003964:	40020000 	.word	0x40020000
 8003968:	bffdfbf8 	.word	0xbffdfbf8
 800396c:	40020400 	.word	0x40020400

08003970 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_DMA_Start_IT+0x20>
 800398c:	2302      	movs	r3, #2
 800398e:	e069      	b.n	8003a64 <HAL_DMA_Start_IT+0xf4>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d155      	bne.n	8003a50 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0201 	bic.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fa02 	bl	8003dd2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 020e 	orr.w	r2, r2, #14
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	e00f      	b.n	8003a08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0204 	bic.w	r2, r2, #4
 80039f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 020a 	orr.w	r2, r2, #10
 8003a06:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a24:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	e008      	b.n	8003a62 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e04f      	b.n	8003b1e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d008      	beq.n	8003a9c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e040      	b.n	8003b1e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 020e 	bic.w	r2, r2, #14
 8003aaa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0201 	bic.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	f003 021c 	and.w	r2, r3, #28
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	2101      	movs	r1, #1
 8003ada:	fa01 f202 	lsl.w	r2, r1, r2
 8003ade:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ae8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00c      	beq.n	8003b0c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b0a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d005      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2204      	movs	r2, #4
 8003b44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
 8003b4a:	e047      	b.n	8003bdc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 020e 	bic.w	r2, r2, #14
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	f003 021c 	and.w	r2, r3, #28
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	2101      	movs	r1, #1
 8003b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00c      	beq.n	8003bbc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bb0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
    }
  }
  return status;
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	f003 031c 	and.w	r3, r3, #28
 8003c08:	2204      	movs	r2, #4
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d027      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x7c>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d022      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0204 	bic.w	r2, r2, #4
 8003c3a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	f003 021c 	and.w	r2, r3, #28
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	2104      	movs	r1, #4
 8003c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8081 	beq.w	8003d5c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003c62:	e07b      	b.n	8003d5c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c68:	f003 031c 	and.w	r3, r3, #28
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d03d      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x10c>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d038      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 020a 	bic.w	r2, r2, #10
 8003c9e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	4b2e      	ldr	r3, [pc, #184]	; (8003d68 <HAL_DMA_IRQHandler+0x180>)
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d909      	bls.n	8003cc8 <HAL_DMA_IRQHandler+0xe0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	f003 031c 	and.w	r3, r3, #28
 8003cbc:	4a2b      	ldr	r2, [pc, #172]	; (8003d6c <HAL_DMA_IRQHandler+0x184>)
 8003cbe:	2102      	movs	r1, #2
 8003cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc4:	6053      	str	r3, [r2, #4]
 8003cc6:	e008      	b.n	8003cda <HAL_DMA_IRQHandler+0xf2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	f003 031c 	and.w	r3, r3, #28
 8003cd0:	4a27      	ldr	r2, [pc, #156]	; (8003d70 <HAL_DMA_IRQHandler+0x188>)
 8003cd2:	2102      	movs	r1, #2
 8003cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd8:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d038      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003cf2:	e033      	b.n	8003d5c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf8:	f003 031c 	and.w	r3, r3, #28
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4013      	ands	r3, r2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d02a      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x176>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d025      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 020e 	bic.w	r2, r2, #14
 8003d20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f003 021c 	and.w	r2, r3, #28
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	2101      	movs	r1, #1
 8003d30:	fa01 f202 	lsl.w	r2, r1, r2
 8003d34:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d004      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
}
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40020080 	.word	0x40020080
 8003d6c:	40020400 	.word	0x40020400
 8003d70:	40020000 	.word	0x40020000

08003d74 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d103      	bne.n	8003d90 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	72fb      	strb	r3, [r7, #11]
    return status;
 8003d8c:	7afb      	ldrb	r3, [r7, #11]
 8003d8e:	e01b      	b.n	8003dc8 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00d      	beq.n	8003dbe <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	e003      	b.n	8003dbe <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003dbc:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	601a      	str	r2, [r3, #0]

  return status;
 8003dc6:	7afb      	ldrb	r3, [r7, #11]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	607a      	str	r2, [r7, #4]
 8003dde:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003de8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d004      	beq.n	8003dfc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003dfa:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	f003 021c 	and.w	r2, r3, #28
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	2101      	movs	r1, #1
 8003e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e0e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d108      	bne.n	8003e32 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e30:	e007      	b.n	8003e42 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	60da      	str	r2, [r3, #12]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d813      	bhi.n	8003e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e64:	089b      	lsrs	r3, r3, #2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e6c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	3b08      	subs	r3, #8
 8003e7c:	4a14      	ldr	r2, [pc, #80]	; (8003ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	e011      	b.n	8003eac <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	089b      	lsrs	r3, r3, #2
 8003e8e:	009a      	lsls	r2, r3, #2
 8003e90:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003e92:	4413      	add	r3, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	3b08      	subs	r3, #8
 8003ea0:	4a0b      	ldr	r2, [pc, #44]	; (8003ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	3307      	adds	r3, #7
 8003eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003eb0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	2201      	movs	r2, #1
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ec0:	bf00      	nop
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40020407 	.word	0x40020407
 8003ed0:	cccccccd 	.word	0xcccccccd
 8003ed4:	4002081c 	.word	0x4002081c
 8003ed8:	40020880 	.word	0x40020880

08003edc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a08      	ldr	r2, [pc, #32]	; (8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f00:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr
 8003f1c:	1000823f 	.word	0x1000823f
 8003f20:	40020940 	.word	0x40020940

08003f24 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f32:	e140      	b.n	80041b6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	2101      	movs	r1, #1
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f40:	4013      	ands	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8132 	beq.w	80041b0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d005      	beq.n	8003f64 <HAL_GPIO_Init+0x40>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d130      	bne.n	8003fc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	2203      	movs	r2, #3
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	091b      	lsrs	r3, r3, #4
 8003fb0:	f003 0201 	and.w	r2, r3, #1
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d017      	beq.n	8004002 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	2203      	movs	r2, #3
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d123      	bne.n	8004056 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	08da      	lsrs	r2, r3, #3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3208      	adds	r2, #8
 8004016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800401a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	220f      	movs	r2, #15
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	08da      	lsrs	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3208      	adds	r2, #8
 8004050:	6939      	ldr	r1, [r7, #16]
 8004052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	2203      	movs	r2, #3
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4013      	ands	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 0203 	and.w	r2, r3, #3
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 808c 	beq.w	80041b0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004098:	4a4e      	ldr	r2, [pc, #312]	; (80041d4 <HAL_GPIO_Init+0x2b0>)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	089b      	lsrs	r3, r3, #2
 800409e:	3302      	adds	r3, #2
 80040a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	2207      	movs	r2, #7
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4013      	ands	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040c2:	d00d      	beq.n	80040e0 <HAL_GPIO_Init+0x1bc>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a44      	ldr	r2, [pc, #272]	; (80041d8 <HAL_GPIO_Init+0x2b4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d007      	beq.n	80040dc <HAL_GPIO_Init+0x1b8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a43      	ldr	r2, [pc, #268]	; (80041dc <HAL_GPIO_Init+0x2b8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d101      	bne.n	80040d8 <HAL_GPIO_Init+0x1b4>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e004      	b.n	80040e2 <HAL_GPIO_Init+0x1be>
 80040d8:	2307      	movs	r3, #7
 80040da:	e002      	b.n	80040e2 <HAL_GPIO_Init+0x1be>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <HAL_GPIO_Init+0x1be>
 80040e0:	2300      	movs	r3, #0
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	f002 0203 	and.w	r2, r2, #3
 80040e8:	0092      	lsls	r2, r2, #2
 80040ea:	4093      	lsls	r3, r2
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040f2:	4938      	ldr	r1, [pc, #224]	; (80041d4 <HAL_GPIO_Init+0x2b0>)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	089b      	lsrs	r3, r3, #2
 80040f8:	3302      	adds	r3, #2
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004100:	4b37      	ldr	r3, [pc, #220]	; (80041e0 <HAL_GPIO_Init+0x2bc>)
 8004102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004106:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	43db      	mvns	r3, r3
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4013      	ands	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004126:	4a2e      	ldr	r2, [pc, #184]	; (80041e0 <HAL_GPIO_Init+0x2bc>)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800412e:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <HAL_GPIO_Init+0x2bc>)
 8004130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004134:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	43db      	mvns	r3, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4013      	ands	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004154:	4a22      	ldr	r2, [pc, #136]	; (80041e0 <HAL_GPIO_Init+0x2bc>)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800415c:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <HAL_GPIO_Init+0x2bc>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	43db      	mvns	r3, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4013      	ands	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004180:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <HAL_GPIO_Init+0x2bc>)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004186:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <HAL_GPIO_Init+0x2bc>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	43db      	mvns	r3, r3
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4013      	ands	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041aa:	4a0d      	ldr	r2, [pc, #52]	; (80041e0 <HAL_GPIO_Init+0x2bc>)
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	3301      	adds	r3, #1
 80041b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f47f aeb7 	bne.w	8003f34 <HAL_GPIO_Init+0x10>
  }
}
 80041c6:	bf00      	nop
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40010000 	.word	0x40010000
 80041d8:	48000400 	.word	0x48000400
 80041dc:	48000800 	.word	0x48000800
 80041e0:	58000800 	.word	0x58000800

080041e4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80041f2:	e0af      	b.n	8004354 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80041f4:	2201      	movs	r2, #1
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	4013      	ands	r3, r2
 8004200:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 80a2 	beq.w	800434e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800420a:	4a59      	ldr	r2, [pc, #356]	; (8004370 <HAL_GPIO_DeInit+0x18c>)
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	089b      	lsrs	r3, r3, #2
 8004210:	3302      	adds	r3, #2
 8004212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004216:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	2207      	movs	r2, #7
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4013      	ands	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004232:	d00d      	beq.n	8004250 <HAL_GPIO_DeInit+0x6c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a4f      	ldr	r2, [pc, #316]	; (8004374 <HAL_GPIO_DeInit+0x190>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <HAL_GPIO_DeInit+0x68>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a4e      	ldr	r2, [pc, #312]	; (8004378 <HAL_GPIO_DeInit+0x194>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d101      	bne.n	8004248 <HAL_GPIO_DeInit+0x64>
 8004244:	2302      	movs	r3, #2
 8004246:	e004      	b.n	8004252 <HAL_GPIO_DeInit+0x6e>
 8004248:	2307      	movs	r3, #7
 800424a:	e002      	b.n	8004252 <HAL_GPIO_DeInit+0x6e>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_GPIO_DeInit+0x6e>
 8004250:	2300      	movs	r3, #0
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	f002 0203 	and.w	r2, r2, #3
 8004258:	0092      	lsls	r2, r2, #2
 800425a:	4093      	lsls	r3, r2
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	429a      	cmp	r2, r3
 8004260:	d136      	bne.n	80042d0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004262:	4b46      	ldr	r3, [pc, #280]	; (800437c <HAL_GPIO_DeInit+0x198>)
 8004264:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	43db      	mvns	r3, r3
 800426c:	4943      	ldr	r1, [pc, #268]	; (800437c <HAL_GPIO_DeInit+0x198>)
 800426e:	4013      	ands	r3, r2
 8004270:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004274:	4b41      	ldr	r3, [pc, #260]	; (800437c <HAL_GPIO_DeInit+0x198>)
 8004276:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	43db      	mvns	r3, r3
 800427e:	493f      	ldr	r1, [pc, #252]	; (800437c <HAL_GPIO_DeInit+0x198>)
 8004280:	4013      	ands	r3, r2
 8004282:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004286:	4b3d      	ldr	r3, [pc, #244]	; (800437c <HAL_GPIO_DeInit+0x198>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	43db      	mvns	r3, r3
 800428e:	493b      	ldr	r1, [pc, #236]	; (800437c <HAL_GPIO_DeInit+0x198>)
 8004290:	4013      	ands	r3, r2
 8004292:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004294:	4b39      	ldr	r3, [pc, #228]	; (800437c <HAL_GPIO_DeInit+0x198>)
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	43db      	mvns	r3, r3
 800429c:	4937      	ldr	r1, [pc, #220]	; (800437c <HAL_GPIO_DeInit+0x198>)
 800429e:	4013      	ands	r3, r2
 80042a0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	2207      	movs	r2, #7
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80042b2:	4a2f      	ldr	r2, [pc, #188]	; (8004370 <HAL_GPIO_DeInit+0x18c>)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	089b      	lsrs	r3, r3, #2
 80042b8:	3302      	adds	r3, #2
 80042ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	43da      	mvns	r2, r3
 80042c2:	482b      	ldr	r0, [pc, #172]	; (8004370 <HAL_GPIO_DeInit+0x18c>)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	089b      	lsrs	r3, r3, #2
 80042c8:	400a      	ands	r2, r1
 80042ca:	3302      	adds	r3, #2
 80042cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	2103      	movs	r1, #3
 80042da:	fa01 f303 	lsl.w	r3, r1, r3
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	08da      	lsrs	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3208      	adds	r2, #8
 80042ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	220f      	movs	r2, #15
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	43db      	mvns	r3, r3
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	08d2      	lsrs	r2, r2, #3
 8004304:	4019      	ands	r1, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3208      	adds	r2, #8
 800430a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	2103      	movs	r1, #3
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	401a      	ands	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	2101      	movs	r1, #1
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	401a      	ands	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	2103      	movs	r1, #3
 8004342:	fa01 f303 	lsl.w	r3, r1, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	401a      	ands	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	3301      	adds	r3, #1
 8004352:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	f47f af49 	bne.w	80041f4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004362:	bf00      	nop
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40010000 	.word	0x40010000
 8004374:	48000400 	.word	0x48000400
 8004378:	48000800 	.word	0x48000800
 800437c:	58000800 	.word	0x58000800

08004380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	807b      	strh	r3, [r7, #2]
 800438c:	4613      	mov	r3, r2
 800438e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004390:	787b      	ldrb	r3, [r7, #1]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004396:	887a      	ldrh	r2, [r7, #2]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800439c:	e002      	b.n	80043a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800439e:	887a      	ldrh	r2, [r7, #2]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr
	...

080043b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a03      	ldr	r2, [pc, #12]	; (80043c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80043ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043be:	6013      	str	r3, [r2, #0]
}
 80043c0:	bf00      	nop
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr
 80043c8:	58000400 	.word	0x58000400

080043cc <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10c      	bne.n	80043f8 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80043de:	4b13      	ldr	r3, [pc, #76]	; (800442c <HAL_PWR_EnterSLEEPMode+0x60>)
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ea:	d10d      	bne.n	8004408 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80043ec:	f000 f83c 	bl	8004468 <HAL_PWREx_DisableLowPowerRunMode>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80043f6:	e015      	b.n	8004424 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <HAL_PWR_EnterSLEEPMode+0x60>)
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004404:	f000 f822 	bl	800444c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004408:	4b09      	ldr	r3, [pc, #36]	; (8004430 <HAL_PWR_EnterSLEEPMode+0x64>)
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	4a08      	ldr	r2, [pc, #32]	; (8004430 <HAL_PWR_EnterSLEEPMode+0x64>)
 800440e:	f023 0304 	bic.w	r3, r3, #4
 8004412:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800441a:	bf30      	wfi
 800441c:	e002      	b.n	8004424 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800441e:	bf40      	sev
    __WFE();
 8004420:	bf20      	wfe
    __WFE();
 8004422:	bf20      	wfe
  }
}
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	58000400 	.word	0x58000400
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <HAL_PWREx_GetVoltageRange+0x14>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004440:	4618      	mov	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr
 8004448:	58000400 	.word	0x58000400

0800444c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a03      	ldr	r2, [pc, #12]	; (8004464 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004456:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800445a:	6013      	str	r3, [r2, #0]
}
 800445c:	bf00      	nop
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr
 8004464:	58000400 	.word	0x58000400

08004468 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800446e:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004478:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800447a:	4b14      	ldr	r3, [pc, #80]	; (80044cc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2232      	movs	r2, #50	; 0x32
 8004480:	fb02 f303 	mul.w	r3, r2, r3
 8004484:	4a12      	ldr	r2, [pc, #72]	; (80044d0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	0c9b      	lsrs	r3, r3, #18
 800448c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800448e:	e002      	b.n	8004496 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3b01      	subs	r3, #1
 8004494:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004496:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800449e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a2:	d102      	bne.n	80044aa <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f2      	bne.n	8004490 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b6:	d101      	bne.n	80044bc <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e000      	b.n	80044be <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr
 80044c8:	58000400 	.word	0x58000400
 80044cc:	20000004 	.word	0x20000004
 80044d0:	431bde83 	.word	0x431bde83

080044d4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80044de:	4b10      	ldr	r3, [pc, #64]	; (8004520 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 0307 	bic.w	r3, r3, #7
 80044e6:	4a0e      	ldr	r2, [pc, #56]	; (8004520 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80044e8:	f043 0302 	orr.w	r3, r3, #2
 80044ec:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80044ee:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	4a0c      	ldr	r2, [pc, #48]	; (8004524 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80044f4:	f043 0304 	orr.w	r3, r3, #4
 80044f8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004500:	bf30      	wfi
 8004502:	e002      	b.n	800450a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004504:	bf40      	sev
    __WFE();
 8004506:	bf20      	wfe
    __WFE();
 8004508:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800450a:	4b06      	ldr	r3, [pc, #24]	; (8004524 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	4a05      	ldr	r2, [pc, #20]	; (8004524 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004510:	f023 0304 	bic.w	r3, r3, #4
 8004514:	6113      	str	r3, [r2, #16]
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr
 8004520:	58000400 	.word	0x58000400
 8004524:	e000ed00 	.word	0xe000ed00

08004528 <LL_PWR_IsEnabledBkUpAccess>:
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004538:	d101      	bne.n	800453e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr
 8004548:	58000400 	.word	0x58000400

0800454c <LL_RCC_HSE_EnableTcxo>:
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800455a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800455e:	6013      	str	r3, [r2, #0]
}
 8004560:	bf00      	nop
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr

08004568 <LL_RCC_HSE_DisableTcxo>:
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800456c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004576:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800457a:	6013      	str	r3, [r2, #0]
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004596:	d101      	bne.n	800459c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr

080045a6 <LL_RCC_HSE_Enable>:
{
 80045a6:	b480      	push	{r7}
 80045a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80045aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
}
 80045ba:	bf00      	nop
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr

080045c2 <LL_RCC_HSE_Disable>:
{
 80045c2:	b480      	push	{r7}
 80045c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
}
 80045d6:	bf00      	nop
 80045d8:	46bd      	mov	sp, r7
 80045da:	bc80      	pop	{r7}
 80045dc:	4770      	bx	lr

080045de <LL_RCC_HSE_IsReady>:
{
 80045de:	b480      	push	{r7}
 80045e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80045e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045f0:	d101      	bne.n	80045f6 <LL_RCC_HSE_IsReady+0x18>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <LL_RCC_HSE_IsReady+0x1a>
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <LL_RCC_HSI_Enable>:
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800460e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004612:	6013      	str	r3, [r2, #0]
}
 8004614:	bf00      	nop
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr

0800461c <LL_RCC_HSI_Disable>:
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800462a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800462e:	6013      	str	r3, [r2, #0]
}
 8004630:	bf00      	nop
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <LL_RCC_HSI_IsReady>:
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800463c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464a:	d101      	bne.n	8004650 <LL_RCC_HSI_IsReady+0x18>
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <LL_RCC_HSI_IsReady+0x1a>
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr

0800465a <LL_RCC_HSI_SetCalibTrimming>:
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	061b      	lsls	r3, r3, #24
 8004670:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004674:	4313      	orrs	r3, r2
 8004676:	604b      	str	r3, [r1, #4]
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr

08004682 <LL_RCC_LSE_IsReady>:
{
 8004682:	b480      	push	{r7}
 8004684:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b02      	cmp	r3, #2
 8004694:	d101      	bne.n	800469a <LL_RCC_LSE_IsReady+0x18>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <LL_RCC_LSE_IsReady+0x1a>
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <LL_RCC_LSI_Enable>:
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80046a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <LL_RCC_LSI_Disable>:
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80046c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80046dc:	bf00      	nop
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr

080046e4 <LL_RCC_LSI_IsReady>:
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80046e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d101      	bne.n	80046fc <LL_RCC_LSI_IsReady+0x18>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <LL_RCC_LSI_IsReady+0x1a>
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <LL_RCC_MSI_Enable>:
{
 8004706:	b480      	push	{r7}
 8004708:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800470a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6013      	str	r3, [r2, #0]
}
 800471a:	bf00      	nop
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr

08004722 <LL_RCC_MSI_Disable>:
{
 8004722:	b480      	push	{r7}
 8004724:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004730:	f023 0301 	bic.w	r3, r3, #1
 8004734:	6013      	str	r3, [r2, #0]
}
 8004736:	bf00      	nop
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr

0800473e <LL_RCC_MSI_IsReady>:
{
 800473e:	b480      	push	{r7}
 8004740:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b02      	cmp	r3, #2
 800474e:	d101      	bne.n	8004754 <LL_RCC_MSI_IsReady+0x16>
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <LL_RCC_MSI_IsReady+0x18>
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr

0800475e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800475e:	b480      	push	{r7}
 8004760:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d101      	bne.n	8004774 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr

0800477e <LL_RCC_MSI_GetRange>:
{
 800477e:	b480      	push	{r7}
 8004780:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800478c:	4618      	mov	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <LL_RCC_MSI_SetCalibTrimming>:
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80047b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047c6:	4313      	orrs	r3, r2
 80047c8:	604b      	str	r3, [r1, #4]
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <LL_RCC_SetSysClkSource>:
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80047dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f023 0203 	bic.w	r2, r3, #3
 80047e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	608b      	str	r3, [r1, #8]
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <LL_RCC_GetSysClkSource>:
{
 80047fa:	b480      	push	{r7}
 80047fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80047fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 030c 	and.w	r3, r3, #12
}
 8004808:	4618      	mov	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <LL_RCC_SetAHBPrescaler>:
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4313      	orrs	r3, r2
 800482a:	608b      	str	r3, [r1, #8]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800483e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004842:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004846:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800484a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <LL_RCC_SetAHB3Prescaler>:
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004870:	f023 020f 	bic.w	r2, r3, #15
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr

0800488c <LL_RCC_SetAPB1Prescaler>:
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800489e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	608b      	str	r3, [r1, #8]
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr

080048b2 <LL_RCC_SetAPB2Prescaler>:
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80048ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <LL_RCC_GetAHBPrescaler>:
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80048dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr

080048ee <LL_RCC_GetAHB3Prescaler>:
{
 80048ee:	b480      	push	{r7}
 80048f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80048f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <LL_RCC_GetAPB1Prescaler>:
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800490c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004916:	4618      	mov	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr

0800491e <LL_RCC_GetAPB2Prescaler>:
{
 800491e:	b480      	push	{r7}
 8004920:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800492c:	4618      	mov	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr

08004934 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004946:	6013      	str	r3, [r2, #0]
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr

08004950 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800495e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004962:	6013      	str	r3, [r2, #0]
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800497e:	d101      	bne.n	8004984 <LL_RCC_PLL_IsReady+0x18>
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <LL_RCC_PLL_IsReady+0x1a>
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr

0800498e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800498e:	b480      	push	{r7}
 8004990:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	0a1b      	lsrs	r3, r3, #8
 800499a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800499e:	4618      	mov	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr

080049a6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80049a6:	b480      	push	{r7}
 80049a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80049aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr

080049bc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80049c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr

080049d2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80049d2:	b480      	push	{r7}
 80049d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80049d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0303 	and.w	r3, r3, #3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr

080049e8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80049ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049fa:	d101      	bne.n	8004a00 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a1e:	d101      	bne.n	8004a24 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr

08004a2e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a42:	d101      	bne.n	8004a48 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr

08004a52 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004a52:	b480      	push	{r7}
 8004a54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a64:	d101      	bne.n	8004a6a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr

08004a74 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a86:	d101      	bne.n	8004a8c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr
	...

08004a98 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e38b      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aaa:	f7ff fea6 	bl	80047fa <LL_RCC_GetSysClkSource>
 8004aae:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ab0:	f7ff ff8f 	bl	80049d2 <LL_RCC_PLL_GetMainSource>
 8004ab4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 80c9 	beq.w	8004c56 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d005      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x3e>
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	2b0c      	cmp	r3, #12
 8004ace:	d17b      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d178      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ad6:	f7ff fe32 	bl	800473e <LL_RCC_MSI_IsReady>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_RCC_OscConfig+0x54>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e36a      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_RCC_OscConfig+0x72>
 8004afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b08:	e006      	b.n	8004b18 <HAL_RCC_OscConfig+0x80>
 8004b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b12:	091b      	lsrs	r3, r3, #4
 8004b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d222      	bcs.n	8004b62 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fd6f 	bl	8005604 <RCC_SetFlashLatencyFromMSIRange>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e348      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b3a:	f043 0308 	orr.w	r3, r3, #8
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b52:	4313      	orrs	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff fe26 	bl	80047ac <LL_RCC_MSI_SetCalibTrimming>
 8004b60:	e021      	b.n	8004ba6 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b6c:	f043 0308 	orr.w	r3, r3, #8
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b84:	4313      	orrs	r3, r2
 8004b86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff fe0d 	bl	80047ac <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fd34 	bl	8005604 <RCC_SetFlashLatencyFromMSIRange>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e30d      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ba6:	f000 fcf5 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 8004baa:	4603      	mov	r3, r0
 8004bac:	4aa1      	ldr	r2, [pc, #644]	; (8004e34 <HAL_RCC_OscConfig+0x39c>)
 8004bae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004bb0:	4ba1      	ldr	r3, [pc, #644]	; (8004e38 <HAL_RCC_OscConfig+0x3a0>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fc ffcf 	bl	8001b58 <HAL_InitTick>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004bbe:	7cfb      	ldrb	r3, [r7, #19]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d047      	beq.n	8004c54 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8004bc4:	7cfb      	ldrb	r3, [r7, #19]
 8004bc6:	e2fc      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d02c      	beq.n	8004c2a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004bd0:	f7ff fd99 	bl	8004706 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bd4:	f7fc ffca 	bl	8001b6c <HAL_GetTick>
 8004bd8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bdc:	f7fc ffc6 	bl	8001b6c <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e2e9      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004bee:	f7ff fda6 	bl	800473e <LL_RCC_MSI_IsReady>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f1      	beq.n	8004bdc <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c02:	f043 0308 	orr.w	r3, r3, #8
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff fdc2 	bl	80047ac <LL_RCC_MSI_SetCalibTrimming>
 8004c28:	e015      	b.n	8004c56 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c2a:	f7ff fd7a 	bl	8004722 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c2e:	f7fc ff9d 	bl	8001b6c <HAL_GetTick>
 8004c32:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c36:	f7fc ff99 	bl	8001b6c <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e2bc      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004c48:	f7ff fd79 	bl	800473e <LL_RCC_MSI_IsReady>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f1      	bne.n	8004c36 <HAL_RCC_OscConfig+0x19e>
 8004c52:	e000      	b.n	8004c56 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c54:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d05f      	beq.n	8004d22 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d005      	beq.n	8004c74 <HAL_RCC_OscConfig+0x1dc>
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	2b0c      	cmp	r3, #12
 8004c6c:	d10d      	bne.n	8004c8a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d10a      	bne.n	8004c8a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c74:	f7ff fcb3 	bl	80045de <LL_RCC_HSE_IsReady>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d050      	beq.n	8004d20 <HAL_RCC_OscConfig+0x288>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d14c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e29b      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca8:	d102      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x218>
 8004caa:	f7ff fc7c 	bl	80045a6 <LL_RCC_HSE_Enable>
 8004cae:	e00d      	b.n	8004ccc <HAL_RCC_OscConfig+0x234>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004cb8:	d104      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x22c>
 8004cba:	f7ff fc47 	bl	800454c <LL_RCC_HSE_EnableTcxo>
 8004cbe:	f7ff fc72 	bl	80045a6 <LL_RCC_HSE_Enable>
 8004cc2:	e003      	b.n	8004ccc <HAL_RCC_OscConfig+0x234>
 8004cc4:	f7ff fc7d 	bl	80045c2 <LL_RCC_HSE_Disable>
 8004cc8:	f7ff fc4e 	bl	8004568 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d012      	beq.n	8004cfa <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fc ff4a 	bl	8001b6c <HAL_GetTick>
 8004cd8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cdc:	f7fc ff46 	bl	8001b6c <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b64      	cmp	r3, #100	; 0x64
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e269      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004cee:	f7ff fc76 	bl	80045de <LL_RCC_HSE_IsReady>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f1      	beq.n	8004cdc <HAL_RCC_OscConfig+0x244>
 8004cf8:	e013      	b.n	8004d22 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fc ff37 	bl	8001b6c <HAL_GetTick>
 8004cfe:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d02:	f7fc ff33 	bl	8001b6c <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b64      	cmp	r3, #100	; 0x64
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e256      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d14:	f7ff fc63 	bl	80045de <LL_RCC_HSE_IsReady>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f1      	bne.n	8004d02 <HAL_RCC_OscConfig+0x26a>
 8004d1e:	e000      	b.n	8004d22 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d20:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d04b      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_OscConfig+0x2a8>
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	2b0c      	cmp	r3, #12
 8004d38:	d113      	bne.n	8004d62 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d110      	bne.n	8004d62 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d40:	f7ff fc7a 	bl	8004638 <LL_RCC_HSI_IsReady>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_RCC_OscConfig+0x2be>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e235      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fc7d 	bl	800465a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d60:	e031      	b.n	8004dc6 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d019      	beq.n	8004d9e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d6a:	f7ff fc49 	bl	8004600 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6e:	f7fc fefd 	bl	8001b6c <HAL_GetTick>
 8004d72:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d76:	f7fc fef9 	bl	8001b6c <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e21c      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004d88:	f7ff fc56 	bl	8004638 <LL_RCC_HSI_IsReady>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f1      	beq.n	8004d76 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff fc5f 	bl	800465a <LL_RCC_HSI_SetCalibTrimming>
 8004d9c:	e013      	b.n	8004dc6 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d9e:	f7ff fc3d 	bl	800461c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da2:	f7fc fee3 	bl	8001b6c <HAL_GetTick>
 8004da6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004daa:	f7fc fedf 	bl	8001b6c <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e202      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004dbc:	f7ff fc3c 	bl	8004638 <LL_RCC_HSI_IsReady>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f1      	bne.n	8004daa <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d06f      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d057      	beq.n	8004e8a <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8004dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004de2:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69da      	ldr	r2, [r3, #28]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d036      	beq.n	8004e60 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d006      	beq.n	8004e0a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e1db      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d018      	beq.n	8004e46 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8004e14:	f7ff fc56 	bl	80046c4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e18:	f7fc fea8 	bl	8001b6c <HAL_GetTick>
 8004e1c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004e1e:	e00d      	b.n	8004e3c <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e20:	f7fc fea4 	bl	8001b6c <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b11      	cmp	r3, #17
 8004e2c:	d906      	bls.n	8004e3c <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e1c7      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
 8004e32:	bf00      	nop
 8004e34:	20000004 	.word	0x20000004
 8004e38:	20000014 	.word	0x20000014
          while (LL_RCC_LSI_IsReady() != 0U)
 8004e3c:	f7ff fc52 	bl	80046e4 <LL_RCC_LSI_IsReady>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1ec      	bne.n	8004e20 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e4e:	f023 0210 	bic.w	r2, r3, #16
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e60:	f7ff fc20 	bl	80046a4 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e64:	f7fc fe82 	bl	8001b6c <HAL_GetTick>
 8004e68:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6c:	f7fc fe7e 	bl	8001b6c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b11      	cmp	r3, #17
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e1a1      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004e7e:	f7ff fc31 	bl	80046e4 <LL_RCC_LSI_IsReady>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0f1      	beq.n	8004e6c <HAL_RCC_OscConfig+0x3d4>
 8004e88:	e013      	b.n	8004eb2 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e8a:	f7ff fc1b 	bl	80046c4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8e:	f7fc fe6d 	bl	8001b6c <HAL_GetTick>
 8004e92:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e96:	f7fc fe69 	bl	8001b6c <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b11      	cmp	r3, #17
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e18c      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004ea8:	f7ff fc1c 	bl	80046e4 <LL_RCC_LSI_IsReady>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f1      	bne.n	8004e96 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 80d8 	beq.w	8005070 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004ec0:	f7ff fb32 	bl	8004528 <LL_PWR_IsEnabledBkUpAccess>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d113      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004eca:	f7ff fa71 	bl	80043b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ece:	f7fc fe4d 	bl	8001b6c <HAL_GetTick>
 8004ed2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed6:	f7fc fe49 	bl	8001b6c <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e16c      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004ee8:	f7ff fb1e 	bl	8004528 <LL_PWR_IsEnabledBkUpAccess>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f1      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d07b      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	2b85      	cmp	r3, #133	; 0x85
 8004f00:	d003      	beq.n	8004f0a <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	2b05      	cmp	r3, #5
 8004f08:	d109      	bne.n	8004f1e <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f16:	f043 0304 	orr.w	r3, r3, #4
 8004f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1e:	f7fc fe25 	bl	8001b6c <HAL_GetTick>
 8004f22:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004f38:	e00a      	b.n	8004f50 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3a:	f7fc fe17 	bl	8001b6c <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e138      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004f50:	f7ff fb97 	bl	8004682 <LL_RCC_LSE_IsReady>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0ef      	beq.n	8004f3a <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b81      	cmp	r3, #129	; 0x81
 8004f60:	d003      	beq.n	8004f6a <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	2b85      	cmp	r3, #133	; 0x85
 8004f68:	d121      	bne.n	8004fae <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6a:	f7fc fdff 	bl	8001b6c <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004f84:	e00a      	b.n	8004f9c <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f86:	f7fc fdf1 	bl	8001b6c <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e112      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0ec      	beq.n	8004f86 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004fac:	e060      	b.n	8005070 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fae:	f7fc fddd 	bl	8001b6c <HAL_GetTick>
 8004fb2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004fc8:	e00a      	b.n	8004fe0 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fca:	f7fc fdcf 	bl	8001b6c <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e0f0      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1ec      	bne.n	8004fca <HAL_RCC_OscConfig+0x532>
 8004ff0:	e03e      	b.n	8005070 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff2:	f7fc fdbb 	bl	8001b6c <HAL_GetTick>
 8004ff6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800500c:	e00a      	b.n	8005024 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500e:	f7fc fdad 	bl	8001b6c <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f241 3288 	movw	r2, #5000	; 0x1388
 800501c:	4293      	cmp	r3, r2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e0ce      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1ec      	bne.n	800500e <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005034:	f7fc fd9a 	bl	8001b6c <HAL_GetTick>
 8005038:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800503a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005046:	f023 0301 	bic.w	r3, r3, #1
 800504a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800504e:	e00a      	b.n	8005066 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005050:	f7fc fd8c 	bl	8001b6c <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	; 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e0ad      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005066:	f7ff fb0c 	bl	8004682 <LL_RCC_LSE_IsReady>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1ef      	bne.n	8005050 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 80a3 	beq.w	80051c0 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	2b0c      	cmp	r3, #12
 800507e:	d076      	beq.n	800516e <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	2b02      	cmp	r3, #2
 8005086:	d14b      	bne.n	8005120 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005088:	f7ff fc62 	bl	8004950 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508c:	f7fc fd6e 	bl	8001b6c <HAL_GetTick>
 8005090:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005094:	f7fc fd6a 	bl	8001b6c <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b0a      	cmp	r3, #10
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e08d      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80050a6:	f7ff fc61 	bl	800496c <LL_RCC_PLL_IsReady>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1f1      	bne.n	8005094 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	4b45      	ldr	r3, [pc, #276]	; (80051cc <HAL_RCC_OscConfig+0x734>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050c2:	4311      	orrs	r1, r2
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050c8:	0212      	lsls	r2, r2, #8
 80050ca:	4311      	orrs	r1, r2
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050d0:	4311      	orrs	r1, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80050d6:	4311      	orrs	r1, r2
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050dc:	430a      	orrs	r2, r1
 80050de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e6:	f7ff fc25 	bl	8004934 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fc fd37 	bl	8001b6c <HAL_GetTick>
 80050fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005102:	f7fc fd33 	bl	8001b6c <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b0a      	cmp	r3, #10
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e056      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005114:	f7ff fc2a 	bl	800496c <LL_RCC_PLL_IsReady>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f1      	beq.n	8005102 <HAL_RCC_OscConfig+0x66a>
 800511e:	e04f      	b.n	80051c0 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005120:	f7ff fc16 	bl	8004950 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800512e:	f023 0303 	bic.w	r3, r3, #3
 8005132:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800513e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005146:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005148:	f7fc fd10 	bl	8001b6c <HAL_GetTick>
 800514c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005150:	f7fc fd0c 	bl	8001b6c <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b0a      	cmp	r3, #10
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e02f      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005162:	f7ff fc03 	bl	800496c <LL_RCC_PLL_IsReady>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1f1      	bne.n	8005150 <HAL_RCC_OscConfig+0x6b8>
 800516c:	e028      	b.n	80051c0 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e023      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	f003 0203 	and.w	r2, r3, #3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518c:	429a      	cmp	r2, r3
 800518e:	d115      	bne.n	80051bc <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519a:	429a      	cmp	r2, r3
 800519c:	d10e      	bne.n	80051bc <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d106      	bne.n	80051bc <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	11c1808c 	.word	0x11c1808c

080051d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e12c      	b.n	800543e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051e4:	4b98      	ldr	r3, [pc, #608]	; (8005448 <HAL_RCC_ClockConfig+0x278>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d91b      	bls.n	800522a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f2:	4b95      	ldr	r3, [pc, #596]	; (8005448 <HAL_RCC_ClockConfig+0x278>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f023 0207 	bic.w	r2, r3, #7
 80051fa:	4993      	ldr	r1, [pc, #588]	; (8005448 <HAL_RCC_ClockConfig+0x278>)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	4313      	orrs	r3, r2
 8005200:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005202:	f7fc fcb3 	bl	8001b6c <HAL_GetTick>
 8005206:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005208:	e008      	b.n	800521c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800520a:	f7fc fcaf 	bl	8001b6c <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e110      	b.n	800543e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800521c:	4b8a      	ldr	r3, [pc, #552]	; (8005448 <HAL_RCC_ClockConfig+0x278>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d1ef      	bne.n	800520a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d016      	beq.n	8005264 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff fae8 	bl	8004810 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005240:	f7fc fc94 	bl	8001b6c <HAL_GetTick>
 8005244:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005246:	e008      	b.n	800525a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005248:	f7fc fc90 	bl	8001b6c <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e0f1      	b.n	800543e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800525a:	f7ff fbc5 	bl	80049e8 <LL_RCC_IsActiveFlag_HPRE>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f1      	beq.n	8005248 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d016      	beq.n	800529e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff fade 	bl	8004836 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800527a:	f7fc fc77 	bl	8001b6c <HAL_GetTick>
 800527e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005280:	e008      	b.n	8005294 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005282:	f7fc fc73 	bl	8001b6c <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e0d4      	b.n	800543e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005294:	f7ff fbb9 	bl	8004a0a <LL_RCC_IsActiveFlag_C2HPRE>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0f1      	beq.n	8005282 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d016      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff fad6 	bl	8004860 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052b4:	f7fc fc5a 	bl	8001b6c <HAL_GetTick>
 80052b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052bc:	f7fc fc56 	bl	8001b6c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e0b7      	b.n	800543e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80052ce:	f7ff fbae 	bl	8004a2e <LL_RCC_IsActiveFlag_SHDHPRE>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f1      	beq.n	80052bc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d016      	beq.n	8005312 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff facf 	bl	800488c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052ee:	f7fc fc3d 	bl	8001b6c <HAL_GetTick>
 80052f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052f6:	f7fc fc39 	bl	8001b6c <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e09a      	b.n	800543e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005308:	f7ff fba3 	bl	8004a52 <LL_RCC_IsActiveFlag_PPRE1>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f1      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d017      	beq.n	800534e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff fac4 	bl	80048b2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800532a:	f7fc fc1f 	bl	8001b6c <HAL_GetTick>
 800532e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005330:	e008      	b.n	8005344 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005332:	f7fc fc1b 	bl	8001b6c <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e07c      	b.n	800543e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005344:	f7ff fb96 	bl	8004a74 <LL_RCC_IsActiveFlag_PPRE2>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f1      	beq.n	8005332 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d043      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b02      	cmp	r3, #2
 8005360:	d106      	bne.n	8005370 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005362:	f7ff f93c 	bl	80045de <LL_RCC_HSE_IsReady>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d11e      	bne.n	80053aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e066      	b.n	800543e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b03      	cmp	r3, #3
 8005376:	d106      	bne.n	8005386 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005378:	f7ff faf8 	bl	800496c <LL_RCC_PLL_IsReady>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d113      	bne.n	80053aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e05b      	b.n	800543e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800538e:	f7ff f9d6 	bl	800473e <LL_RCC_MSI_IsReady>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d108      	bne.n	80053aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e050      	b.n	800543e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800539c:	f7ff f94c 	bl	8004638 <LL_RCC_HSI_IsReady>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e049      	b.n	800543e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff fa10 	bl	80047d4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b4:	f7fc fbda 	bl	8001b6c <HAL_GetTick>
 80053b8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ba:	e00a      	b.n	80053d2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053bc:	f7fc fbd6 	bl	8001b6c <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e035      	b.n	800543e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d2:	f7ff fa12 	bl	80047fa <LL_RCC_GetSysClkSource>
 80053d6:	4602      	mov	r2, r0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	429a      	cmp	r2, r3
 80053e0:	d1ec      	bne.n	80053bc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053e2:	4b19      	ldr	r3, [pc, #100]	; (8005448 <HAL_RCC_ClockConfig+0x278>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d21b      	bcs.n	8005428 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f0:	4b15      	ldr	r3, [pc, #84]	; (8005448 <HAL_RCC_ClockConfig+0x278>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f023 0207 	bic.w	r2, r3, #7
 80053f8:	4913      	ldr	r1, [pc, #76]	; (8005448 <HAL_RCC_ClockConfig+0x278>)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005400:	f7fc fbb4 	bl	8001b6c <HAL_GetTick>
 8005404:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005406:	e008      	b.n	800541a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005408:	f7fc fbb0 	bl	8001b6c <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e011      	b.n	800543e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800541a:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <HAL_RCC_ClockConfig+0x278>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d1ef      	bne.n	8005408 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005428:	f000 f8b4 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 800542c:	4603      	mov	r3, r0
 800542e:	4a07      	ldr	r2, [pc, #28]	; (800544c <HAL_RCC_ClockConfig+0x27c>)
 8005430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005432:	4b07      	ldr	r3, [pc, #28]	; (8005450 <HAL_RCC_ClockConfig+0x280>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f7fc fb8e 	bl	8001b58 <HAL_InitTick>
 800543c:	4603      	mov	r3, r0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	58004000 	.word	0x58004000
 800544c:	20000004 	.word	0x20000004
 8005450:	20000014 	.word	0x20000014

08005454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005462:	f7ff f9ca 	bl	80047fa <LL_RCC_GetSysClkSource>
 8005466:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005468:	f7ff fab3 	bl	80049d2 <LL_RCC_PLL_GetMainSource>
 800546c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0x2c>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b0c      	cmp	r3, #12
 8005478:	d139      	bne.n	80054ee <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d136      	bne.n	80054ee <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005480:	f7ff f96d 	bl	800475e <LL_RCC_MSI_IsEnabledRangeSelect>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d115      	bne.n	80054b6 <HAL_RCC_GetSysClockFreq+0x62>
 800548a:	f7ff f968 	bl	800475e <LL_RCC_MSI_IsEnabledRangeSelect>
 800548e:	4603      	mov	r3, r0
 8005490:	2b01      	cmp	r3, #1
 8005492:	d106      	bne.n	80054a2 <HAL_RCC_GetSysClockFreq+0x4e>
 8005494:	f7ff f973 	bl	800477e <LL_RCC_MSI_GetRange>
 8005498:	4603      	mov	r3, r0
 800549a:	0a1b      	lsrs	r3, r3, #8
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	e005      	b.n	80054ae <HAL_RCC_GetSysClockFreq+0x5a>
 80054a2:	f7ff f977 	bl	8004794 <LL_RCC_MSI_GetRangeAfterStandby>
 80054a6:	4603      	mov	r3, r0
 80054a8:	0a1b      	lsrs	r3, r3, #8
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	4a36      	ldr	r2, [pc, #216]	; (8005588 <HAL_RCC_GetSysClockFreq+0x134>)
 80054b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b4:	e014      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x8c>
 80054b6:	f7ff f952 	bl	800475e <LL_RCC_MSI_IsEnabledRangeSelect>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d106      	bne.n	80054ce <HAL_RCC_GetSysClockFreq+0x7a>
 80054c0:	f7ff f95d 	bl	800477e <LL_RCC_MSI_GetRange>
 80054c4:	4603      	mov	r3, r0
 80054c6:	091b      	lsrs	r3, r3, #4
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	e005      	b.n	80054da <HAL_RCC_GetSysClockFreq+0x86>
 80054ce:	f7ff f961 	bl	8004794 <LL_RCC_MSI_GetRangeAfterStandby>
 80054d2:	4603      	mov	r3, r0
 80054d4:	091b      	lsrs	r3, r3, #4
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	4a2b      	ldr	r2, [pc, #172]	; (8005588 <HAL_RCC_GetSysClockFreq+0x134>)
 80054dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d115      	bne.n	8005514 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054ec:	e012      	b.n	8005514 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d102      	bne.n	80054fa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054f4:	4b25      	ldr	r3, [pc, #148]	; (800558c <HAL_RCC_GetSysClockFreq+0x138>)
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	e00c      	b.n	8005514 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d109      	bne.n	8005514 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005500:	f7ff f840 	bl	8004584 <LL_RCC_HSE_IsEnabledDiv2>
 8005504:	4603      	mov	r3, r0
 8005506:	2b01      	cmp	r3, #1
 8005508:	d102      	bne.n	8005510 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800550a:	4b20      	ldr	r3, [pc, #128]	; (800558c <HAL_RCC_GetSysClockFreq+0x138>)
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	e001      	b.n	8005514 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005510:	4b1f      	ldr	r3, [pc, #124]	; (8005590 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005512:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005514:	f7ff f971 	bl	80047fa <LL_RCC_GetSysClkSource>
 8005518:	4603      	mov	r3, r0
 800551a:	2b0c      	cmp	r3, #12
 800551c:	d12f      	bne.n	800557e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800551e:	f7ff fa58 	bl	80049d2 <LL_RCC_PLL_GetMainSource>
 8005522:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d003      	beq.n	8005532 <HAL_RCC_GetSysClockFreq+0xde>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b03      	cmp	r3, #3
 800552e:	d003      	beq.n	8005538 <HAL_RCC_GetSysClockFreq+0xe4>
 8005530:	e00d      	b.n	800554e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005532:	4b16      	ldr	r3, [pc, #88]	; (800558c <HAL_RCC_GetSysClockFreq+0x138>)
 8005534:	60fb      	str	r3, [r7, #12]
        break;
 8005536:	e00d      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005538:	f7ff f824 	bl	8004584 <LL_RCC_HSE_IsEnabledDiv2>
 800553c:	4603      	mov	r3, r0
 800553e:	2b01      	cmp	r3, #1
 8005540:	d102      	bne.n	8005548 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005542:	4b12      	ldr	r3, [pc, #72]	; (800558c <HAL_RCC_GetSysClockFreq+0x138>)
 8005544:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005546:	e005      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005548:	4b11      	ldr	r3, [pc, #68]	; (8005590 <HAL_RCC_GetSysClockFreq+0x13c>)
 800554a:	60fb      	str	r3, [r7, #12]
        break;
 800554c:	e002      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	60fb      	str	r3, [r7, #12]
        break;
 8005552:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005554:	f7ff fa1b 	bl	800498e <LL_RCC_PLL_GetN>
 8005558:	4602      	mov	r2, r0
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	fb03 f402 	mul.w	r4, r3, r2
 8005560:	f7ff fa2c 	bl	80049bc <LL_RCC_PLL_GetDivider>
 8005564:	4603      	mov	r3, r0
 8005566:	091b      	lsrs	r3, r3, #4
 8005568:	3301      	adds	r3, #1
 800556a:	fbb4 f4f3 	udiv	r4, r4, r3
 800556e:	f7ff fa1a 	bl	80049a6 <LL_RCC_PLL_GetR>
 8005572:	4603      	mov	r3, r0
 8005574:	0f5b      	lsrs	r3, r3, #29
 8005576:	3301      	adds	r3, #1
 8005578:	fbb4 f3f3 	udiv	r3, r4, r3
 800557c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800557e:	697b      	ldr	r3, [r7, #20]
}
 8005580:	4618      	mov	r0, r3
 8005582:	371c      	adds	r7, #28
 8005584:	46bd      	mov	sp, r7
 8005586:	bd90      	pop	{r4, r7, pc}
 8005588:	0800e894 	.word	0x0800e894
 800558c:	00f42400 	.word	0x00f42400
 8005590:	01e84800 	.word	0x01e84800

08005594 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005594:	b598      	push	{r3, r4, r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005598:	f7ff ff5c 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 800559c:	4604      	mov	r4, r0
 800559e:	f7ff f99b 	bl	80048d8 <LL_RCC_GetAHBPrescaler>
 80055a2:	4603      	mov	r3, r0
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	4a03      	ldr	r2, [pc, #12]	; (80055b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80055ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	bd98      	pop	{r3, r4, r7, pc}
 80055b8:	0800e834 	.word	0x0800e834

080055bc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055bc:	b598      	push	{r3, r4, r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80055c0:	f7ff ffe8 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 80055c4:	4604      	mov	r4, r0
 80055c6:	f7ff f99f 	bl	8004908 <LL_RCC_GetAPB1Prescaler>
 80055ca:	4603      	mov	r3, r0
 80055cc:	0a1b      	lsrs	r3, r3, #8
 80055ce:	4a03      	ldr	r2, [pc, #12]	; (80055dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80055d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80055d8:	4618      	mov	r0, r3
 80055da:	bd98      	pop	{r3, r4, r7, pc}
 80055dc:	0800e874 	.word	0x0800e874

080055e0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055e0:	b598      	push	{r3, r4, r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80055e4:	f7ff ffd6 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 80055e8:	4604      	mov	r4, r0
 80055ea:	f7ff f998 	bl	800491e <LL_RCC_GetAPB2Prescaler>
 80055ee:	4603      	mov	r3, r0
 80055f0:	0adb      	lsrs	r3, r3, #11
 80055f2:	4a03      	ldr	r2, [pc, #12]	; (8005600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd98      	pop	{r3, r4, r7, pc}
 8005600:	0800e874 	.word	0x0800e874

08005604 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005604:	b590      	push	{r4, r7, lr}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	091b      	lsrs	r3, r3, #4
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	4a10      	ldr	r2, [pc, #64]	; (8005658 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800561a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800561c:	f7ff f967 	bl	80048ee <LL_RCC_GetAHB3Prescaler>
 8005620:	4603      	mov	r3, r0
 8005622:	091b      	lsrs	r3, r3, #4
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	4a0c      	ldr	r2, [pc, #48]	; (800565c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800562a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	fbb2 f3f3 	udiv	r3, r2, r3
 8005634:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	4a09      	ldr	r2, [pc, #36]	; (8005660 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800563a:	fba2 2303 	umull	r2, r3, r2, r3
 800563e:	0c9c      	lsrs	r4, r3, #18
 8005640:	f7fe fef8 	bl	8004434 <HAL_PWREx_GetVoltageRange>
 8005644:	4603      	mov	r3, r0
 8005646:	4619      	mov	r1, r3
 8005648:	4620      	mov	r0, r4
 800564a:	f000 f80b 	bl	8005664 <RCC_SetFlashLatency>
 800564e:	4603      	mov	r3, r0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	bd90      	pop	{r4, r7, pc}
 8005658:	0800e894 	.word	0x0800e894
 800565c:	0800e834 	.word	0x0800e834
 8005660:	431bde83 	.word	0x431bde83

08005664 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08e      	sub	sp, #56	; 0x38
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800566e:	4a3a      	ldr	r2, [pc, #232]	; (8005758 <RCC_SetFlashLatency+0xf4>)
 8005670:	f107 0320 	add.w	r3, r7, #32
 8005674:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005678:	6018      	str	r0, [r3, #0]
 800567a:	3304      	adds	r3, #4
 800567c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800567e:	4a37      	ldr	r2, [pc, #220]	; (800575c <RCC_SetFlashLatency+0xf8>)
 8005680:	f107 0318 	add.w	r3, r7, #24
 8005684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005688:	6018      	str	r0, [r3, #0]
 800568a:	3304      	adds	r3, #4
 800568c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800568e:	4a34      	ldr	r2, [pc, #208]	; (8005760 <RCC_SetFlashLatency+0xfc>)
 8005690:	f107 030c 	add.w	r3, r7, #12
 8005694:	ca07      	ldmia	r2, {r0, r1, r2}
 8005696:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800569a:	2300      	movs	r3, #0
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a4:	d11b      	bne.n	80056de <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	633b      	str	r3, [r7, #48]	; 0x30
 80056aa:	e014      	b.n	80056d6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	3338      	adds	r3, #56	; 0x38
 80056b2:	443b      	add	r3, r7
 80056b4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80056b8:	461a      	mov	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4293      	cmp	r3, r2
 80056be:	d807      	bhi.n	80056d0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	3338      	adds	r3, #56	; 0x38
 80056c6:	443b      	add	r3, r7
 80056c8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80056cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056ce:	e021      	b.n	8005714 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	3301      	adds	r3, #1
 80056d4:	633b      	str	r3, [r7, #48]	; 0x30
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d9e7      	bls.n	80056ac <RCC_SetFlashLatency+0x48>
 80056dc:	e01a      	b.n	8005714 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80056de:	2300      	movs	r3, #0
 80056e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056e2:	e014      	b.n	800570e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	3338      	adds	r3, #56	; 0x38
 80056ea:	443b      	add	r3, r7
 80056ec:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80056f0:	461a      	mov	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d807      	bhi.n	8005708 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	3338      	adds	r3, #56	; 0x38
 80056fe:	443b      	add	r3, r7
 8005700:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005704:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005706:	e005      	b.n	8005714 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	3301      	adds	r3, #1
 800570c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800570e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005710:	2b02      	cmp	r3, #2
 8005712:	d9e7      	bls.n	80056e4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005714:	4b13      	ldr	r3, [pc, #76]	; (8005764 <RCC_SetFlashLatency+0x100>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f023 0207 	bic.w	r2, r3, #7
 800571c:	4911      	ldr	r1, [pc, #68]	; (8005764 <RCC_SetFlashLatency+0x100>)
 800571e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005720:	4313      	orrs	r3, r2
 8005722:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005724:	f7fc fa22 	bl	8001b6c <HAL_GetTick>
 8005728:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800572a:	e008      	b.n	800573e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800572c:	f7fc fa1e 	bl	8001b6c <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e007      	b.n	800574e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800573e:	4b09      	ldr	r3, [pc, #36]	; (8005764 <RCC_SetFlashLatency+0x100>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005748:	429a      	cmp	r2, r3
 800574a:	d1ef      	bne.n	800572c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3738      	adds	r7, #56	; 0x38
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	0800e708 	.word	0x0800e708
 800575c:	0800e710 	.word	0x0800e710
 8005760:	0800e718 	.word	0x0800e718
 8005764:	58004000 	.word	0x58004000

08005768 <LL_RCC_LSE_IsReady>:
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800576c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b02      	cmp	r3, #2
 800577a:	d101      	bne.n	8005780 <LL_RCC_LSE_IsReady+0x18>
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <LL_RCC_LSE_IsReady+0x1a>
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	46bd      	mov	sp, r7
 8005786:	bc80      	pop	{r7}
 8005788:	4770      	bx	lr

0800578a <LL_RCC_SetUSARTClockSource>:
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005796:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	43db      	mvns	r3, r3
 80057a0:	401a      	ands	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bc80      	pop	{r7}
 80057b8:	4770      	bx	lr

080057ba <LL_RCC_SetI2SClockSource>:
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80057c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr

080057e4 <LL_RCC_SetLPUARTClockSource>:
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80057ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr

0800580e <LL_RCC_SetI2CClockSource>:
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	091b      	lsrs	r3, r3, #4
 8005822:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005826:	43db      	mvns	r3, r3
 8005828:	401a      	ands	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr

08005846 <LL_RCC_SetLPTIMClockSource>:
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800584e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005852:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	0c1b      	lsrs	r3, r3, #16
 800585a:	041b      	lsls	r3, r3, #16
 800585c:	43db      	mvns	r3, r3
 800585e:	401a      	ands	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	041b      	lsls	r3, r3, #16
 8005864:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <LL_RCC_SetRNGClockSource>:
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005888:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800588c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	bc80      	pop	{r7}
 80058a0:	4770      	bx	lr

080058a2 <LL_RCC_SetADCClockSource>:
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80058aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <LL_RCC_SetRTCClockSource>:
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80058d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bc80      	pop	{r7}
 80058f4:	4770      	bx	lr

080058f6 <LL_RCC_GetRTCClockSource>:
{
 80058f6:	b480      	push	{r7}
 80058f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80058fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005906:	4618      	mov	r0, r3
 8005908:	46bd      	mov	sp, r7
 800590a:	bc80      	pop	{r7}
 800590c:	4770      	bx	lr

0800590e <LL_RCC_ForceBackupDomainReset>:
{
 800590e:	b480      	push	{r7}
 8005910:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800591e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005926:	bf00      	nop
 8005928:	46bd      	mov	sp, r7
 800592a:	bc80      	pop	{r7}
 800592c:	4770      	bx	lr

0800592e <LL_RCC_ReleaseBackupDomainReset>:
{
 800592e:	b480      	push	{r7}
 8005930:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800593e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005946:	bf00      	nop
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr
	...

08005950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800595c:	2300      	movs	r3, #0
 800595e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005960:	2300      	movs	r3, #0
 8005962:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d058      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005970:	f7fe fd1e 	bl	80043b0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005974:	f7fc f8fa 	bl	8001b6c <HAL_GetTick>
 8005978:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800597a:	e009      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597c:	f7fc f8f6 	bl	8001b6c <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d902      	bls.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	74fb      	strb	r3, [r7, #19]
        break;
 800598e:	e006      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005990:	4b7b      	ldr	r3, [pc, #492]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800599c:	d1ee      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800599e:	7cfb      	ldrb	r3, [r7, #19]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d13c      	bne.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80059a4:	f7ff ffa7 	bl	80058f6 <LL_RCC_GetRTCClockSource>
 80059a8:	4602      	mov	r2, r0
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d00f      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059be:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059c0:	f7ff ffa5 	bl	800590e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059c4:	f7ff ffb3 	bl	800592e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d014      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059dc:	f7fc f8c6 	bl	8001b6c <HAL_GetTick>
 80059e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80059e2:	e00b      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e4:	f7fc f8c2 	bl	8001b6c <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d902      	bls.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	74fb      	strb	r3, [r7, #19]
            break;
 80059fa:	e004      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80059fc:	f7ff feb4 	bl	8005768 <LL_RCC_LSE_IsReady>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d1ee      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005a06:	7cfb      	ldrb	r3, [r7, #19]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d105      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff ff5b 	bl	80058cc <LL_RCC_SetRTCClockSource>
 8005a16:	e004      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a18:	7cfb      	ldrb	r3, [r7, #19]
 8005a1a:	74bb      	strb	r3, [r7, #18]
 8005a1c:	e001      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1e:	7cfb      	ldrb	r3, [r7, #19]
 8005a20:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d004      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fea9 	bl	800578a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d004      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff fe9e 	bl	800578a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d004      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff fec0 	bl	80057e4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d004      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fee6 	bl	8005846 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff fedb 	bl	8005846 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff fed0 	bl	8005846 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d004      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff fea9 	bl	800580e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d004      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fe9e 	bl	800580e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d004      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fe93 	bl	800580e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d011      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff fe5e 	bl	80057ba <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b06:	d107      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d010      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff fea5 	bl	8005878 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d107      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b44:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d011      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff fea3 	bl	80058a2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b64:	d107      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b74:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005b76:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	58000400 	.word	0x58000400

08005b84 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d068      	beq.n	8005c68 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7fb faa6 	bl	80010fc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bb8:	4b2e      	ldr	r3, [pc, #184]	; (8005c74 <HAL_RTC_Init+0xf0>)
 8005bba:	22ca      	movs	r2, #202	; 0xca
 8005bbc:	625a      	str	r2, [r3, #36]	; 0x24
 8005bbe:	4b2d      	ldr	r3, [pc, #180]	; (8005c74 <HAL_RTC_Init+0xf0>)
 8005bc0:	2253      	movs	r2, #83	; 0x53
 8005bc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fa0f 	bl	8005fe8 <RTC_EnterInitMode>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d13f      	bne.n	8005c54 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005bd4:	4b27      	ldr	r3, [pc, #156]	; (8005c74 <HAL_RTC_Init+0xf0>)
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	4a26      	ldr	r2, [pc, #152]	; (8005c74 <HAL_RTC_Init+0xf0>)
 8005bda:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005be2:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005be4:	4b23      	ldr	r3, [pc, #140]	; (8005c74 <HAL_RTC_Init+0xf0>)
 8005be6:	699a      	ldr	r2, [r3, #24]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6859      	ldr	r1, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	4319      	orrs	r1, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	430b      	orrs	r3, r1
 8005bf8:	491e      	ldr	r1, [pc, #120]	; (8005c74 <HAL_RTC_Init+0xf0>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	041b      	lsls	r3, r3, #16
 8005c08:	491a      	ldr	r1, [pc, #104]	; (8005c74 <HAL_RTC_Init+0xf0>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005c0e:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <HAL_RTC_Init+0xf0>)
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1e:	430b      	orrs	r3, r1
 8005c20:	4914      	ldr	r1, [pc, #80]	; (8005c74 <HAL_RTC_Init+0xf0>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fa12 	bl	8006050 <RTC_ExitInitMode>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10e      	bne.n	8005c54 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8005c36:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <HAL_RTC_Init+0xf0>)
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a19      	ldr	r1, [r3, #32]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	4319      	orrs	r1, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	4909      	ldr	r1, [pc, #36]	; (8005c74 <HAL_RTC_Init+0xf0>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c54:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <HAL_RTC_Init+0xf0>)
 8005c56:	22ff      	movs	r2, #255	; 0xff
 8005c58:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d103      	bne.n	8005c68 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40002800 	.word	0x40002800

08005c78 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005c78:	b590      	push	{r4, r7, lr}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d101      	bne.n	8005c96 <HAL_RTC_SetAlarm_IT+0x1e>
 8005c92:	2302      	movs	r3, #2
 8005c94:	e0f3      	b.n	8005e7e <HAL_RTC_SetAlarm_IT+0x206>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005ca6:	4b78      	ldr	r3, [pc, #480]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cae:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb6:	d06a      	beq.n	8005d8e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d13a      	bne.n	8005d34 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005cbe:	4b72      	ldr	r3, [pc, #456]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d102      	bne.n	8005cd0 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 f9f5 	bl	80060cc <RTC_ByteToBcd2>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	785b      	ldrb	r3, [r3, #1]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 f9ee 	bl	80060cc <RTC_ByteToBcd2>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005cf4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	789b      	ldrb	r3, [r3, #2]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 f9e6 	bl	80060cc <RTC_ByteToBcd2>
 8005d00:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005d02:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	78db      	ldrb	r3, [r3, #3]
 8005d0a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005d0c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f9d8 	bl	80060cc <RTC_ByteToBcd2>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005d20:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005d28:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	e02c      	b.n	8005d8e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8005d3c:	d00d      	beq.n	8005d5a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d46:	d008      	beq.n	8005d5a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005d48:	4b4f      	ldr	r3, [pc, #316]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2200      	movs	r2, #0
 8005d58:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d66:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005d6c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	78db      	ldrb	r3, [r3, #3]
 8005d72:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005d74:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d7c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005d7e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005d84:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d8e:	4b3e      	ldr	r3, [pc, #248]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005d90:	22ca      	movs	r2, #202	; 0xca
 8005d92:	625a      	str	r2, [r3, #36]	; 0x24
 8005d94:	4b3c      	ldr	r3, [pc, #240]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005d96:	2253      	movs	r2, #83	; 0x53
 8005d98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da2:	d12c      	bne.n	8005dfe <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005da4:	4b38      	ldr	r3, [pc, #224]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	4a37      	ldr	r2, [pc, #220]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005daa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005dae:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005db0:	4b35      	ldr	r3, [pc, #212]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dbc:	d107      	bne.n	8005dce <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	4930      	ldr	r1, [pc, #192]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	644b      	str	r3, [r1, #68]	; 0x44
 8005dcc:	e006      	b.n	8005ddc <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005dce:	4a2e      	ldr	r2, [pc, #184]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005dd4:	4a2c      	ldr	r2, [pc, #176]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005ddc:	4a2a      	ldr	r2, [pc, #168]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	f043 0201 	orr.w	r2, r3, #1
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005df0:	4b25      	ldr	r3, [pc, #148]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	4a24      	ldr	r2, [pc, #144]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005df6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8005dfa:	6193      	str	r3, [r2, #24]
 8005dfc:	e02b      	b.n	8005e56 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005dfe:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	4a21      	ldr	r2, [pc, #132]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005e04:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8005e08:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005e0a:	4b1f      	ldr	r3, [pc, #124]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e16:	d107      	bne.n	8005e28 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	699a      	ldr	r2, [r3, #24]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	4919      	ldr	r1, [pc, #100]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e26:	e006      	b.n	8005e36 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005e28:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005e2e:	4a16      	ldr	r2, [pc, #88]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8005e36:	4a14      	ldr	r2, [pc, #80]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	f043 0202 	orr.w	r2, r3, #2
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005e4a:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	4a0e      	ldr	r2, [pc, #56]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005e50:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8005e54:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005e56:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <HAL_RTC_SetAlarm_IT+0x214>)
 8005e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e5c:	4a0b      	ldr	r2, [pc, #44]	; (8005e8c <HAL_RTC_SetAlarm_IT+0x214>)
 8005e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e62:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e66:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <HAL_RTC_SetAlarm_IT+0x210>)
 8005e68:	22ff      	movs	r2, #255	; 0xff
 8005e6a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd90      	pop	{r4, r7, pc}
 8005e86:	bf00      	nop
 8005e88:	40002800 	.word	0x40002800
 8005e8c:	58000800 	.word	0x58000800

08005e90 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_RTC_DeactivateAlarm+0x18>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e048      	b.n	8005f3a <HAL_RTC_DeactivateAlarm+0xaa>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eb8:	4b22      	ldr	r3, [pc, #136]	; (8005f44 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005eba:	22ca      	movs	r2, #202	; 0xca
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24
 8005ebe:	4b21      	ldr	r3, [pc, #132]	; (8005f44 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005ec0:	2253      	movs	r2, #83	; 0x53
 8005ec2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eca:	d115      	bne.n	8005ef8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005ecc:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	4a1c      	ldr	r2, [pc, #112]	; (8005f44 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005ed2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005ed6:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005ed8:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005edc:	4a19      	ldr	r2, [pc, #100]	; (8005f44 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ee2:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	f023 0201 	bic.w	r2, r3, #1
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005ef0:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ef6:	e014      	b.n	8005f22 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005ef8:	4b12      	ldr	r3, [pc, #72]	; (8005f44 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	4a11      	ldr	r2, [pc, #68]	; (8005f44 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005efe:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8005f02:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8005f04:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f08:	4a0e      	ldr	r2, [pc, #56]	; (8005f44 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005f0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f0e:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	f023 0202 	bic.w	r2, r3, #2
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005f1c:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005f1e:	2202      	movs	r2, #2
 8005f20:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f22:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr
 8005f44:	40002800 	.word	0x40002800

08005f48 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8005f50:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005f52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	4013      	ands	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d005      	beq.n	8005f72 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005f66:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005f68:	2201      	movs	r2, #1
 8005f6a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7fc f890 	bl	8002092 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005f7e:	2202      	movs	r2, #2
 8005f80:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f94a 	bl	800621c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8005f90:	bf00      	nop
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40002800 	.word	0x40002800

08005f9c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005fa4:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <HAL_RTC_WaitForSynchro+0x48>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4a0e      	ldr	r2, [pc, #56]	; (8005fe4 <HAL_RTC_WaitForSynchro+0x48>)
 8005faa:	f023 0320 	bic.w	r3, r3, #32
 8005fae:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005fb0:	f7fb fddc 	bl	8001b6c <HAL_GetTick>
 8005fb4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005fb6:	e009      	b.n	8005fcc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fb8:	f7fb fdd8 	bl	8001b6c <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fc6:	d901      	bls.n	8005fcc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e006      	b.n	8005fda <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005fcc:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <HAL_RTC_WaitForSynchro+0x48>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0320 	and.w	r3, r3, #32
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0ef      	beq.n	8005fb8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40002800 	.word	0x40002800

08005fe8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005ff4:	4b15      	ldr	r3, [pc, #84]	; (800604c <RTC_EnterInitMode+0x64>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d120      	bne.n	8006042 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006000:	4b12      	ldr	r3, [pc, #72]	; (800604c <RTC_EnterInitMode+0x64>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4a11      	ldr	r2, [pc, #68]	; (800604c <RTC_EnterInitMode+0x64>)
 8006006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800600c:	f7fb fdae 	bl	8001b6c <HAL_GetTick>
 8006010:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006012:	e00d      	b.n	8006030 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006014:	f7fb fdaa 	bl	8001b6c <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006022:	d905      	bls.n	8006030 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2203      	movs	r2, #3
 800602c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006030:	4b06      	ldr	r3, [pc, #24]	; (800604c <RTC_EnterInitMode+0x64>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <RTC_EnterInitMode+0x5a>
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	2b03      	cmp	r3, #3
 8006040:	d1e8      	bne.n	8006014 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006042:	7bfb      	ldrb	r3, [r7, #15]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40002800 	.word	0x40002800

08006050 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800605c:	4b1a      	ldr	r3, [pc, #104]	; (80060c8 <RTC_ExitInitMode+0x78>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	4a19      	ldr	r2, [pc, #100]	; (80060c8 <RTC_ExitInitMode+0x78>)
 8006062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006066:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006068:	4b17      	ldr	r3, [pc, #92]	; (80060c8 <RTC_ExitInitMode+0x78>)
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10c      	bne.n	800608e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7ff ff91 	bl	8005f9c <HAL_RTC_WaitForSynchro>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d01e      	beq.n	80060be <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2203      	movs	r2, #3
 8006084:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	73fb      	strb	r3, [r7, #15]
 800608c:	e017      	b.n	80060be <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800608e:	4b0e      	ldr	r3, [pc, #56]	; (80060c8 <RTC_ExitInitMode+0x78>)
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	4a0d      	ldr	r2, [pc, #52]	; (80060c8 <RTC_ExitInitMode+0x78>)
 8006094:	f023 0320 	bic.w	r3, r3, #32
 8006098:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff ff7e 	bl	8005f9c <HAL_RTC_WaitForSynchro>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d005      	beq.n	80060b2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2203      	movs	r2, #3
 80060aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80060b2:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <RTC_ExitInitMode+0x78>)
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	4a04      	ldr	r2, [pc, #16]	; (80060c8 <RTC_ExitInitMode+0x78>)
 80060b8:	f043 0320 	orr.w	r3, r3, #32
 80060bc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80060be:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40002800 	.word	0x40002800

080060cc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	4603      	mov	r3, r0
 80060d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80060da:	79fb      	ldrb	r3, [r7, #7]
 80060dc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80060de:	e005      	b.n	80060ec <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3301      	adds	r3, #1
 80060e4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80060e6:	7afb      	ldrb	r3, [r7, #11]
 80060e8:	3b0a      	subs	r3, #10
 80060ea:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80060ec:	7afb      	ldrb	r3, [r7, #11]
 80060ee:	2b09      	cmp	r3, #9
 80060f0:	d8f6      	bhi.n	80060e0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	7afb      	ldrb	r3, [r7, #11]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	b2db      	uxtb	r3, r3
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	bc80      	pop	{r7}
 8006108:	4770      	bx	lr
	...

0800610c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800611a:	2b01      	cmp	r3, #1
 800611c:	d101      	bne.n	8006122 <HAL_RTCEx_EnableBypassShadow+0x16>
 800611e:	2302      	movs	r3, #2
 8006120:	e01f      	b.n	8006162 <HAL_RTCEx_EnableBypassShadow+0x56>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2202      	movs	r2, #2
 800612e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006132:	4b0e      	ldr	r3, [pc, #56]	; (800616c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006134:	22ca      	movs	r2, #202	; 0xca
 8006136:	625a      	str	r2, [r3, #36]	; 0x24
 8006138:	4b0c      	ldr	r3, [pc, #48]	; (800616c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800613a:	2253      	movs	r2, #83	; 0x53
 800613c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800613e:	4b0b      	ldr	r3, [pc, #44]	; (800616c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	4a0a      	ldr	r2, [pc, #40]	; (800616c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006144:	f043 0320 	orr.w	r3, r3, #32
 8006148:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800614a:	4b08      	ldr	r3, [pc, #32]	; (800616c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800614c:	22ff      	movs	r2, #255	; 0xff
 800614e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	bc80      	pop	{r7}
 800616a:	4770      	bx	lr
 800616c:	40002800 	.word	0x40002800

08006170 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_RTCEx_SetSSRU_IT+0x16>
 8006182:	2302      	movs	r3, #2
 8006184:	e027      	b.n	80061d6 <HAL_RTCEx_SetSSRU_IT+0x66>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2202      	movs	r2, #2
 8006192:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006196:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006198:	22ca      	movs	r2, #202	; 0xca
 800619a:	625a      	str	r2, [r3, #36]	; 0x24
 800619c:	4b10      	ldr	r3, [pc, #64]	; (80061e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800619e:	2253      	movs	r2, #83	; 0x53
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80061a2:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	4a0e      	ldr	r2, [pc, #56]	; (80061e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80061a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ac:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80061ae:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80061b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061b4:	4a0b      	ldr	r2, [pc, #44]	; (80061e4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80061b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061be:	4b08      	ldr	r3, [pc, #32]	; (80061e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80061c0:	22ff      	movs	r2, #255	; 0xff
 80061c2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr
 80061e0:	40002800 	.word	0x40002800
 80061e4:	58000800 	.word	0x58000800

080061e8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80061f0:	4b09      	ldr	r3, [pc, #36]	; (8006218 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80061f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80061fc:	4b06      	ldr	r3, [pc, #24]	; (8006218 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80061fe:	2240      	movs	r2, #64	; 0x40
 8006200:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fb ff4f 	bl	80020a6 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40002800 	.word	0x40002800

0800621c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr
	...

08006230 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800623c:	4b07      	ldr	r3, [pc, #28]	; (800625c <HAL_RTCEx_BKUPWrite+0x2c>)
 800623e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	4413      	add	r3, r2
 8006248:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	601a      	str	r2, [r3, #0]
}
 8006250:	bf00      	nop
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	bc80      	pop	{r7}
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	4000b100 	.word	0x4000b100

08006260 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800626a:	4b07      	ldr	r3, [pc, #28]	; (8006288 <HAL_RTCEx_BKUPRead+0x28>)
 800626c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	4000b100 	.word	0x4000b100

0800628c <LL_PWR_SetRadioBusyTrigger>:
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006294:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800629c:	4904      	ldr	r1, [pc, #16]	; (80062b0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	608b      	str	r3, [r1, #8]
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	58000400 	.word	0x58000400

080062b4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80062b8:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80062ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062be:	4a04      	ldr	r2, [pc, #16]	; (80062d0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80062c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80062c8:	bf00      	nop
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr
 80062d0:	58000400 	.word	0x58000400

080062d4 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80062d8:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80062da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062de:	4a04      	ldr	r2, [pc, #16]	; (80062f0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80062e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80062e8:	bf00      	nop
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr
 80062f0:	58000400 	.word	0x58000400

080062f4 <LL_PWR_ClearFlag_RFBUSY>:
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80062f8:	4b03      	ldr	r3, [pc, #12]	; (8006308 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80062fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062fe:	619a      	str	r2, [r3, #24]
}
 8006300:	bf00      	nop
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr
 8006308:	58000400 	.word	0x58000400

0800630c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006310:	4b06      	ldr	r3, [pc, #24]	; (800632c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b02      	cmp	r3, #2
 800631a:	d101      	bne.n	8006320 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800631c:	2301      	movs	r3, #1
 800631e:	e000      	b.n	8006322 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	46bd      	mov	sp, r7
 8006326:	bc80      	pop	{r7}
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	58000400 	.word	0x58000400

08006330 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006334:	4b06      	ldr	r3, [pc, #24]	; (8006350 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b04      	cmp	r3, #4
 800633e:	d101      	bne.n	8006344 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	46bd      	mov	sp, r7
 800634a:	bc80      	pop	{r7}
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	58000400 	.word	0x58000400

08006354 <LL_RCC_RF_DisableReset>:
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800635c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006364:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006368:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800636c:	bf00      	nop
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr

08006374 <LL_RCC_IsRFUnderReset>:
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006388:	d101      	bne.n	800638e <LL_RCC_IsRFUnderReset+0x1a>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <LL_RCC_IsRFUnderReset+0x1c>
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	46bd      	mov	sp, r7
 8006394:	bc80      	pop	{r7}
 8006396:	4770      	bx	lr

08006398 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80063a0:	4b06      	ldr	r3, [pc, #24]	; (80063bc <LL_EXTI_EnableIT_32_63+0x24>)
 80063a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80063a6:	4905      	ldr	r1, [pc, #20]	; (80063bc <LL_EXTI_EnableIT_32_63+0x24>)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	58000800 	.word	0x58000800

080063c0 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d103      	bne.n	80063d6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	73fb      	strb	r3, [r7, #15]
    return status;
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	e04b      	b.n	800646e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	799b      	ldrb	r3, [r3, #6]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d105      	bne.n	80063f0 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7fa feec 	bl	80011c8 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80063f6:	f7ff ffad 	bl	8006354 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80063fa:	4b1f      	ldr	r3, [pc, #124]	; (8006478 <HAL_SUBGHZ_Init+0xb8>)
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	4613      	mov	r3, r2
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	1a9b      	subs	r3, r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	0cdb      	lsrs	r3, r3, #19
 8006408:	2264      	movs	r2, #100	; 0x64
 800640a:	fb02 f303 	mul.w	r3, r2, r3
 800640e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d105      	bne.n	8006422 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	609a      	str	r2, [r3, #8]
      break;
 8006420:	e007      	b.n	8006432 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	3b01      	subs	r3, #1
 8006426:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006428:	f7ff ffa4 	bl	8006374 <LL_RCC_IsRFUnderReset>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1ee      	bne.n	8006410 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8006432:	f7ff ff3f 	bl	80062b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006436:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800643a:	f7ff ffad 	bl	8006398 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800643e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006442:	f7ff ff23 	bl	800628c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006446:	f7ff ff55 	bl	80062f4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4618      	mov	r0, r3
 8006456:	f000 faad 	bl	80069b4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	719a      	strb	r2, [r3, #6]

  return status;
 800646c:	7bfb      	ldrb	r3, [r7, #15]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20000004 	.word	0x20000004

0800647c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	607a      	str	r2, [r7, #4]
 8006486:	461a      	mov	r2, r3
 8006488:	460b      	mov	r3, r1
 800648a:	817b      	strh	r3, [r7, #10]
 800648c:	4613      	mov	r3, r2
 800648e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	799b      	ldrb	r3, [r3, #6]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b01      	cmp	r3, #1
 8006498:	d14a      	bne.n	8006530 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	795b      	ldrb	r3, [r3, #5]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e045      	b.n	8006532 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2202      	movs	r2, #2
 80064b0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fb4c 	bl	8006b50 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80064b8:	f7ff ff0c 	bl	80062d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80064bc:	210d      	movs	r1, #13
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 fa98 	bl	80069f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80064c4:	897b      	ldrh	r3, [r7, #10]
 80064c6:	0a1b      	lsrs	r3, r3, #8
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	4619      	mov	r1, r3
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 fa90 	bl	80069f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80064d4:	897b      	ldrh	r3, [r7, #10]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	4619      	mov	r1, r3
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 fa8a 	bl	80069f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80064e0:	2300      	movs	r3, #0
 80064e2:	82bb      	strh	r3, [r7, #20]
 80064e4:	e00a      	b.n	80064fc <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80064e6:	8abb      	ldrh	r3, [r7, #20]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	4413      	add	r3, r2
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	4619      	mov	r1, r3
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 fa7f 	bl	80069f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80064f6:	8abb      	ldrh	r3, [r7, #20]
 80064f8:	3301      	adds	r3, #1
 80064fa:	82bb      	strh	r3, [r7, #20]
 80064fc:	8aba      	ldrh	r2, [r7, #20]
 80064fe:	893b      	ldrh	r3, [r7, #8]
 8006500:	429a      	cmp	r2, r3
 8006502:	d3f0      	bcc.n	80064e6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006504:	f7ff fed6 	bl	80062b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 fb45 	bl	8006b98 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	75fb      	strb	r3, [r7, #23]
 800651a:	e001      	b.n	8006520 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	715a      	strb	r2, [r3, #5]

    return status;
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	e000      	b.n	8006532 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006530:	2302      	movs	r3, #2
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b088      	sub	sp, #32
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	461a      	mov	r2, r3
 8006546:	460b      	mov	r3, r1
 8006548:	817b      	strh	r3, [r7, #10]
 800654a:	4613      	mov	r3, r2
 800654c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	799b      	ldrb	r3, [r3, #6]
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b01      	cmp	r3, #1
 800655a:	d14a      	bne.n	80065f2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	795b      	ldrb	r3, [r3, #5]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006564:	2302      	movs	r3, #2
 8006566:	e045      	b.n	80065f4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2201      	movs	r2, #1
 800656c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 faee 	bl	8006b50 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006574:	f7ff feae 	bl	80062d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006578:	211d      	movs	r1, #29
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fa3a 	bl	80069f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006580:	897b      	ldrh	r3, [r7, #10]
 8006582:	0a1b      	lsrs	r3, r3, #8
 8006584:	b29b      	uxth	r3, r3
 8006586:	b2db      	uxtb	r3, r3
 8006588:	4619      	mov	r1, r3
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 fa32 	bl	80069f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006590:	897b      	ldrh	r3, [r7, #10]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	4619      	mov	r1, r3
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fa2c 	bl	80069f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800659c:	2100      	movs	r1, #0
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fa28 	bl	80069f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80065a4:	2300      	movs	r3, #0
 80065a6:	82fb      	strh	r3, [r7, #22]
 80065a8:	e009      	b.n	80065be <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80065aa:	69b9      	ldr	r1, [r7, #24]
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 fa77 	bl	8006aa0 <SUBGHZSPI_Receive>
      pData++;
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	3301      	adds	r3, #1
 80065b6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80065b8:	8afb      	ldrh	r3, [r7, #22]
 80065ba:	3301      	adds	r3, #1
 80065bc:	82fb      	strh	r3, [r7, #22]
 80065be:	8afa      	ldrh	r2, [r7, #22]
 80065c0:	893b      	ldrh	r3, [r7, #8]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d3f1      	bcc.n	80065aa <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80065c6:	f7ff fe75 	bl	80062b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 fae4 	bl	8006b98 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e001      	b.n	80065e2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2201      	movs	r2, #1
 80065e6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	715a      	strb	r2, [r3, #5]

    return status;
 80065ee:	7ffb      	ldrb	r3, [r7, #31]
 80065f0:	e000      	b.n	80065f4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80065f2:	2302      	movs	r3, #2
  }
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3720      	adds	r7, #32
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	607a      	str	r2, [r7, #4]
 8006606:	461a      	mov	r2, r3
 8006608:	460b      	mov	r3, r1
 800660a:	72fb      	strb	r3, [r7, #11]
 800660c:	4613      	mov	r3, r2
 800660e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	799b      	ldrb	r3, [r3, #6]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b01      	cmp	r3, #1
 8006618:	d14a      	bne.n	80066b0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	795b      	ldrb	r3, [r3, #5]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d101      	bne.n	8006626 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006622:	2302      	movs	r3, #2
 8006624:	e045      	b.n	80066b2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2201      	movs	r2, #1
 800662a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 fa8f 	bl	8006b50 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006632:	7afb      	ldrb	r3, [r7, #11]
 8006634:	2b84      	cmp	r3, #132	; 0x84
 8006636:	d002      	beq.n	800663e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006638:	7afb      	ldrb	r3, [r7, #11]
 800663a:	2b94      	cmp	r3, #148	; 0x94
 800663c:	d103      	bne.n	8006646 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	711a      	strb	r2, [r3, #4]
 8006644:	e002      	b.n	800664c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800664c:	f7ff fe42 	bl	80062d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006650:	7afb      	ldrb	r3, [r7, #11]
 8006652:	4619      	mov	r1, r3
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 f9cd 	bl	80069f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800665a:	2300      	movs	r3, #0
 800665c:	82bb      	strh	r3, [r7, #20]
 800665e:	e00a      	b.n	8006676 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006660:	8abb      	ldrh	r3, [r7, #20]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	4413      	add	r3, r2
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	4619      	mov	r1, r3
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 f9c2 	bl	80069f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006670:	8abb      	ldrh	r3, [r7, #20]
 8006672:	3301      	adds	r3, #1
 8006674:	82bb      	strh	r3, [r7, #20]
 8006676:	8aba      	ldrh	r2, [r7, #20]
 8006678:	893b      	ldrh	r3, [r7, #8]
 800667a:	429a      	cmp	r2, r3
 800667c:	d3f0      	bcc.n	8006660 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800667e:	f7ff fe19 	bl	80062b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006682:	7afb      	ldrb	r3, [r7, #11]
 8006684:	2b84      	cmp	r3, #132	; 0x84
 8006686:	d002      	beq.n	800668e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 fa85 	bl	8006b98 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	75fb      	strb	r3, [r7, #23]
 800669a:	e001      	b.n	80066a0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2201      	movs	r2, #1
 80066a4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	715a      	strb	r2, [r3, #5]

    return status;
 80066ac:	7dfb      	ldrb	r3, [r7, #23]
 80066ae:	e000      	b.n	80066b2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80066b0:	2302      	movs	r3, #2
  }
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b088      	sub	sp, #32
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	461a      	mov	r2, r3
 80066c6:	460b      	mov	r3, r1
 80066c8:	72fb      	strb	r3, [r7, #11]
 80066ca:	4613      	mov	r3, r2
 80066cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	799b      	ldrb	r3, [r3, #6]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d13d      	bne.n	8006758 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	795b      	ldrb	r3, [r3, #5]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80066e4:	2302      	movs	r3, #2
 80066e6:	e038      	b.n	800675a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2201      	movs	r2, #1
 80066ec:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 fa2e 	bl	8006b50 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80066f4:	f7ff fdee 	bl	80062d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80066f8:	7afb      	ldrb	r3, [r7, #11]
 80066fa:	4619      	mov	r1, r3
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f979 	bl	80069f4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006702:	2100      	movs	r1, #0
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f975 	bl	80069f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800670a:	2300      	movs	r3, #0
 800670c:	82fb      	strh	r3, [r7, #22]
 800670e:	e009      	b.n	8006724 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006710:	69b9      	ldr	r1, [r7, #24]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 f9c4 	bl	8006aa0 <SUBGHZSPI_Receive>
      pData++;
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	3301      	adds	r3, #1
 800671c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800671e:	8afb      	ldrh	r3, [r7, #22]
 8006720:	3301      	adds	r3, #1
 8006722:	82fb      	strh	r3, [r7, #22]
 8006724:	8afa      	ldrh	r2, [r7, #22]
 8006726:	893b      	ldrh	r3, [r7, #8]
 8006728:	429a      	cmp	r2, r3
 800672a:	d3f1      	bcc.n	8006710 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800672c:	f7ff fdc2 	bl	80062b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fa31 	bl	8006b98 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e001      	b.n	8006748 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2201      	movs	r2, #1
 800674c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	715a      	strb	r2, [r3, #5]

    return status;
 8006754:	7ffb      	ldrb	r3, [r7, #31]
 8006756:	e000      	b.n	800675a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006758:	2302      	movs	r3, #2
  }
}
 800675a:	4618      	mov	r0, r3
 800675c:	3720      	adds	r7, #32
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b086      	sub	sp, #24
 8006766:	af00      	add	r7, sp, #0
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	461a      	mov	r2, r3
 800676e:	460b      	mov	r3, r1
 8006770:	72fb      	strb	r3, [r7, #11]
 8006772:	4613      	mov	r3, r2
 8006774:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	799b      	ldrb	r3, [r3, #6]
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b01      	cmp	r3, #1
 800677e:	d13e      	bne.n	80067fe <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	795b      	ldrb	r3, [r3, #5]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8006788:	2302      	movs	r3, #2
 800678a:	e039      	b.n	8006800 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2201      	movs	r2, #1
 8006790:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 f9dc 	bl	8006b50 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006798:	f7ff fd9c 	bl	80062d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800679c:	210e      	movs	r1, #14
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 f928 	bl	80069f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80067a4:	7afb      	ldrb	r3, [r7, #11]
 80067a6:	4619      	mov	r1, r3
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f923 	bl	80069f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80067ae:	2300      	movs	r3, #0
 80067b0:	82bb      	strh	r3, [r7, #20]
 80067b2:	e00a      	b.n	80067ca <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80067b4:	8abb      	ldrh	r3, [r7, #20]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	4413      	add	r3, r2
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	4619      	mov	r1, r3
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f918 	bl	80069f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80067c4:	8abb      	ldrh	r3, [r7, #20]
 80067c6:	3301      	adds	r3, #1
 80067c8:	82bb      	strh	r3, [r7, #20]
 80067ca:	8aba      	ldrh	r2, [r7, #20]
 80067cc:	893b      	ldrh	r3, [r7, #8]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d3f0      	bcc.n	80067b4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80067d2:	f7ff fd6f 	bl	80062b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 f9de 	bl	8006b98 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	75fb      	strb	r3, [r7, #23]
 80067e8:	e001      	b.n	80067ee <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2201      	movs	r2, #1
 80067f2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	715a      	strb	r2, [r3, #5]

    return status;
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	e000      	b.n	8006800 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80067fe:	2302      	movs	r3, #2
  }
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b088      	sub	sp, #32
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	607a      	str	r2, [r7, #4]
 8006812:	461a      	mov	r2, r3
 8006814:	460b      	mov	r3, r1
 8006816:	72fb      	strb	r3, [r7, #11]
 8006818:	4613      	mov	r3, r2
 800681a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	799b      	ldrb	r3, [r3, #6]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b01      	cmp	r3, #1
 8006828:	d141      	bne.n	80068ae <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	795b      	ldrb	r3, [r3, #5]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d101      	bne.n	8006836 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8006832:	2302      	movs	r3, #2
 8006834:	e03c      	b.n	80068b0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f987 	bl	8006b50 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006842:	f7ff fd47 	bl	80062d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006846:	211e      	movs	r1, #30
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f8d3 	bl	80069f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800684e:	7afb      	ldrb	r3, [r7, #11]
 8006850:	4619      	mov	r1, r3
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 f8ce 	bl	80069f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006858:	2100      	movs	r1, #0
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 f8ca 	bl	80069f4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006860:	2300      	movs	r3, #0
 8006862:	82fb      	strh	r3, [r7, #22]
 8006864:	e009      	b.n	800687a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006866:	69b9      	ldr	r1, [r7, #24]
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f919 	bl	8006aa0 <SUBGHZSPI_Receive>
      pData++;
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	3301      	adds	r3, #1
 8006872:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006874:	8afb      	ldrh	r3, [r7, #22]
 8006876:	3301      	adds	r3, #1
 8006878:	82fb      	strh	r3, [r7, #22]
 800687a:	8afa      	ldrh	r2, [r7, #22]
 800687c:	893b      	ldrh	r3, [r7, #8]
 800687e:	429a      	cmp	r2, r3
 8006880:	d3f1      	bcc.n	8006866 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006882:	f7ff fd17 	bl	80062b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 f986 	bl	8006b98 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	77fb      	strb	r3, [r7, #31]
 8006898:	e001      	b.n	800689e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2201      	movs	r2, #1
 80068a2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	715a      	strb	r2, [r3, #5]

    return status;
 80068aa:	7ffb      	ldrb	r3, [r7, #31]
 80068ac:	e000      	b.n	80068b0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80068ae:	2302      	movs	r3, #2
  }
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3720      	adds	r7, #32
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 80068c0:	2300      	movs	r3, #0
 80068c2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80068c4:	f107 020c 	add.w	r2, r7, #12
 80068c8:	2302      	movs	r3, #2
 80068ca:	2112      	movs	r1, #18
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff fef4 	bl	80066ba <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 80068d2:	7b3b      	ldrb	r3, [r7, #12]
 80068d4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 80068d6:	89fb      	ldrh	r3, [r7, #14]
 80068d8:	021b      	lsls	r3, r3, #8
 80068da:	b21a      	sxth	r2, r3
 80068dc:	7b7b      	ldrb	r3, [r7, #13]
 80068de:	b21b      	sxth	r3, r3
 80068e0:	4313      	orrs	r3, r2
 80068e2:	b21b      	sxth	r3, r3
 80068e4:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80068e6:	89fb      	ldrh	r3, [r7, #14]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f005 f9ab 	bl	800bc4c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80068f6:	89fb      	ldrh	r3, [r7, #14]
 80068f8:	085b      	lsrs	r3, r3, #1
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f005 f9b0 	bl	800bc68 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006908:	89fb      	ldrh	r3, [r7, #14]
 800690a:	089b      	lsrs	r3, r3, #2
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f005 f9ff 	bl	800bd18 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800691a:	89fb      	ldrh	r3, [r7, #14]
 800691c:	08db      	lsrs	r3, r3, #3
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f005 fa04 	bl	800bd34 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800692c:	89fb      	ldrh	r3, [r7, #14]
 800692e:	091b      	lsrs	r3, r3, #4
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f005 fa09 	bl	800bd50 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800693e:	89fb      	ldrh	r3, [r7, #14]
 8006940:	095b      	lsrs	r3, r3, #5
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f005 f9d6 	bl	800bcfc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006950:	89fb      	ldrh	r3, [r7, #14]
 8006952:	099b      	lsrs	r3, r3, #6
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f005 f991 	bl	800bc84 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006962:	89fb      	ldrh	r3, [r7, #14]
 8006964:	09db      	lsrs	r3, r3, #7
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00e      	beq.n	800698c <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800696e:	89fb      	ldrh	r3, [r7, #14]
 8006970:	0a1b      	lsrs	r3, r3, #8
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d004      	beq.n	8006984 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800697a:	2101      	movs	r1, #1
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f005 f98f 	bl	800bca0 <HAL_SUBGHZ_CADStatusCallback>
 8006982:	e003      	b.n	800698c <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006984:	2100      	movs	r1, #0
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f005 f98a 	bl	800bca0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800698c:	89fb      	ldrh	r3, [r7, #14]
 800698e:	0a5b      	lsrs	r3, r3, #9
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f005 f99f 	bl	800bcdc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800699e:	f107 020c 	add.w	r2, r7, #12
 80069a2:	2302      	movs	r3, #2
 80069a4:	2102      	movs	r1, #2
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff fe28 	bl	80065fc <HAL_SUBGHZ_ExecSetCmd>
}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80069bc:	4b0c      	ldr	r3, [pc, #48]	; (80069f0 <SUBGHZSPI_Init+0x3c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a0b      	ldr	r2, [pc, #44]	; (80069f0 <SUBGHZSPI_Init+0x3c>)
 80069c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069c6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80069c8:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <SUBGHZSPI_Init+0x3c>)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80069d0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80069d2:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <SUBGHZSPI_Init+0x3c>)
 80069d4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80069d8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80069da:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <SUBGHZSPI_Init+0x3c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a04      	ldr	r2, [pc, #16]	; (80069f0 <SUBGHZSPI_Init+0x3c>)
 80069e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069e4:	6013      	str	r3, [r2, #0]
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr
 80069f0:	58010000 	.word	0x58010000

080069f4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006a04:	4b23      	ldr	r3, [pc, #140]	; (8006a94 <SUBGHZSPI_Transmit+0xa0>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	0cdb      	lsrs	r3, r3, #19
 8006a12:	2264      	movs	r2, #100	; 0x64
 8006a14:	fb02 f303 	mul.w	r3, r2, r3
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d105      	bne.n	8006a2c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	609a      	str	r2, [r3, #8]
      break;
 8006a2a:	e008      	b.n	8006a3e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006a32:	4b19      	ldr	r3, [pc, #100]	; (8006a98 <SUBGHZSPI_Transmit+0xa4>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d1ed      	bne.n	8006a1a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006a3e:	4b17      	ldr	r3, [pc, #92]	; (8006a9c <SUBGHZSPI_Transmit+0xa8>)
 8006a40:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	78fa      	ldrb	r2, [r7, #3]
 8006a46:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006a48:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <SUBGHZSPI_Transmit+0xa0>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	1a9b      	subs	r3, r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	0cdb      	lsrs	r3, r3, #19
 8006a56:	2264      	movs	r2, #100	; 0x64
 8006a58:	fb02 f303 	mul.w	r3, r2, r3
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d105      	bne.n	8006a70 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	609a      	str	r2, [r3, #8]
      break;
 8006a6e:	e008      	b.n	8006a82 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006a76:	4b08      	ldr	r3, [pc, #32]	; (8006a98 <SUBGHZSPI_Transmit+0xa4>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d1ed      	bne.n	8006a5e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006a82:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <SUBGHZSPI_Transmit+0xa4>)
 8006a84:	68db      	ldr	r3, [r3, #12]

  return status;
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	20000004 	.word	0x20000004
 8006a98:	58010000 	.word	0x58010000
 8006a9c:	5801000c 	.word	0x5801000c

08006aa0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006aae:	4b25      	ldr	r3, [pc, #148]	; (8006b44 <SUBGHZSPI_Receive+0xa4>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	00db      	lsls	r3, r3, #3
 8006ab6:	1a9b      	subs	r3, r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	0cdb      	lsrs	r3, r3, #19
 8006abc:	2264      	movs	r2, #100	; 0x64
 8006abe:	fb02 f303 	mul.w	r3, r2, r3
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d105      	bne.n	8006ad6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	609a      	str	r2, [r3, #8]
      break;
 8006ad4:	e008      	b.n	8006ae8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006adc:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <SUBGHZSPI_Receive+0xa8>)
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d1ed      	bne.n	8006ac4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006ae8:	4b18      	ldr	r3, [pc, #96]	; (8006b4c <SUBGHZSPI_Receive+0xac>)
 8006aea:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	22ff      	movs	r2, #255	; 0xff
 8006af0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006af2:	4b14      	ldr	r3, [pc, #80]	; (8006b44 <SUBGHZSPI_Receive+0xa4>)
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	4613      	mov	r3, r2
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	1a9b      	subs	r3, r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	0cdb      	lsrs	r3, r3, #19
 8006b00:	2264      	movs	r2, #100	; 0x64
 8006b02:	fb02 f303 	mul.w	r3, r2, r3
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d105      	bne.n	8006b1a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	609a      	str	r2, [r3, #8]
      break;
 8006b18:	e008      	b.n	8006b2c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006b20:	4b09      	ldr	r3, [pc, #36]	; (8006b48 <SUBGHZSPI_Receive+0xa8>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d1ed      	bne.n	8006b08 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006b2c:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <SUBGHZSPI_Receive+0xa8>)
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	701a      	strb	r2, [r3, #0]

  return status;
 8006b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20000004 	.word	0x20000004
 8006b48:	58010000 	.word	0x58010000
 8006b4c:	5801000c 	.word	0x5801000c

08006b50 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	791b      	ldrb	r3, [r3, #4]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d111      	bne.n	8006b84 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006b60:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <SUBGHZ_CheckDeviceReady+0x44>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	4613      	mov	r3, r2
 8006b66:	005b      	lsls	r3, r3, #1
 8006b68:	4413      	add	r3, r2
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	0c1b      	lsrs	r3, r3, #16
 8006b6e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006b70:	f7ff fbb0 	bl	80062d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1f9      	bne.n	8006b74 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006b80:	f7ff fb98 	bl	80062b4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f807 	bl	8006b98 <SUBGHZ_WaitOnBusy>
 8006b8a:	4603      	mov	r3, r0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20000004 	.word	0x20000004

08006b98 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006ba4:	4b12      	ldr	r3, [pc, #72]	; (8006bf0 <SUBGHZ_WaitOnBusy+0x58>)
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	4413      	add	r3, r2
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	0d1b      	lsrs	r3, r3, #20
 8006bb2:	2264      	movs	r2, #100	; 0x64
 8006bb4:	fb02 f303 	mul.w	r3, r2, r3
 8006bb8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8006bba:	f7ff fbb9 	bl	8006330 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8006bbe:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d105      	bne.n	8006bd2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	609a      	str	r2, [r3, #8]
      break;
 8006bd0:	e009      	b.n	8006be6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006bd8:	f7ff fb98 	bl	800630c <LL_PWR_IsActiveFlag_RFBUSYS>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	4013      	ands	r3, r2
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d0e9      	beq.n	8006bba <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8006be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	20000004 	.word	0x20000004

08006bf4 <LL_RCC_GetUSARTClockSource>:
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	401a      	ands	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	041b      	lsls	r3, r3, #16
 8006c0c:	4313      	orrs	r3, r2
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr

08006c18 <LL_RCC_GetLPUARTClockSource>:
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c24:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4013      	ands	r3, r2
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bc80      	pop	{r7}
 8006c34:	4770      	bx	lr

08006c36 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e042      	b.n	8006cce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d106      	bne.n	8006c60 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fa fb56 	bl	800130c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2224      	movs	r2, #36	; 0x24
 8006c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0201 	bic.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fc4b 	bl	8007514 <UART_SetConfig>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e022      	b.n	8006cce <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 feb3 	bl	80079fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ca4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cb4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f042 0201 	orr.w	r2, r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 ff39 	bl	8007b3e <UART_CheckIdleState>
 8006ccc:	4603      	mov	r3, r0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08a      	sub	sp, #40	; 0x28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d142      	bne.n	8006d76 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <HAL_UART_Receive_IT+0x24>
 8006cf6:	88fb      	ldrh	r3, [r7, #6]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e03b      	b.n	8006d78 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d101      	bne.n	8006d0e <HAL_UART_Receive_IT+0x36>
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	e034      	b.n	8006d78 <HAL_UART_Receive_IT+0xa0>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a17      	ldr	r2, [pc, #92]	; (8006d80 <HAL_UART_Receive_IT+0xa8>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d01f      	beq.n	8006d66 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d018      	beq.n	8006d66 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	e853 3f00 	ldrex	r3, [r3]
 8006d40:	613b      	str	r3, [r7, #16]
   return(result);
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	623b      	str	r3, [r7, #32]
 8006d54:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	69f9      	ldr	r1, [r7, #28]
 8006d58:	6a3a      	ldr	r2, [r7, #32]
 8006d5a:	e841 2300 	strex	r3, r2, [r1]
 8006d5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1e6      	bne.n	8006d34 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006d66:	88fb      	ldrh	r3, [r7, #6]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 fff9 	bl	8007d64 <UART_Start_Receive_IT>
 8006d72:	4603      	mov	r3, r0
 8006d74:	e000      	b.n	8006d78 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006d76:	2302      	movs	r3, #2
  }
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3728      	adds	r7, #40	; 0x28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	40008000 	.word	0x40008000

08006d84 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08a      	sub	sp, #40	; 0x28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d98:	2b20      	cmp	r3, #32
 8006d9a:	d17a      	bne.n	8006e92 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <HAL_UART_Transmit_DMA+0x24>
 8006da2:	88fb      	ldrh	r3, [r7, #6]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e073      	b.n	8006e94 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d101      	bne.n	8006dba <HAL_UART_Transmit_DMA+0x36>
 8006db6:	2302      	movs	r3, #2
 8006db8:	e06c      	b.n	8006e94 <HAL_UART_Transmit_DMA+0x110>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	88fa      	ldrh	r2, [r7, #6]
 8006dcc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	88fa      	ldrh	r2, [r7, #6]
 8006dd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2221      	movs	r2, #33	; 0x21
 8006de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d02c      	beq.n	8006e4a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006df4:	4a29      	ldr	r2, [pc, #164]	; (8006e9c <HAL_UART_Transmit_DMA+0x118>)
 8006df6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dfc:	4a28      	ldr	r2, [pc, #160]	; (8006ea0 <HAL_UART_Transmit_DMA+0x11c>)
 8006dfe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e04:	4a27      	ldr	r2, [pc, #156]	; (8006ea4 <HAL_UART_Transmit_DMA+0x120>)
 8006e06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e18:	4619      	mov	r1, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3328      	adds	r3, #40	; 0x28
 8006e20:	461a      	mov	r2, r3
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	f7fc fda4 	bl	8003970 <HAL_DMA_Start_IT>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00d      	beq.n	8006e4a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2210      	movs	r2, #16
 8006e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e024      	b.n	8006e94 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2240      	movs	r2, #64	; 0x40
 8006e50:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3308      	adds	r3, #8
 8006e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	613b      	str	r3, [r7, #16]
   return(result);
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3308      	adds	r3, #8
 8006e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e7a:	623a      	str	r2, [r7, #32]
 8006e7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	69f9      	ldr	r1, [r7, #28]
 8006e80:	6a3a      	ldr	r2, [r7, #32]
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e5      	bne.n	8006e5a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e000      	b.n	8006e94 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8006e92:	2302      	movs	r3, #2
  }
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3728      	adds	r7, #40	; 0x28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	080080b3 	.word	0x080080b3
 8006ea0:	0800814d 	.word	0x0800814d
 8006ea4:	08008169 	.word	0x08008169

08006ea8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b0ba      	sub	sp, #232	; 0xe8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ece:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006ed2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006edc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d11b      	bne.n	8006f1c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d015      	beq.n	8006f1c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ef4:	f003 0320 	and.w	r3, r3, #32
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d105      	bne.n	8006f08 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d009      	beq.n	8006f1c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 82d6 	beq.w	80074be <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	4798      	blx	r3
      }
      return;
 8006f1a:	e2d0      	b.n	80074be <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 811f 	beq.w	8007164 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006f2a:	4b8b      	ldr	r3, [pc, #556]	; (8007158 <HAL_UART_IRQHandler+0x2b0>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d106      	bne.n	8006f40 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f36:	4b89      	ldr	r3, [pc, #548]	; (800715c <HAL_UART_IRQHandler+0x2b4>)
 8006f38:	4013      	ands	r3, r2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 8112 	beq.w	8007164 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d011      	beq.n	8006f70 <HAL_UART_IRQHandler+0xc8>
 8006f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00b      	beq.n	8006f70 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f66:	f043 0201 	orr.w	r2, r3, #1
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d011      	beq.n	8006fa0 <HAL_UART_IRQHandler+0xf8>
 8006f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00b      	beq.n	8006fa0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f96:	f043 0204 	orr.w	r2, r3, #4
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa4:	f003 0304 	and.w	r3, r3, #4
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d011      	beq.n	8006fd0 <HAL_UART_IRQHandler+0x128>
 8006fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2204      	movs	r2, #4
 8006fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fc6:	f043 0202 	orr.w	r2, r3, #2
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd4:	f003 0308 	and.w	r3, r3, #8
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d017      	beq.n	800700c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe0:	f003 0320 	and.w	r3, r3, #32
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d105      	bne.n	8006ff4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006fe8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006fec:	4b5a      	ldr	r3, [pc, #360]	; (8007158 <HAL_UART_IRQHandler+0x2b0>)
 8006fee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007002:	f043 0208 	orr.w	r2, r3, #8
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800700c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007014:	2b00      	cmp	r3, #0
 8007016:	d012      	beq.n	800703e <HAL_UART_IRQHandler+0x196>
 8007018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800701c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00c      	beq.n	800703e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800702c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007034:	f043 0220 	orr.w	r2, r3, #32
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 823c 	beq.w	80074c2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800704a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800704e:	f003 0320 	and.w	r3, r3, #32
 8007052:	2b00      	cmp	r3, #0
 8007054:	d013      	beq.n	800707e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800705a:	f003 0320 	and.w	r3, r3, #32
 800705e:	2b00      	cmp	r3, #0
 8007060:	d105      	bne.n	800706e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d007      	beq.n	800707e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007084:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007092:	2b40      	cmp	r3, #64	; 0x40
 8007094:	d005      	beq.n	80070a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800709a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d04f      	beq.n	8007142 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 ffa0 	bl	8007fe8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b2:	2b40      	cmp	r3, #64	; 0x40
 80070b4:	d141      	bne.n	800713a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3308      	adds	r3, #8
 80070bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80070cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3308      	adds	r3, #8
 80070de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80070e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80070e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1d9      	bne.n	80070b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007106:	2b00      	cmp	r3, #0
 8007108:	d013      	beq.n	8007132 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800710e:	4a14      	ldr	r2, [pc, #80]	; (8007160 <HAL_UART_IRQHandler+0x2b8>)
 8007110:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007116:	4618      	mov	r0, r3
 8007118:	f7fc fd06 	bl	8003b28 <HAL_DMA_Abort_IT>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d017      	beq.n	8007152 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800712c:	4610      	mov	r0, r2
 800712e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007130:	e00f      	b.n	8007152 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f9d9 	bl	80074ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007138:	e00b      	b.n	8007152 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f9d5 	bl	80074ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007140:	e007      	b.n	8007152 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f9d1 	bl	80074ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007150:	e1b7      	b.n	80074c2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007152:	bf00      	nop
    return;
 8007154:	e1b5      	b.n	80074c2 <HAL_UART_IRQHandler+0x61a>
 8007156:	bf00      	nop
 8007158:	10000001 	.word	0x10000001
 800715c:	04000120 	.word	0x04000120
 8007160:	080081e9 	.word	0x080081e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007168:	2b01      	cmp	r3, #1
 800716a:	f040 814a 	bne.w	8007402 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800716e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007172:	f003 0310 	and.w	r3, r3, #16
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 8143 	beq.w	8007402 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800717c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007180:	f003 0310 	and.w	r3, r3, #16
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 813c 	beq.w	8007402 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2210      	movs	r2, #16
 8007190:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719c:	2b40      	cmp	r3, #64	; 0x40
 800719e:	f040 80b5 	bne.w	800730c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80071ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 8187 	beq.w	80074c6 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80071be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071c2:	429a      	cmp	r2, r3
 80071c4:	f080 817f 	bcs.w	80074c6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f040 8086 	bne.w	80072f0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800720e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007212:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800721a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1da      	bne.n	80071e4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3308      	adds	r3, #8
 8007234:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800723e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007240:	f023 0301 	bic.w	r3, r3, #1
 8007244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3308      	adds	r3, #8
 800724e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007252:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007256:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800725a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e1      	bne.n	800722e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800727a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800727c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3308      	adds	r3, #8
 800728a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800728e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007290:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007294:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800729c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e3      	bne.n	800726a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072c0:	f023 0310 	bic.w	r3, r3, #16
 80072c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80072d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e4      	bne.n	80072b0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fc fbbe 	bl	8003a6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	b29b      	uxth	r3, r3
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f8f9 	bl	80074fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800730a:	e0dc      	b.n	80074c6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007318:	b29b      	uxth	r3, r3
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007326:	b29b      	uxth	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 80ce 	beq.w	80074ca <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800732e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80c9 	beq.w	80074ca <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800734c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800735a:	647b      	str	r3, [r7, #68]	; 0x44
 800735c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e4      	bne.n	8007338 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3308      	adds	r3, #8
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	623b      	str	r3, [r7, #32]
   return(result);
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007384:	f023 0301 	bic.w	r3, r3, #1
 8007388:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3308      	adds	r3, #8
 8007392:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007396:	633a      	str	r2, [r7, #48]	; 0x30
 8007398:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800739c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e1      	bne.n	800736e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2220      	movs	r2, #32
 80073ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f023 0310 	bic.w	r3, r3, #16
 80073d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073e0:	61fb      	str	r3, [r7, #28]
 80073e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	69b9      	ldr	r1, [r7, #24]
 80073e6:	69fa      	ldr	r2, [r7, #28]
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	617b      	str	r3, [r7, #20]
   return(result);
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e4      	bne.n	80073be <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f87e 	bl	80074fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007400:	e063      	b.n	80074ca <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00e      	beq.n	800742c <HAL_UART_IRQHandler+0x584>
 800740e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d008      	beq.n	800742c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007422:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 fb7d 	bl	8008b24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800742a:	e051      	b.n	80074d0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800742c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007434:	2b00      	cmp	r3, #0
 8007436:	d014      	beq.n	8007462 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800743c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007440:	2b00      	cmp	r3, #0
 8007442:	d105      	bne.n	8007450 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d008      	beq.n	8007462 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007454:	2b00      	cmp	r3, #0
 8007456:	d03a      	beq.n	80074ce <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	4798      	blx	r3
    }
    return;
 8007460:	e035      	b.n	80074ce <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d009      	beq.n	8007482 <HAL_UART_IRQHandler+0x5da>
 800746e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 feca 	bl	8008214 <UART_EndTransmit_IT>
    return;
 8007480:	e026      	b.n	80074d0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007486:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d009      	beq.n	80074a2 <HAL_UART_IRQHandler+0x5fa>
 800748e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007492:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f001 fb54 	bl	8008b48 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074a0:	e016      	b.n	80074d0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80074a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d010      	beq.n	80074d0 <HAL_UART_IRQHandler+0x628>
 80074ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	da0c      	bge.n	80074d0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f001 fb3d 	bl	8008b36 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074bc:	e008      	b.n	80074d0 <HAL_UART_IRQHandler+0x628>
      return;
 80074be:	bf00      	nop
 80074c0:	e006      	b.n	80074d0 <HAL_UART_IRQHandler+0x628>
    return;
 80074c2:	bf00      	nop
 80074c4:	e004      	b.n	80074d0 <HAL_UART_IRQHandler+0x628>
      return;
 80074c6:	bf00      	nop
 80074c8:	e002      	b.n	80074d0 <HAL_UART_IRQHandler+0x628>
      return;
 80074ca:	bf00      	nop
 80074cc:	e000      	b.n	80074d0 <HAL_UART_IRQHandler+0x628>
    return;
 80074ce:	bf00      	nop
  }
}
 80074d0:	37e8      	adds	r7, #232	; 0xe8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop

080074d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr

080074ea <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr

080074fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	4770      	bx	lr
	...

08007514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007518:	b08c      	sub	sp, #48	; 0x30
 800751a:	af00      	add	r7, sp, #0
 800751c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	431a      	orrs	r2, r3
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	431a      	orrs	r2, r3
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	4313      	orrs	r3, r2
 800753a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	4b94      	ldr	r3, [pc, #592]	; (8007794 <UART_SetConfig+0x280>)
 8007544:	4013      	ands	r3, r2
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	6812      	ldr	r2, [r2, #0]
 800754a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800754c:	430b      	orrs	r3, r1
 800754e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	430a      	orrs	r2, r1
 8007564:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a89      	ldr	r2, [pc, #548]	; (8007798 <UART_SetConfig+0x284>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d004      	beq.n	8007580 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800757c:	4313      	orrs	r3, r2
 800757e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800758a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	6812      	ldr	r2, [r2, #0]
 8007592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007594:	430b      	orrs	r3, r1
 8007596:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	f023 010f 	bic.w	r1, r3, #15
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a7a      	ldr	r2, [pc, #488]	; (800779c <UART_SetConfig+0x288>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d127      	bne.n	8007608 <UART_SetConfig+0xf4>
 80075b8:	2003      	movs	r0, #3
 80075ba:	f7ff fb1b 	bl	8006bf4 <LL_RCC_GetUSARTClockSource>
 80075be:	4603      	mov	r3, r0
 80075c0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d81b      	bhi.n	8007600 <UART_SetConfig+0xec>
 80075c8:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <UART_SetConfig+0xbc>)
 80075ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ce:	bf00      	nop
 80075d0:	080075e1 	.word	0x080075e1
 80075d4:	080075f1 	.word	0x080075f1
 80075d8:	080075e9 	.word	0x080075e9
 80075dc:	080075f9 	.word	0x080075f9
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075e6:	e080      	b.n	80076ea <UART_SetConfig+0x1d6>
 80075e8:	2302      	movs	r3, #2
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ee:	e07c      	b.n	80076ea <UART_SetConfig+0x1d6>
 80075f0:	2304      	movs	r3, #4
 80075f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075f6:	e078      	b.n	80076ea <UART_SetConfig+0x1d6>
 80075f8:	2308      	movs	r3, #8
 80075fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075fe:	e074      	b.n	80076ea <UART_SetConfig+0x1d6>
 8007600:	2310      	movs	r3, #16
 8007602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007606:	e070      	b.n	80076ea <UART_SetConfig+0x1d6>
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a64      	ldr	r2, [pc, #400]	; (80077a0 <UART_SetConfig+0x28c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d138      	bne.n	8007684 <UART_SetConfig+0x170>
 8007612:	200c      	movs	r0, #12
 8007614:	f7ff faee 	bl	8006bf4 <LL_RCC_GetUSARTClockSource>
 8007618:	4603      	mov	r3, r0
 800761a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800761e:	2b0c      	cmp	r3, #12
 8007620:	d82c      	bhi.n	800767c <UART_SetConfig+0x168>
 8007622:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <UART_SetConfig+0x114>)
 8007624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007628:	0800765d 	.word	0x0800765d
 800762c:	0800767d 	.word	0x0800767d
 8007630:	0800767d 	.word	0x0800767d
 8007634:	0800767d 	.word	0x0800767d
 8007638:	0800766d 	.word	0x0800766d
 800763c:	0800767d 	.word	0x0800767d
 8007640:	0800767d 	.word	0x0800767d
 8007644:	0800767d 	.word	0x0800767d
 8007648:	08007665 	.word	0x08007665
 800764c:	0800767d 	.word	0x0800767d
 8007650:	0800767d 	.word	0x0800767d
 8007654:	0800767d 	.word	0x0800767d
 8007658:	08007675 	.word	0x08007675
 800765c:	2300      	movs	r3, #0
 800765e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007662:	e042      	b.n	80076ea <UART_SetConfig+0x1d6>
 8007664:	2302      	movs	r3, #2
 8007666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800766a:	e03e      	b.n	80076ea <UART_SetConfig+0x1d6>
 800766c:	2304      	movs	r3, #4
 800766e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007672:	e03a      	b.n	80076ea <UART_SetConfig+0x1d6>
 8007674:	2308      	movs	r3, #8
 8007676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800767a:	e036      	b.n	80076ea <UART_SetConfig+0x1d6>
 800767c:	2310      	movs	r3, #16
 800767e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007682:	e032      	b.n	80076ea <UART_SetConfig+0x1d6>
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a43      	ldr	r2, [pc, #268]	; (8007798 <UART_SetConfig+0x284>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d12a      	bne.n	80076e4 <UART_SetConfig+0x1d0>
 800768e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007692:	f7ff fac1 	bl	8006c18 <LL_RCC_GetLPUARTClockSource>
 8007696:	4603      	mov	r3, r0
 8007698:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800769c:	d01a      	beq.n	80076d4 <UART_SetConfig+0x1c0>
 800769e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076a2:	d81b      	bhi.n	80076dc <UART_SetConfig+0x1c8>
 80076a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076a8:	d00c      	beq.n	80076c4 <UART_SetConfig+0x1b0>
 80076aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ae:	d815      	bhi.n	80076dc <UART_SetConfig+0x1c8>
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <UART_SetConfig+0x1a8>
 80076b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b8:	d008      	beq.n	80076cc <UART_SetConfig+0x1b8>
 80076ba:	e00f      	b.n	80076dc <UART_SetConfig+0x1c8>
 80076bc:	2300      	movs	r3, #0
 80076be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076c2:	e012      	b.n	80076ea <UART_SetConfig+0x1d6>
 80076c4:	2302      	movs	r3, #2
 80076c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ca:	e00e      	b.n	80076ea <UART_SetConfig+0x1d6>
 80076cc:	2304      	movs	r3, #4
 80076ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076d2:	e00a      	b.n	80076ea <UART_SetConfig+0x1d6>
 80076d4:	2308      	movs	r3, #8
 80076d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076da:	e006      	b.n	80076ea <UART_SetConfig+0x1d6>
 80076dc:	2310      	movs	r3, #16
 80076de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076e2:	e002      	b.n	80076ea <UART_SetConfig+0x1d6>
 80076e4:	2310      	movs	r3, #16
 80076e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a2a      	ldr	r2, [pc, #168]	; (8007798 <UART_SetConfig+0x284>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	f040 80a4 	bne.w	800783e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d823      	bhi.n	8007746 <UART_SetConfig+0x232>
 80076fe:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <UART_SetConfig+0x1f0>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007729 	.word	0x08007729
 8007708:	08007747 	.word	0x08007747
 800770c:	08007731 	.word	0x08007731
 8007710:	08007747 	.word	0x08007747
 8007714:	08007737 	.word	0x08007737
 8007718:	08007747 	.word	0x08007747
 800771c:	08007747 	.word	0x08007747
 8007720:	08007747 	.word	0x08007747
 8007724:	0800773f 	.word	0x0800773f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007728:	f7fd ff48 	bl	80055bc <HAL_RCC_GetPCLK1Freq>
 800772c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800772e:	e010      	b.n	8007752 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007730:	4b1c      	ldr	r3, [pc, #112]	; (80077a4 <UART_SetConfig+0x290>)
 8007732:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007734:	e00d      	b.n	8007752 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007736:	f7fd fe8d 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 800773a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800773c:	e009      	b.n	8007752 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800773e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007742:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007744:	e005      	b.n	8007752 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007750:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8137 	beq.w	80079c8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	4a12      	ldr	r2, [pc, #72]	; (80077a8 <UART_SetConfig+0x294>)
 8007760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007764:	461a      	mov	r2, r3
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	fbb3 f3f2 	udiv	r3, r3, r2
 800776c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	4613      	mov	r3, r2
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	4413      	add	r3, r2
 8007778:	69ba      	ldr	r2, [r7, #24]
 800777a:	429a      	cmp	r2, r3
 800777c:	d305      	bcc.n	800778a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007784:	69ba      	ldr	r2, [r7, #24]
 8007786:	429a      	cmp	r2, r3
 8007788:	d910      	bls.n	80077ac <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007790:	e11a      	b.n	80079c8 <UART_SetConfig+0x4b4>
 8007792:	bf00      	nop
 8007794:	cfff69f3 	.word	0xcfff69f3
 8007798:	40008000 	.word	0x40008000
 800779c:	40013800 	.word	0x40013800
 80077a0:	40004400 	.word	0x40004400
 80077a4:	00f42400 	.word	0x00f42400
 80077a8:	0800e91c 	.word	0x0800e91c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	2200      	movs	r2, #0
 80077b0:	60bb      	str	r3, [r7, #8]
 80077b2:	60fa      	str	r2, [r7, #12]
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	4a8e      	ldr	r2, [pc, #568]	; (80079f4 <UART_SetConfig+0x4e0>)
 80077ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2200      	movs	r2, #0
 80077c2:	603b      	str	r3, [r7, #0]
 80077c4:	607a      	str	r2, [r7, #4]
 80077c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077ce:	f7f8 fd2f 	bl	8000230 <__aeabi_uldivmod>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4610      	mov	r0, r2
 80077d8:	4619      	mov	r1, r3
 80077da:	f04f 0200 	mov.w	r2, #0
 80077de:	f04f 0300 	mov.w	r3, #0
 80077e2:	020b      	lsls	r3, r1, #8
 80077e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077e8:	0202      	lsls	r2, r0, #8
 80077ea:	6979      	ldr	r1, [r7, #20]
 80077ec:	6849      	ldr	r1, [r1, #4]
 80077ee:	0849      	lsrs	r1, r1, #1
 80077f0:	2000      	movs	r0, #0
 80077f2:	460c      	mov	r4, r1
 80077f4:	4605      	mov	r5, r0
 80077f6:	eb12 0804 	adds.w	r8, r2, r4
 80077fa:	eb43 0905 	adc.w	r9, r3, r5
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	469a      	mov	sl, r3
 8007806:	4693      	mov	fp, r2
 8007808:	4652      	mov	r2, sl
 800780a:	465b      	mov	r3, fp
 800780c:	4640      	mov	r0, r8
 800780e:	4649      	mov	r1, r9
 8007810:	f7f8 fd0e 	bl	8000230 <__aeabi_uldivmod>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	4613      	mov	r3, r2
 800781a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007822:	d308      	bcc.n	8007836 <UART_SetConfig+0x322>
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800782a:	d204      	bcs.n	8007836 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6a3a      	ldr	r2, [r7, #32]
 8007832:	60da      	str	r2, [r3, #12]
 8007834:	e0c8      	b.n	80079c8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800783c:	e0c4      	b.n	80079c8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007846:	d168      	bne.n	800791a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800784c:	2b08      	cmp	r3, #8
 800784e:	d828      	bhi.n	80078a2 <UART_SetConfig+0x38e>
 8007850:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <UART_SetConfig+0x344>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	0800787d 	.word	0x0800787d
 800785c:	08007885 	.word	0x08007885
 8007860:	0800788d 	.word	0x0800788d
 8007864:	080078a3 	.word	0x080078a3
 8007868:	08007893 	.word	0x08007893
 800786c:	080078a3 	.word	0x080078a3
 8007870:	080078a3 	.word	0x080078a3
 8007874:	080078a3 	.word	0x080078a3
 8007878:	0800789b 	.word	0x0800789b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800787c:	f7fd fe9e 	bl	80055bc <HAL_RCC_GetPCLK1Freq>
 8007880:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007882:	e014      	b.n	80078ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007884:	f7fd feac 	bl	80055e0 <HAL_RCC_GetPCLK2Freq>
 8007888:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800788a:	e010      	b.n	80078ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800788c:	4b5a      	ldr	r3, [pc, #360]	; (80079f8 <UART_SetConfig+0x4e4>)
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007890:	e00d      	b.n	80078ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007892:	f7fd fddf 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 8007896:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007898:	e009      	b.n	80078ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800789a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078a0:	e005      	b.n	80078ae <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80078ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 8089 	beq.w	80079c8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	4a4e      	ldr	r2, [pc, #312]	; (80079f4 <UART_SetConfig+0x4e0>)
 80078bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078c0:	461a      	mov	r2, r3
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80078c8:	005a      	lsls	r2, r3, #1
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	085b      	lsrs	r3, r3, #1
 80078d0:	441a      	add	r2, r3
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078da:	b29b      	uxth	r3, r3
 80078dc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	2b0f      	cmp	r3, #15
 80078e2:	d916      	bls.n	8007912 <UART_SetConfig+0x3fe>
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ea:	d212      	bcs.n	8007912 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	f023 030f 	bic.w	r3, r3, #15
 80078f4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	085b      	lsrs	r3, r3, #1
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f003 0307 	and.w	r3, r3, #7
 8007900:	b29a      	uxth	r2, r3
 8007902:	8bfb      	ldrh	r3, [r7, #30]
 8007904:	4313      	orrs	r3, r2
 8007906:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	8bfa      	ldrh	r2, [r7, #30]
 800790e:	60da      	str	r2, [r3, #12]
 8007910:	e05a      	b.n	80079c8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007918:	e056      	b.n	80079c8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800791a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800791e:	2b08      	cmp	r3, #8
 8007920:	d827      	bhi.n	8007972 <UART_SetConfig+0x45e>
 8007922:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <UART_SetConfig+0x414>)
 8007924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007928:	0800794d 	.word	0x0800794d
 800792c:	08007955 	.word	0x08007955
 8007930:	0800795d 	.word	0x0800795d
 8007934:	08007973 	.word	0x08007973
 8007938:	08007963 	.word	0x08007963
 800793c:	08007973 	.word	0x08007973
 8007940:	08007973 	.word	0x08007973
 8007944:	08007973 	.word	0x08007973
 8007948:	0800796b 	.word	0x0800796b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800794c:	f7fd fe36 	bl	80055bc <HAL_RCC_GetPCLK1Freq>
 8007950:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007952:	e014      	b.n	800797e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007954:	f7fd fe44 	bl	80055e0 <HAL_RCC_GetPCLK2Freq>
 8007958:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800795a:	e010      	b.n	800797e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800795c:	4b26      	ldr	r3, [pc, #152]	; (80079f8 <UART_SetConfig+0x4e4>)
 800795e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007960:	e00d      	b.n	800797e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007962:	f7fd fd77 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 8007966:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007968:	e009      	b.n	800797e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800796a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800796e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007970:	e005      	b.n	800797e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800797c:	bf00      	nop
    }

    if (pclk != 0U)
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	2b00      	cmp	r3, #0
 8007982:	d021      	beq.n	80079c8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007988:	4a1a      	ldr	r2, [pc, #104]	; (80079f4 <UART_SetConfig+0x4e0>)
 800798a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800798e:	461a      	mov	r2, r3
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	fbb3 f2f2 	udiv	r2, r3, r2
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	085b      	lsrs	r3, r3, #1
 800799c:	441a      	add	r2, r3
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	2b0f      	cmp	r3, #15
 80079ae:	d908      	bls.n	80079c2 <UART_SetConfig+0x4ae>
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079b6:	d204      	bcs.n	80079c2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6a3a      	ldr	r2, [r7, #32]
 80079be:	60da      	str	r2, [r3, #12]
 80079c0:	e002      	b.n	80079c8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	2200      	movs	r2, #0
 80079dc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2200      	movs	r2, #0
 80079e2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80079e4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3730      	adds	r7, #48	; 0x30
 80079ec:	46bd      	mov	sp, r7
 80079ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079f2:	bf00      	nop
 80079f4:	0800e91c 	.word	0x0800e91c
 80079f8:	00f42400 	.word	0x00f42400

080079fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4c:	f003 0304 	and.w	r3, r3, #4
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6e:	f003 0308 	and.w	r3, r3, #8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d01a      	beq.n	8007b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007afa:	d10a      	bne.n	8007b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00a      	beq.n	8007b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	605a      	str	r2, [r3, #4]
  }
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr

08007b3e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b086      	sub	sp, #24
 8007b42:	af02      	add	r7, sp, #8
 8007b44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b4e:	f7fa f80d 	bl	8001b6c <HAL_GetTick>
 8007b52:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0308 	and.w	r3, r3, #8
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	d10e      	bne.n	8007b80 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f82f 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e025      	b.n	8007bcc <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0304 	and.w	r3, r3, #4
 8007b8a:	2b04      	cmp	r3, #4
 8007b8c:	d10e      	bne.n	8007bac <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f819 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e00f      	b.n	8007bcc <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b09c      	sub	sp, #112	; 0x70
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	4613      	mov	r3, r2
 8007be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007be4:	e0a9      	b.n	8007d3a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bec:	f000 80a5 	beq.w	8007d3a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bf0:	f7f9 ffbc 	bl	8001b6c <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d302      	bcc.n	8007c06 <UART_WaitOnFlagUntilTimeout+0x32>
 8007c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d140      	bne.n	8007c88 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c0e:	e853 3f00 	ldrex	r3, [r3]
 8007c12:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c1a:	667b      	str	r3, [r7, #100]	; 0x64
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	461a      	mov	r2, r3
 8007c22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c26:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c2c:	e841 2300 	strex	r3, r2, [r1]
 8007c30:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e6      	bne.n	8007c06 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c42:	e853 3f00 	ldrex	r3, [r3]
 8007c46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	f023 0301 	bic.w	r3, r3, #1
 8007c4e:	663b      	str	r3, [r7, #96]	; 0x60
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3308      	adds	r3, #8
 8007c56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c58:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c60:	e841 2300 	strex	r3, r2, [r1]
 8007c64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1e5      	bne.n	8007c38 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2220      	movs	r2, #32
 8007c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e069      	b.n	8007d5c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0304 	and.w	r3, r3, #4
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d051      	beq.n	8007d3a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ca4:	d149      	bne.n	8007d3a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cce:	637b      	str	r3, [r7, #52]	; 0x34
 8007cd0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cd6:	e841 2300 	strex	r3, r2, [r1]
 8007cda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1e6      	bne.n	8007cb0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f023 0301 	bic.w	r3, r3, #1
 8007cf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3308      	adds	r3, #8
 8007d00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d02:	623a      	str	r2, [r7, #32]
 8007d04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d06:	69f9      	ldr	r1, [r7, #28]
 8007d08:	6a3a      	ldr	r2, [r7, #32]
 8007d0a:	e841 2300 	strex	r3, r2, [r1]
 8007d0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1e5      	bne.n	8007ce2 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e010      	b.n	8007d5c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	69da      	ldr	r2, [r3, #28]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	4013      	ands	r3, r2
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	bf0c      	ite	eq
 8007d4a:	2301      	moveq	r3, #1
 8007d4c:	2300      	movne	r3, #0
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	461a      	mov	r2, r3
 8007d52:	79fb      	ldrb	r3, [r7, #7]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	f43f af46 	beq.w	8007be6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3770      	adds	r7, #112	; 0x70
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b09d      	sub	sp, #116	; 0x74
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	88fa      	ldrh	r2, [r7, #6]
 8007d7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	88fa      	ldrh	r2, [r7, #6]
 8007d84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d96:	d10e      	bne.n	8007db6 <UART_Start_Receive_IT+0x52>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d105      	bne.n	8007dac <UART_Start_Receive_IT+0x48>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007da6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007daa:	e02d      	b.n	8007e08 <UART_Start_Receive_IT+0xa4>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	22ff      	movs	r2, #255	; 0xff
 8007db0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007db4:	e028      	b.n	8007e08 <UART_Start_Receive_IT+0xa4>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10d      	bne.n	8007dda <UART_Start_Receive_IT+0x76>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d104      	bne.n	8007dd0 <UART_Start_Receive_IT+0x6c>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	22ff      	movs	r2, #255	; 0xff
 8007dca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007dce:	e01b      	b.n	8007e08 <UART_Start_Receive_IT+0xa4>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	227f      	movs	r2, #127	; 0x7f
 8007dd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007dd8:	e016      	b.n	8007e08 <UART_Start_Receive_IT+0xa4>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007de2:	d10d      	bne.n	8007e00 <UART_Start_Receive_IT+0x9c>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d104      	bne.n	8007df6 <UART_Start_Receive_IT+0x92>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	227f      	movs	r2, #127	; 0x7f
 8007df0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007df4:	e008      	b.n	8007e08 <UART_Start_Receive_IT+0xa4>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	223f      	movs	r2, #63	; 0x3f
 8007dfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007dfe:	e003      	b.n	8007e08 <UART_Start_Receive_IT+0xa4>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2222      	movs	r2, #34	; 0x22
 8007e14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e2a:	f043 0301 	orr.w	r3, r3, #1
 8007e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3308      	adds	r3, #8
 8007e36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e38:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007e3a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e5      	bne.n	8007e18 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e54:	d14d      	bne.n	8007ef2 <UART_Start_Receive_IT+0x18e>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e5c:	88fa      	ldrh	r2, [r7, #6]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d347      	bcc.n	8007ef2 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e6a:	d107      	bne.n	8007e7c <UART_Start_Receive_IT+0x118>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d103      	bne.n	8007e7c <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4a38      	ldr	r2, [pc, #224]	; (8007f58 <UART_Start_Receive_IT+0x1f4>)
 8007e78:	671a      	str	r2, [r3, #112]	; 0x70
 8007e7a:	e002      	b.n	8007e82 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4a37      	ldr	r2, [pc, #220]	; (8007f5c <UART_Start_Receive_IT+0x1f8>)
 8007e80:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e92:	e853 3f00 	ldrex	r3, [r3]
 8007e96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eaa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007eae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e6      	bne.n	8007e8a <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ed2:	667b      	str	r3, [r7, #100]	; 0x64
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3308      	adds	r3, #8
 8007eda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007edc:	637a      	str	r2, [r7, #52]	; 0x34
 8007ede:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ee4:	e841 2300 	strex	r3, r2, [r1]
 8007ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1e5      	bne.n	8007ebc <UART_Start_Receive_IT+0x158>
 8007ef0:	e02c      	b.n	8007f4c <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efa:	d107      	bne.n	8007f0c <UART_Start_Receive_IT+0x1a8>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d103      	bne.n	8007f0c <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4a16      	ldr	r2, [pc, #88]	; (8007f60 <UART_Start_Receive_IT+0x1fc>)
 8007f08:	671a      	str	r2, [r3, #112]	; 0x70
 8007f0a:	e002      	b.n	8007f12 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4a15      	ldr	r2, [pc, #84]	; (8007f64 <UART_Start_Receive_IT+0x200>)
 8007f10:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	613b      	str	r3, [r7, #16]
   return(result);
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007f2e:	663b      	str	r3, [r7, #96]	; 0x60
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	461a      	mov	r2, r3
 8007f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f38:	623b      	str	r3, [r7, #32]
 8007f3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3c:	69f9      	ldr	r1, [r7, #28]
 8007f3e:	6a3a      	ldr	r2, [r7, #32]
 8007f40:	e841 2300 	strex	r3, r2, [r1]
 8007f44:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e6      	bne.n	8007f1a <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3774      	adds	r7, #116	; 0x74
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bc80      	pop	{r7}
 8007f56:	4770      	bx	lr
 8007f58:	08008825 	.word	0x08008825
 8007f5c:	0800852d 	.word	0x0800852d
 8007f60:	080083cb 	.word	0x080083cb
 8007f64:	0800826b 	.word	0x0800826b

08007f68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b08f      	sub	sp, #60	; 0x3c
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f84:	637b      	str	r3, [r7, #52]	; 0x34
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f90:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e6      	bne.n	8007f70 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3308      	adds	r3, #8
 8007fa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc2:	61ba      	str	r2, [r7, #24]
 8007fc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6979      	ldr	r1, [r7, #20]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e5      	bne.n	8007fa2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007fde:	bf00      	nop
 8007fe0:	373c      	adds	r7, #60	; 0x3c
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bc80      	pop	{r7}
 8007fe6:	4770      	bx	lr

08007fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b095      	sub	sp, #84	; 0x54
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff8:	e853 3f00 	ldrex	r3, [r3]
 8007ffc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800800e:	643b      	str	r3, [r7, #64]	; 0x40
 8008010:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008012:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008014:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800801c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e6      	bne.n	8007ff0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3308      	adds	r3, #8
 8008028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	e853 3f00 	ldrex	r3, [r3]
 8008030:	61fb      	str	r3, [r7, #28]
   return(result);
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008038:	f023 0301 	bic.w	r3, r3, #1
 800803c:	64bb      	str	r3, [r7, #72]	; 0x48
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3308      	adds	r3, #8
 8008044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008046:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008048:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800804c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e3      	bne.n	8008022 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800805e:	2b01      	cmp	r3, #1
 8008060:	d118      	bne.n	8008094 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	e853 3f00 	ldrex	r3, [r3]
 800806e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f023 0310 	bic.w	r3, r3, #16
 8008076:	647b      	str	r3, [r7, #68]	; 0x44
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	461a      	mov	r2, r3
 800807e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008080:	61bb      	str	r3, [r7, #24]
 8008082:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008084:	6979      	ldr	r1, [r7, #20]
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	e841 2300 	strex	r3, r2, [r1]
 800808c:	613b      	str	r3, [r7, #16]
   return(result);
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e6      	bne.n	8008062 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2220      	movs	r2, #32
 8008098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80080a8:	bf00      	nop
 80080aa:	3754      	adds	r7, #84	; 0x54
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bc80      	pop	{r7}
 80080b0:	4770      	bx	lr

080080b2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b090      	sub	sp, #64	; 0x40
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080be:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0320 	and.w	r3, r3, #32
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d137      	bne.n	800813e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80080ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d0:	2200      	movs	r2, #0
 80080d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3308      	adds	r3, #8
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	623b      	str	r3, [r7, #32]
   return(result);
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80080ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3308      	adds	r3, #8
 80080f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080f6:	633a      	str	r2, [r7, #48]	; 0x30
 80080f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080fe:	e841 2300 	strex	r3, r2, [r1]
 8008102:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1e5      	bne.n	80080d6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800810a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	e853 3f00 	ldrex	r3, [r3]
 8008116:	60fb      	str	r3, [r7, #12]
   return(result);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800811e:	637b      	str	r3, [r7, #52]	; 0x34
 8008120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	461a      	mov	r2, r3
 8008126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008128:	61fb      	str	r3, [r7, #28]
 800812a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	69b9      	ldr	r1, [r7, #24]
 800812e:	69fa      	ldr	r2, [r7, #28]
 8008130:	e841 2300 	strex	r3, r2, [r1]
 8008134:	617b      	str	r3, [r7, #20]
   return(result);
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e6      	bne.n	800810a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800813c:	e002      	b.n	8008144 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800813e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008140:	f7f9 fa56 	bl	80015f0 <HAL_UART_TxCpltCallback>
}
 8008144:	bf00      	nop
 8008146:	3740      	adds	r7, #64	; 0x40
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f7ff f9bc 	bl	80074d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008160:	bf00      	nop
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008174:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800817c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008184:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008190:	2b80      	cmp	r3, #128	; 0x80
 8008192:	d109      	bne.n	80081a8 <UART_DMAError+0x40>
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	2b21      	cmp	r3, #33	; 0x21
 8008198:	d106      	bne.n	80081a8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2200      	movs	r2, #0
 800819e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80081a2:	6978      	ldr	r0, [r7, #20]
 80081a4:	f7ff fee0 	bl	8007f68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b2:	2b40      	cmp	r3, #64	; 0x40
 80081b4:	d109      	bne.n	80081ca <UART_DMAError+0x62>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b22      	cmp	r3, #34	; 0x22
 80081ba:	d106      	bne.n	80081ca <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80081c4:	6978      	ldr	r0, [r7, #20]
 80081c6:	f7ff ff0f 	bl	8007fe8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081d0:	f043 0210 	orr.w	r2, r3, #16
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081da:	6978      	ldr	r0, [r7, #20]
 80081dc:	f7ff f985 	bl	80074ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081e0:	bf00      	nop
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f7ff f96f 	bl	80074ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800820c:	bf00      	nop
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	e853 3f00 	ldrex	r3, [r3]
 8008228:	60bb      	str	r3, [r7, #8]
   return(result);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008230:	61fb      	str	r3, [r7, #28]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	461a      	mov	r2, r3
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	61bb      	str	r3, [r7, #24]
 800823c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	6979      	ldr	r1, [r7, #20]
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	e841 2300 	strex	r3, r2, [r1]
 8008246:	613b      	str	r3, [r7, #16]
   return(result);
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e6      	bne.n	800821c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2220      	movs	r2, #32
 8008252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7f9 f9c7 	bl	80015f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008262:	bf00      	nop
 8008264:	3720      	adds	r7, #32
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b096      	sub	sp, #88	; 0x58
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008278:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008282:	2b22      	cmp	r3, #34	; 0x22
 8008284:	f040 8095 	bne.w	80083b2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008292:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008296:	b2d9      	uxtb	r1, r3
 8008298:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800829c:	b2da      	uxtb	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a2:	400a      	ands	r2, r1
 80082a4:	b2d2      	uxtb	r2, r2
 80082a6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	3b01      	subs	r3, #1
 80082bc:	b29a      	uxth	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d178      	bne.n	80083c2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d8:	e853 3f00 	ldrex	r3, [r3]
 80082dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082e4:	653b      	str	r3, [r7, #80]	; 0x50
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ee:	647b      	str	r3, [r7, #68]	; 0x44
 80082f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082f6:	e841 2300 	strex	r3, r2, [r1]
 80082fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1e6      	bne.n	80082d0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3308      	adds	r3, #8
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	e853 3f00 	ldrex	r3, [r3]
 8008310:	623b      	str	r3, [r7, #32]
   return(result);
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	f023 0301 	bic.w	r3, r3, #1
 8008318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3308      	adds	r3, #8
 8008320:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008322:	633a      	str	r2, [r7, #48]	; 0x30
 8008324:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008326:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832a:	e841 2300 	strex	r3, r2, [r1]
 800832e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1e5      	bne.n	8008302 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2220      	movs	r2, #32
 800833a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008348:	2b01      	cmp	r3, #1
 800834a:	d12e      	bne.n	80083aa <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	e853 3f00 	ldrex	r3, [r3]
 800835e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f023 0310 	bic.w	r3, r3, #16
 8008366:	64bb      	str	r3, [r7, #72]	; 0x48
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	461a      	mov	r2, r3
 800836e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008370:	61fb      	str	r3, [r7, #28]
 8008372:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008374:	69b9      	ldr	r1, [r7, #24]
 8008376:	69fa      	ldr	r2, [r7, #28]
 8008378:	e841 2300 	strex	r3, r2, [r1]
 800837c:	617b      	str	r3, [r7, #20]
   return(result);
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1e6      	bne.n	8008352 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	69db      	ldr	r3, [r3, #28]
 800838a:	f003 0310 	and.w	r3, r3, #16
 800838e:	2b10      	cmp	r3, #16
 8008390:	d103      	bne.n	800839a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2210      	movs	r2, #16
 8008398:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff f8aa 	bl	80074fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083a8:	e00b      	b.n	80083c2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7f9 f92e 	bl	800160c <HAL_UART_RxCpltCallback>
}
 80083b0:	e007      	b.n	80083c2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	699a      	ldr	r2, [r3, #24]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f042 0208 	orr.w	r2, r2, #8
 80083c0:	619a      	str	r2, [r3, #24]
}
 80083c2:	bf00      	nop
 80083c4:	3758      	adds	r7, #88	; 0x58
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b096      	sub	sp, #88	; 0x58
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80083d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e2:	2b22      	cmp	r3, #34	; 0x22
 80083e4:	f040 8095 	bne.w	8008512 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80083f8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80083fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008400:	4013      	ands	r3, r2
 8008402:	b29a      	uxth	r2, r3
 8008404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008406:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840c:	1c9a      	adds	r2, r3, #2
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008418:	b29b      	uxth	r3, r3
 800841a:	3b01      	subs	r3, #1
 800841c:	b29a      	uxth	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800842a:	b29b      	uxth	r3, r3
 800842c:	2b00      	cmp	r3, #0
 800842e:	d178      	bne.n	8008522 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008444:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800844e:	643b      	str	r3, [r7, #64]	; 0x40
 8008450:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008452:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008454:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e6      	bne.n	8008430 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3308      	adds	r3, #8
 8008468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	61fb      	str	r3, [r7, #28]
   return(result);
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	64bb      	str	r3, [r7, #72]	; 0x48
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3308      	adds	r3, #8
 8008480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008484:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e5      	bne.n	8008462 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2220      	movs	r2, #32
 800849a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d12e      	bne.n	800850a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	e853 3f00 	ldrex	r3, [r3]
 80084be:	60bb      	str	r3, [r7, #8]
   return(result);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f023 0310 	bic.w	r3, r3, #16
 80084c6:	647b      	str	r3, [r7, #68]	; 0x44
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	461a      	mov	r2, r3
 80084ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d0:	61bb      	str	r3, [r7, #24]
 80084d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	6979      	ldr	r1, [r7, #20]
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	e841 2300 	strex	r3, r2, [r1]
 80084dc:	613b      	str	r3, [r7, #16]
   return(result);
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e6      	bne.n	80084b2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	f003 0310 	and.w	r3, r3, #16
 80084ee:	2b10      	cmp	r3, #16
 80084f0:	d103      	bne.n	80084fa <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2210      	movs	r2, #16
 80084f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7fe fffa 	bl	80074fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008508:	e00b      	b.n	8008522 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7f9 f87e 	bl	800160c <HAL_UART_RxCpltCallback>
}
 8008510:	e007      	b.n	8008522 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	699a      	ldr	r2, [r3, #24]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f042 0208 	orr.w	r2, r2, #8
 8008520:	619a      	str	r2, [r3, #24]
}
 8008522:	bf00      	nop
 8008524:	3758      	adds	r7, #88	; 0x58
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
	...

0800852c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b0a6      	sub	sp, #152	; 0x98
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800853a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	69db      	ldr	r3, [r3, #28]
 8008544:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008562:	2b22      	cmp	r3, #34	; 0x22
 8008564:	f040 814f 	bne.w	8008806 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800856e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008572:	e0f6      	b.n	8008762 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800857e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008582:	b2d9      	uxtb	r1, r3
 8008584:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008588:	b2da      	uxtb	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800858e:	400a      	ands	r2, r1
 8008590:	b2d2      	uxtb	r2, r2
 8008592:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80085ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d053      	beq.n	800866e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d011      	beq.n	80085f6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80085d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00b      	beq.n	80085f6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2201      	movs	r2, #1
 80085e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ec:	f043 0201 	orr.w	r2, r3, #1
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085fa:	f003 0302 	and.w	r3, r3, #2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d011      	beq.n	8008626 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008602:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00b      	beq.n	8008626 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2202      	movs	r2, #2
 8008614:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800861c:	f043 0204 	orr.w	r2, r3, #4
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008626:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800862a:	f003 0304 	and.w	r3, r3, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	d011      	beq.n	8008656 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008632:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00b      	beq.n	8008656 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2204      	movs	r2, #4
 8008644:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800864c:	f043 0202 	orr.w	r2, r3, #2
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d006      	beq.n	800866e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7fe ff42 	bl	80074ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008674:	b29b      	uxth	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d173      	bne.n	8008762 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008682:	e853 3f00 	ldrex	r3, [r3]
 8008686:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800868a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800868e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800869c:	66bb      	str	r3, [r7, #104]	; 0x68
 800869e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80086a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086a4:	e841 2300 	strex	r3, r2, [r1]
 80086a8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80086aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1e4      	bne.n	800867a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3308      	adds	r3, #8
 80086b6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ba:	e853 3f00 	ldrex	r3, [r3]
 80086be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80086c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086c6:	f023 0301 	bic.w	r3, r3, #1
 80086ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3308      	adds	r3, #8
 80086d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80086d4:	657a      	str	r2, [r7, #84]	; 0x54
 80086d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086dc:	e841 2300 	strex	r3, r2, [r1]
 80086e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1e3      	bne.n	80086b0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2220      	movs	r2, #32
 80086ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d12e      	bne.n	800875c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870c:	e853 3f00 	ldrex	r3, [r3]
 8008710:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008714:	f023 0310 	bic.w	r3, r3, #16
 8008718:	67bb      	str	r3, [r7, #120]	; 0x78
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008722:	643b      	str	r3, [r7, #64]	; 0x40
 8008724:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008726:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008728:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800872a:	e841 2300 	strex	r3, r2, [r1]
 800872e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1e6      	bne.n	8008704 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b10      	cmp	r3, #16
 8008742:	d103      	bne.n	800874c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2210      	movs	r2, #16
 800874a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7fe fed1 	bl	80074fc <HAL_UARTEx_RxEventCallback>
 800875a:	e002      	b.n	8008762 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7f8 ff55 	bl	800160c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008762:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008766:	2b00      	cmp	r3, #0
 8008768:	d006      	beq.n	8008778 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800876a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800876e:	f003 0320 	and.w	r3, r3, #32
 8008772:	2b00      	cmp	r3, #0
 8008774:	f47f aefe 	bne.w	8008574 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800877e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008782:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008786:	2b00      	cmp	r3, #0
 8008788:	d045      	beq.n	8008816 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008790:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008794:	429a      	cmp	r2, r3
 8008796:	d23e      	bcs.n	8008816 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	3308      	adds	r3, #8
 800879e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	6a3b      	ldr	r3, [r7, #32]
 80087a2:	e853 3f00 	ldrex	r3, [r3]
 80087a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087ae:	673b      	str	r3, [r7, #112]	; 0x70
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3308      	adds	r3, #8
 80087b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80087b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087c0:	e841 2300 	strex	r3, r2, [r1]
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1e5      	bne.n	8008798 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a14      	ldr	r2, [pc, #80]	; (8008820 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80087d0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	e853 3f00 	ldrex	r3, [r3]
 80087de:	60bb      	str	r3, [r7, #8]
   return(result);
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f043 0320 	orr.w	r3, r3, #32
 80087e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	461a      	mov	r2, r3
 80087ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f0:	61bb      	str	r3, [r7, #24]
 80087f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f4:	6979      	ldr	r1, [r7, #20]
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	e841 2300 	strex	r3, r2, [r1]
 80087fc:	613b      	str	r3, [r7, #16]
   return(result);
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e6      	bne.n	80087d2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008804:	e007      	b.n	8008816 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	699a      	ldr	r2, [r3, #24]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f042 0208 	orr.w	r2, r2, #8
 8008814:	619a      	str	r2, [r3, #24]
}
 8008816:	bf00      	nop
 8008818:	3798      	adds	r7, #152	; 0x98
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	0800826b 	.word	0x0800826b

08008824 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b0a8      	sub	sp, #160	; 0xa0
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008832:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800885a:	2b22      	cmp	r3, #34	; 0x22
 800885c:	f040 8153 	bne.w	8008b06 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008866:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800886a:	e0fa      	b.n	8008a62 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008872:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800887e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008882:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008886:	4013      	ands	r3, r2
 8008888:	b29a      	uxth	r2, r3
 800888a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800888e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008894:	1c9a      	adds	r2, r3, #2
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	3b01      	subs	r3, #1
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80088b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088ba:	f003 0307 	and.w	r3, r3, #7
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d053      	beq.n	800896a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d011      	beq.n	80088f2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80088ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00b      	beq.n	80088f2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2201      	movs	r2, #1
 80088e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088e8:	f043 0201 	orr.w	r2, r3, #1
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d011      	beq.n	8008922 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80088fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00b      	beq.n	8008922 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2202      	movs	r2, #2
 8008910:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008918:	f043 0204 	orr.w	r2, r3, #4
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008922:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008926:	f003 0304 	and.w	r3, r3, #4
 800892a:	2b00      	cmp	r3, #0
 800892c:	d011      	beq.n	8008952 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800892e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00b      	beq.n	8008952 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2204      	movs	r2, #4
 8008940:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008948:	f043 0202 	orr.w	r2, r3, #2
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008958:	2b00      	cmp	r3, #0
 800895a:	d006      	beq.n	800896a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7fe fdc4 	bl	80074ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008970:	b29b      	uxth	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d175      	bne.n	8008a62 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800897e:	e853 3f00 	ldrex	r3, [r3]
 8008982:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800898a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008998:	66fb      	str	r3, [r7, #108]	; 0x6c
 800899a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800899e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80089a0:	e841 2300 	strex	r3, r2, [r1]
 80089a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80089a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1e4      	bne.n	8008976 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3308      	adds	r3, #8
 80089b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b6:	e853 3f00 	ldrex	r3, [r3]
 80089ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089c2:	f023 0301 	bic.w	r3, r3, #1
 80089c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	3308      	adds	r3, #8
 80089d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80089d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80089d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e1      	bne.n	80089ac <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2220      	movs	r2, #32
 80089ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d12e      	bne.n	8008a5c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	e853 3f00 	ldrex	r3, [r3]
 8008a10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a14:	f023 0310 	bic.w	r3, r3, #16
 8008a18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a22:	647b      	str	r3, [r7, #68]	; 0x44
 8008a24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a2a:	e841 2300 	strex	r3, r2, [r1]
 8008a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1e6      	bne.n	8008a04 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	f003 0310 	and.w	r3, r3, #16
 8008a40:	2b10      	cmp	r3, #16
 8008a42:	d103      	bne.n	8008a4c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2210      	movs	r2, #16
 8008a4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7fe fd51 	bl	80074fc <HAL_UARTEx_RxEventCallback>
 8008a5a:	e002      	b.n	8008a62 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7f8 fdd5 	bl	800160c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a62:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d006      	beq.n	8008a78 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008a6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a6e:	f003 0320 	and.w	r3, r3, #32
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f47f aefa 	bne.w	800886c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a7e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a82:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d045      	beq.n	8008b16 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a90:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d23e      	bcs.n	8008b16 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3308      	adds	r3, #8
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	e853 3f00 	ldrex	r3, [r3]
 8008aa6:	623b      	str	r3, [r7, #32]
   return(result);
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aae:	677b      	str	r3, [r7, #116]	; 0x74
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008ab8:	633a      	str	r2, [r7, #48]	; 0x30
 8008aba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ac0:	e841 2300 	strex	r3, r2, [r1]
 8008ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1e5      	bne.n	8008a98 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a14      	ldr	r2, [pc, #80]	; (8008b20 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008ad0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	e853 3f00 	ldrex	r3, [r3]
 8008ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f043 0320 	orr.w	r3, r3, #32
 8008ae6:	673b      	str	r3, [r7, #112]	; 0x70
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	461a      	mov	r2, r3
 8008aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008af0:	61fb      	str	r3, [r7, #28]
 8008af2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	69b9      	ldr	r1, [r7, #24]
 8008af6:	69fa      	ldr	r2, [r7, #28]
 8008af8:	e841 2300 	strex	r3, r2, [r1]
 8008afc:	617b      	str	r3, [r7, #20]
   return(result);
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1e6      	bne.n	8008ad2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b04:	e007      	b.n	8008b16 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	699a      	ldr	r2, [r3, #24]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f042 0208 	orr.w	r2, r2, #8
 8008b14:	619a      	str	r2, [r3, #24]
}
 8008b16:	bf00      	nop
 8008b18:	37a0      	adds	r7, #160	; 0xa0
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	080083cb 	.word	0x080083cb

08008b24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bc80      	pop	{r7}
 8008b34:	4770      	bx	lr

08008b36 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b083      	sub	sp, #12
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008b3e:	bf00      	nop
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bc80      	pop	{r7}
 8008b46:	4770      	bx	lr

08008b48 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bc80      	pop	{r7}
 8008b58:	4770      	bx	lr

08008b5a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b088      	sub	sp, #32
 8008b5e:	af02      	add	r7, sp, #8
 8008b60:	60f8      	str	r0, [r7, #12]
 8008b62:	1d3b      	adds	r3, r7, #4
 8008b64:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d101      	bne.n	8008b7a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8008b76:	2302      	movs	r3, #2
 8008b78:	e046      	b.n	8008c08 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2224      	movs	r2, #36	; 0x24
 8008b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f022 0201 	bic.w	r2, r2, #1
 8008b98:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d105      	bne.n	8008bc0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8008bb4:	1d3b      	adds	r3, r7, #4
 8008bb6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 f911 	bl	8008de2 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f042 0201 	orr.w	r2, r2, #1
 8008bce:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bd0:	f7f8 ffcc 	bl	8001b6c <HAL_GetTick>
 8008bd4:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7fe fff5 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d002      	beq.n	8008bf6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	75fb      	strb	r3, [r7, #23]
 8008bf4:	e003      	b.n	8008bfe <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b089      	sub	sp, #36	; 0x24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d101      	bne.n	8008c26 <HAL_UARTEx_EnableStopMode+0x16>
 8008c22:	2302      	movs	r3, #2
 8008c24:	e021      	b.n	8008c6a <HAL_UARTEx_EnableStopMode+0x5a>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	e853 3f00 	ldrex	r3, [r3]
 8008c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	f043 0302 	orr.w	r3, r3, #2
 8008c42:	61fb      	str	r3, [r7, #28]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	61bb      	str	r3, [r7, #24]
 8008c4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c50:	6979      	ldr	r1, [r7, #20]
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	e841 2300 	strex	r3, r2, [r1]
 8008c58:	613b      	str	r3, [r7, #16]
   return(result);
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e6      	bne.n	8008c2e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3724      	adds	r7, #36	; 0x24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bc80      	pop	{r7}
 8008c72:	4770      	bx	lr

08008c74 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d101      	bne.n	8008c8a <HAL_UARTEx_EnableFifoMode+0x16>
 8008c86:	2302      	movs	r3, #2
 8008c88:	e02b      	b.n	8008ce2 <HAL_UARTEx_EnableFifoMode+0x6e>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2224      	movs	r2, #36	; 0x24
 8008c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f022 0201 	bic.w	r2, r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008cc0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f8ac 	bl	8008e28 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2220      	movs	r2, #32
 8008cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d101      	bne.n	8008d02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cfe:	2302      	movs	r3, #2
 8008d00:	e02d      	b.n	8008d5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2224      	movs	r2, #36	; 0x24
 8008d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f022 0201 	bic.w	r2, r2, #1
 8008d28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	430a      	orrs	r2, r1
 8008d3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f872 	bl	8008e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2220      	movs	r2, #32
 8008d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d101      	bne.n	8008d7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	e02d      	b.n	8008dda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2224      	movs	r2, #36	; 0x24
 8008d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f022 0201 	bic.w	r2, r2, #1
 8008da4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	430a      	orrs	r2, r1
 8008db8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f834 	bl	8008e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2220      	movs	r2, #32
 8008dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b085      	sub	sp, #20
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	1d3b      	adds	r3, r7, #4
 8008dec:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f023 0210 	bic.w	r2, r3, #16
 8008dfa:	893b      	ldrh	r3, [r7, #8]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8008e10:	7abb      	ldrb	r3, [r7, #10]
 8008e12:	061a      	lsls	r2, r3, #24
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	605a      	str	r2, [r3, #4]
}
 8008e1c:	bf00      	nop
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bc80      	pop	{r7}
 8008e24:	4770      	bx	lr
	...

08008e28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d108      	bne.n	8008e4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e48:	e031      	b.n	8008eae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e4a:	2308      	movs	r3, #8
 8008e4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e4e:	2308      	movs	r3, #8
 8008e50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	0e5b      	lsrs	r3, r3, #25
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	f003 0307 	and.w	r3, r3, #7
 8008e60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	0f5b      	lsrs	r3, r3, #29
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	f003 0307 	and.w	r3, r3, #7
 8008e70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	7b3a      	ldrb	r2, [r7, #12]
 8008e76:	4910      	ldr	r1, [pc, #64]	; (8008eb8 <UARTEx_SetNbDataToProcess+0x90>)
 8008e78:	5c8a      	ldrb	r2, [r1, r2]
 8008e7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e7e:	7b3a      	ldrb	r2, [r7, #12]
 8008e80:	490e      	ldr	r1, [pc, #56]	; (8008ebc <UARTEx_SetNbDataToProcess+0x94>)
 8008e82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	7b7a      	ldrb	r2, [r7, #13]
 8008e94:	4908      	ldr	r1, [pc, #32]	; (8008eb8 <UARTEx_SetNbDataToProcess+0x90>)
 8008e96:	5c8a      	ldrb	r2, [r1, r2]
 8008e98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e9c:	7b7a      	ldrb	r2, [r7, #13]
 8008e9e:	4907      	ldr	r1, [pc, #28]	; (8008ebc <UARTEx_SetNbDataToProcess+0x94>)
 8008ea0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ea2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008eae:	bf00      	nop
 8008eb0:	3714      	adds	r7, #20
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bc80      	pop	{r7}
 8008eb6:	4770      	bx	lr
 8008eb8:	0800e934 	.word	0x0800e934
 8008ebc:	0800e93c 	.word	0x0800e93c

08008ec0 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af02      	add	r7, sp, #8
 8008ec6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8008ec8:	4a21      	ldr	r2, [pc, #132]	; (8008f50 <RadioInit+0x90>)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8008ece:	4b21      	ldr	r3, [pc, #132]	; (8008f54 <RadioInit+0x94>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8008ed4:	4b1f      	ldr	r3, [pc, #124]	; (8008f54 <RadioInit+0x94>)
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8008eda:	4b1e      	ldr	r3, [pc, #120]	; (8008f54 <RadioInit+0x94>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8008ee0:	481d      	ldr	r0, [pc, #116]	; (8008f58 <RadioInit+0x98>)
 8008ee2:	f001 feb7 	bl	800ac54 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	f001 f81e 	bl	8009f28 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8008eec:	f002 f948 	bl	800b180 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	f002 fca8 	bl	800b848 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8008ef8:	2204      	movs	r2, #4
 8008efa:	2100      	movs	r1, #0
 8008efc:	2001      	movs	r0, #1
 8008efe:	f002 facd 	bl	800b49c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008f02:	2300      	movs	r3, #0
 8008f04:	2200      	movs	r2, #0
 8008f06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008f0a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008f0e:	f002 f9fd 	bl	800b30c <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8008f12:	f000 fe9b 	bl	8009c4c <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8008f16:	2300      	movs	r3, #0
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	4b10      	ldr	r3, [pc, #64]	; (8008f5c <RadioInit+0x9c>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f04f 31ff 	mov.w	r1, #4294967295
 8008f22:	480f      	ldr	r0, [pc, #60]	; (8008f60 <RadioInit+0xa0>)
 8008f24:	f003 fd80 	bl	800ca28 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8008f28:	2300      	movs	r3, #0
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	4b0d      	ldr	r3, [pc, #52]	; (8008f64 <RadioInit+0xa4>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f04f 31ff 	mov.w	r1, #4294967295
 8008f34:	480c      	ldr	r0, [pc, #48]	; (8008f68 <RadioInit+0xa8>)
 8008f36:	f003 fd77 	bl	800ca28 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8008f3a:	4809      	ldr	r0, [pc, #36]	; (8008f60 <RadioInit+0xa0>)
 8008f3c:	f003 fe18 	bl	800cb70 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8008f40:	4809      	ldr	r0, [pc, #36]	; (8008f68 <RadioInit+0xa8>)
 8008f42:	f003 fe15 	bl	800cb70 <UTIL_TIMER_Stop>
}
 8008f46:	bf00      	nop
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20000424 	.word	0x20000424
 8008f54:	20000428 	.word	0x20000428
 8008f58:	0800a00d 	.word	0x0800a00d
 8008f5c:	08009f95 	.word	0x08009f95
 8008f60:	20000480 	.word	0x20000480
 8008f64:	08009fa9 	.word	0x08009fa9
 8008f68:	20000498 	.word	0x20000498

08008f6c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8008f70:	f001 feb2 	bl	800acd8 <SUBGRF_GetOperatingMode>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b07      	cmp	r3, #7
 8008f78:	d00a      	beq.n	8008f90 <RadioGetStatus+0x24>
 8008f7a:	2b07      	cmp	r3, #7
 8008f7c:	dc0a      	bgt.n	8008f94 <RadioGetStatus+0x28>
 8008f7e:	2b04      	cmp	r3, #4
 8008f80:	d002      	beq.n	8008f88 <RadioGetStatus+0x1c>
 8008f82:	2b05      	cmp	r3, #5
 8008f84:	d002      	beq.n	8008f8c <RadioGetStatus+0x20>
 8008f86:	e005      	b.n	8008f94 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e004      	b.n	8008f96 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e002      	b.n	8008f96 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e000      	b.n	8008f96 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8008f94:	2300      	movs	r3, #0
    }
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8008fa6:	4a25      	ldr	r2, [pc, #148]	; (800903c <RadioSetModem+0xa0>)
 8008fa8:	79fb      	ldrb	r3, [r7, #7]
 8008faa:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f003 f80d 	bl	800bfce <RFW_SetRadioModem>
    switch( modem )
 8008fb4:	79fb      	ldrb	r3, [r7, #7]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	2b03      	cmp	r3, #3
 8008fba:	d80b      	bhi.n	8008fd4 <RadioSetModem+0x38>
 8008fbc:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <RadioSetModem+0x28>)
 8008fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc2:	bf00      	nop
 8008fc4:	08008fe3 	.word	0x08008fe3
 8008fc8:	08009009 	.word	0x08009009
 8008fcc:	08009017 	.word	0x08009017
 8008fd0:	08009025 	.word	0x08009025
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	f002 fa3b 	bl	800b450 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008fda:	4b18      	ldr	r3, [pc, #96]	; (800903c <RadioSetModem+0xa0>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	735a      	strb	r2, [r3, #13]
        break;
 8008fe0:	e028      	b.n	8009034 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	f002 fa34 	bl	800b450 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8008fe8:	4b14      	ldr	r3, [pc, #80]	; (800903c <RadioSetModem+0xa0>)
 8008fea:	7b5a      	ldrb	r2, [r3, #13]
 8008fec:	4b13      	ldr	r3, [pc, #76]	; (800903c <RadioSetModem+0xa0>)
 8008fee:	7b1b      	ldrb	r3, [r3, #12]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d01e      	beq.n	8009032 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8008ff4:	4b11      	ldr	r3, [pc, #68]	; (800903c <RadioSetModem+0xa0>)
 8008ff6:	7b1a      	ldrb	r2, [r3, #12]
 8008ff8:	4b10      	ldr	r3, [pc, #64]	; (800903c <RadioSetModem+0xa0>)
 8008ffa:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8008ffc:	4b0f      	ldr	r3, [pc, #60]	; (800903c <RadioSetModem+0xa0>)
 8008ffe:	7b5b      	ldrb	r3, [r3, #13]
 8009000:	4618      	mov	r0, r3
 8009002:	f000 ff91 	bl	8009f28 <RadioSetPublicNetwork>
        }
        break;
 8009006:	e014      	b.n	8009032 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8009008:	2002      	movs	r0, #2
 800900a:	f002 fa21 	bl	800b450 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800900e:	4b0b      	ldr	r3, [pc, #44]	; (800903c <RadioSetModem+0xa0>)
 8009010:	2200      	movs	r2, #0
 8009012:	735a      	strb	r2, [r3, #13]
        break;
 8009014:	e00e      	b.n	8009034 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8009016:	2002      	movs	r0, #2
 8009018:	f002 fa1a 	bl	800b450 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800901c:	4b07      	ldr	r3, [pc, #28]	; (800903c <RadioSetModem+0xa0>)
 800901e:	2200      	movs	r2, #0
 8009020:	735a      	strb	r2, [r3, #13]
        break;
 8009022:	e007      	b.n	8009034 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8009024:	2000      	movs	r0, #0
 8009026:	f002 fa13 	bl	800b450 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800902a:	4b04      	ldr	r3, [pc, #16]	; (800903c <RadioSetModem+0xa0>)
 800902c:	2200      	movs	r2, #0
 800902e:	735a      	strb	r2, [r3, #13]
        break;
 8009030:	e000      	b.n	8009034 <RadioSetModem+0x98>
        break;
 8009032:	bf00      	nop
    }
}
 8009034:	bf00      	nop
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	20000428 	.word	0x20000428

08009040 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f002 f9bb 	bl	800b3c4 <SUBGRF_SetRfFrequency>
}
 800904e:	bf00      	nop
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b090      	sub	sp, #64	; 0x40
 800905a:	af0a      	add	r7, sp, #40	; 0x28
 800905c:	60f8      	str	r0, [r7, #12]
 800905e:	60b9      	str	r1, [r7, #8]
 8009060:	603b      	str	r3, [r7, #0]
 8009062:	4613      	mov	r3, r2
 8009064:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8009066:	2301      	movs	r3, #1
 8009068:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800906e:	2300      	movs	r3, #0
 8009070:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8009072:	f000 fdfe 	bl	8009c72 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8009076:	2000      	movs	r0, #0
 8009078:	f7ff ff90 	bl	8008f9c <RadioSetModem>

    RadioSetChannel( freq );
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f7ff ffdf 	bl	8009040 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8009082:	2301      	movs	r3, #1
 8009084:	9309      	str	r3, [sp, #36]	; 0x24
 8009086:	2300      	movs	r3, #0
 8009088:	9308      	str	r3, [sp, #32]
 800908a:	2300      	movs	r3, #0
 800908c:	9307      	str	r3, [sp, #28]
 800908e:	2300      	movs	r3, #0
 8009090:	9306      	str	r3, [sp, #24]
 8009092:	2300      	movs	r3, #0
 8009094:	9305      	str	r3, [sp, #20]
 8009096:	2300      	movs	r3, #0
 8009098:	9304      	str	r3, [sp, #16]
 800909a:	2300      	movs	r3, #0
 800909c:	9303      	str	r3, [sp, #12]
 800909e:	2300      	movs	r3, #0
 80090a0:	9302      	str	r3, [sp, #8]
 80090a2:	2303      	movs	r3, #3
 80090a4:	9301      	str	r3, [sp, #4]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	2300      	movs	r3, #0
 80090ac:	f44f 7216 	mov.w	r2, #600	; 0x258
 80090b0:	68b9      	ldr	r1, [r7, #8]
 80090b2:	2000      	movs	r0, #0
 80090b4:	f000 f840 	bl	8009138 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80090b8:	2000      	movs	r0, #0
 80090ba:	f000 fde1 	bl	8009c80 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80090be:	f000 ff61 	bl	8009f84 <RadioGetWakeupTime>
 80090c2:	4603      	mov	r3, r0
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7f8 fd58 	bl	8001b7a <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80090ca:	f003 fe6b 	bl	800cda4 <UTIL_TIMER_GetCurrentTime>
 80090ce:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80090d0:	e00d      	b.n	80090ee <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80090d2:	2000      	movs	r0, #0
 80090d4:	f000 fea6 	bl	8009e24 <RadioRssi>
 80090d8:	4603      	mov	r3, r0
 80090da:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80090dc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80090e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	dd02      	ble.n	80090ee <RadioIsChannelFree+0x98>
        {
            status = false;
 80090e8:	2300      	movs	r3, #0
 80090ea:	75fb      	strb	r3, [r7, #23]
            break;
 80090ec:	e006      	b.n	80090fc <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80090ee:	6938      	ldr	r0, [r7, #16]
 80090f0:	f003 fe6a 	bl	800cdc8 <UTIL_TIMER_GetElapsedTime>
 80090f4:	4602      	mov	r2, r0
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d8ea      	bhi.n	80090d2 <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80090fc:	f000 fdb9 	bl	8009c72 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8009100:	7dfb      	ldrb	r3, [r7, #23]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8009114:	2001      	movs	r0, #1
 8009116:	f7ff ff41 	bl	8008f9c <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800911a:	2300      	movs	r3, #0
 800911c:	2200      	movs	r2, #0
 800911e:	2100      	movs	r1, #0
 8009120:	2000      	movs	r0, #0
 8009122:	f002 f8f3 	bl	800b30c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8009126:	f001 fea8 	bl	800ae7a <SUBGRF_GetRandom>
 800912a:	6078      	str	r0, [r7, #4]

    return rnd;
 800912c:	687b      	ldr	r3, [r7, #4]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
	...

08009138 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08a      	sub	sp, #40	; 0x28
 800913c:	af00      	add	r7, sp, #0
 800913e:	60b9      	str	r1, [r7, #8]
 8009140:	607a      	str	r2, [r7, #4]
 8009142:	461a      	mov	r2, r3
 8009144:	4603      	mov	r3, r0
 8009146:	73fb      	strb	r3, [r7, #15]
 8009148:	4613      	mov	r3, r2
 800914a:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 800914c:	4abd      	ldr	r2, [pc, #756]	; (8009444 <RadioSetRxConfig+0x30c>)
 800914e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009152:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8009154:	f002 fef9 	bl	800bf4a <RFW_DeInit>
    if( rxContinuous == true )
 8009158:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8009164:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009168:	2b00      	cmp	r3, #0
 800916a:	d004      	beq.n	8009176 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800916c:	4ab6      	ldr	r2, [pc, #728]	; (8009448 <RadioSetRxConfig+0x310>)
 800916e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009172:	7013      	strb	r3, [r2, #0]
 8009174:	e002      	b.n	800917c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8009176:	4bb4      	ldr	r3, [pc, #720]	; (8009448 <RadioSetRxConfig+0x310>)
 8009178:	22ff      	movs	r2, #255	; 0xff
 800917a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	2b04      	cmp	r3, #4
 8009180:	d009      	beq.n	8009196 <RadioSetRxConfig+0x5e>
 8009182:	2b04      	cmp	r3, #4
 8009184:	f300 81da 	bgt.w	800953c <RadioSetRxConfig+0x404>
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 80bf 	beq.w	800930c <RadioSetRxConfig+0x1d4>
 800918e:	2b01      	cmp	r3, #1
 8009190:	f000 812c 	beq.w	80093ec <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8009194:	e1d2      	b.n	800953c <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8009196:	2001      	movs	r0, #1
 8009198:	f001 ffb4 	bl	800b104 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800919c:	4ba9      	ldr	r3, [pc, #676]	; (8009444 <RadioSetRxConfig+0x30c>)
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80091a4:	4aa7      	ldr	r2, [pc, #668]	; (8009444 <RadioSetRxConfig+0x30c>)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80091aa:	4ba6      	ldr	r3, [pc, #664]	; (8009444 <RadioSetRxConfig+0x30c>)
 80091ac:	2209      	movs	r2, #9
 80091ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80091b2:	4ba4      	ldr	r3, [pc, #656]	; (8009444 <RadioSetRxConfig+0x30c>)
 80091b4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80091b8:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80091ba:	68b8      	ldr	r0, [r7, #8]
 80091bc:	f002 fdf8 	bl	800bdb0 <SUBGRF_GetFskBandwidthRegValue>
 80091c0:	4603      	mov	r3, r0
 80091c2:	461a      	mov	r2, r3
 80091c4:	4b9f      	ldr	r3, [pc, #636]	; (8009444 <RadioSetRxConfig+0x30c>)
 80091c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80091ca:	4b9e      	ldr	r3, [pc, #632]	; (8009444 <RadioSetRxConfig+0x30c>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80091d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80091d2:	00db      	lsls	r3, r3, #3
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	4b9b      	ldr	r3, [pc, #620]	; (8009444 <RadioSetRxConfig+0x30c>)
 80091d8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80091da:	4b9a      	ldr	r3, [pc, #616]	; (8009444 <RadioSetRxConfig+0x30c>)
 80091dc:	2200      	movs	r2, #0
 80091de:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80091e0:	4b98      	ldr	r3, [pc, #608]	; (8009444 <RadioSetRxConfig+0x30c>)
 80091e2:	2210      	movs	r2, #16
 80091e4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80091e6:	4b97      	ldr	r3, [pc, #604]	; (8009444 <RadioSetRxConfig+0x30c>)
 80091e8:	2200      	movs	r2, #0
 80091ea:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80091ec:	4b95      	ldr	r3, [pc, #596]	; (8009444 <RadioSetRxConfig+0x30c>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80091f2:	4b95      	ldr	r3, [pc, #596]	; (8009448 <RadioSetRxConfig+0x310>)
 80091f4:	781a      	ldrb	r2, [r3, #0]
 80091f6:	4b93      	ldr	r3, [pc, #588]	; (8009444 <RadioSetRxConfig+0x30c>)
 80091f8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80091fa:	4b92      	ldr	r3, [pc, #584]	; (8009444 <RadioSetRxConfig+0x30c>)
 80091fc:	2201      	movs	r2, #1
 80091fe:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8009200:	4b90      	ldr	r3, [pc, #576]	; (8009444 <RadioSetRxConfig+0x30c>)
 8009202:	2200      	movs	r2, #0
 8009204:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8009206:	2004      	movs	r0, #4
 8009208:	f7ff fec8 	bl	8008f9c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800920c:	488f      	ldr	r0, [pc, #572]	; (800944c <RadioSetRxConfig+0x314>)
 800920e:	f002 f9ab 	bl	800b568 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009212:	488f      	ldr	r0, [pc, #572]	; (8009450 <RadioSetRxConfig+0x318>)
 8009214:	f002 fa7a 	bl	800b70c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009218:	4a8e      	ldr	r2, [pc, #568]	; (8009454 <RadioSetRxConfig+0x31c>)
 800921a:	f107 031c 	add.w	r3, r7, #28
 800921e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009222:	e883 0003 	stmia.w	r3, {r0, r1}
 8009226:	f107 031c 	add.w	r3, r7, #28
 800922a:	4618      	mov	r0, r3
 800922c:	f001 fda3 	bl	800ad76 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009230:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009234:	f001 fdee 	bl	800ae14 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8009238:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800923c:	f000 fe11 	bl	8009e62 <RadioRead>
 8009240:	4603      	mov	r3, r0
 8009242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8009246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800924a:	f023 0310 	bic.w	r3, r3, #16
 800924e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8009252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009256:	4619      	mov	r1, r3
 8009258:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800925c:	f000 fdef 	bl	8009e3e <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8009260:	2104      	movs	r1, #4
 8009262:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8009266:	f000 fdea 	bl	8009e3e <RadioWrite>
            modReg= RadioRead(0x89b);
 800926a:	f640 009b 	movw	r0, #2203	; 0x89b
 800926e:	f000 fdf8 	bl	8009e62 <RadioRead>
 8009272:	4603      	mov	r3, r0
 8009274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8009278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800927c:	f023 031c 	bic.w	r3, r3, #28
 8009280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8009284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009288:	f043 0308 	orr.w	r3, r3, #8
 800928c:	b2db      	uxtb	r3, r3
 800928e:	4619      	mov	r1, r3
 8009290:	f640 009b 	movw	r0, #2203	; 0x89b
 8009294:	f000 fdd3 	bl	8009e3e <RadioWrite>
            modReg= RadioRead(0x6d1);
 8009298:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800929c:	f000 fde1 	bl	8009e62 <RadioRead>
 80092a0:	4603      	mov	r3, r0
 80092a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80092a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092aa:	f023 0318 	bic.w	r3, r3, #24
 80092ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 80092b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092b6:	f043 0318 	orr.w	r3, r3, #24
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	4619      	mov	r1, r3
 80092be:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80092c2:	f000 fdbc 	bl	8009e3e <RadioWrite>
            modReg= RadioRead(0x6ac);
 80092c6:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80092ca:	f000 fdca 	bl	8009e62 <RadioRead>
 80092ce:	4603      	mov	r3, r0
 80092d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80092d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80092e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092e4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	4619      	mov	r1, r3
 80092ec:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80092f0:	f000 fda5 	bl	8009e3e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80092f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80092f6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80092fa:	fb02 f303 	mul.w	r3, r2, r3
 80092fe:	461a      	mov	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	fbb2 f3f3 	udiv	r3, r2, r3
 8009306:	4a4f      	ldr	r2, [pc, #316]	; (8009444 <RadioSetRxConfig+0x30c>)
 8009308:	6093      	str	r3, [r2, #8]
            break;
 800930a:	e118      	b.n	800953e <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800930c:	2000      	movs	r0, #0
 800930e:	f001 fef9 	bl	800b104 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009312:	4b4c      	ldr	r3, [pc, #304]	; (8009444 <RadioSetRxConfig+0x30c>)
 8009314:	2200      	movs	r2, #0
 8009316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800931a:	4a4a      	ldr	r2, [pc, #296]	; (8009444 <RadioSetRxConfig+0x30c>)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8009320:	4b48      	ldr	r3, [pc, #288]	; (8009444 <RadioSetRxConfig+0x30c>)
 8009322:	220b      	movs	r2, #11
 8009324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009328:	68b8      	ldr	r0, [r7, #8]
 800932a:	f002 fd41 	bl	800bdb0 <SUBGRF_GetFskBandwidthRegValue>
 800932e:	4603      	mov	r3, r0
 8009330:	461a      	mov	r2, r3
 8009332:	4b44      	ldr	r3, [pc, #272]	; (8009444 <RadioSetRxConfig+0x30c>)
 8009334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009338:	4b42      	ldr	r3, [pc, #264]	; (8009444 <RadioSetRxConfig+0x30c>)
 800933a:	2200      	movs	r2, #0
 800933c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800933e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009340:	00db      	lsls	r3, r3, #3
 8009342:	b29a      	uxth	r2, r3
 8009344:	4b3f      	ldr	r3, [pc, #252]	; (8009444 <RadioSetRxConfig+0x30c>)
 8009346:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8009348:	4b3e      	ldr	r3, [pc, #248]	; (8009444 <RadioSetRxConfig+0x30c>)
 800934a:	2204      	movs	r2, #4
 800934c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800934e:	4b3d      	ldr	r3, [pc, #244]	; (8009444 <RadioSetRxConfig+0x30c>)
 8009350:	2218      	movs	r2, #24
 8009352:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8009354:	4b3b      	ldr	r3, [pc, #236]	; (8009444 <RadioSetRxConfig+0x30c>)
 8009356:	2200      	movs	r2, #0
 8009358:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800935a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800935e:	f083 0301 	eor.w	r3, r3, #1
 8009362:	b2db      	uxtb	r3, r3
 8009364:	461a      	mov	r2, r3
 8009366:	4b37      	ldr	r3, [pc, #220]	; (8009444 <RadioSetRxConfig+0x30c>)
 8009368:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800936a:	4b37      	ldr	r3, [pc, #220]	; (8009448 <RadioSetRxConfig+0x310>)
 800936c:	781a      	ldrb	r2, [r3, #0]
 800936e:	4b35      	ldr	r3, [pc, #212]	; (8009444 <RadioSetRxConfig+0x30c>)
 8009370:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8009372:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800937a:	4b32      	ldr	r3, [pc, #200]	; (8009444 <RadioSetRxConfig+0x30c>)
 800937c:	22f2      	movs	r2, #242	; 0xf2
 800937e:	75da      	strb	r2, [r3, #23]
 8009380:	e002      	b.n	8009388 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009382:	4b30      	ldr	r3, [pc, #192]	; (8009444 <RadioSetRxConfig+0x30c>)
 8009384:	2201      	movs	r2, #1
 8009386:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8009388:	4b2e      	ldr	r3, [pc, #184]	; (8009444 <RadioSetRxConfig+0x30c>)
 800938a:	2201      	movs	r2, #1
 800938c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800938e:	f000 fc70 	bl	8009c72 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8009392:	4b2c      	ldr	r3, [pc, #176]	; (8009444 <RadioSetRxConfig+0x30c>)
 8009394:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009398:	2b00      	cmp	r3, #0
 800939a:	bf14      	ite	ne
 800939c:	2301      	movne	r3, #1
 800939e:	2300      	moveq	r3, #0
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff fdfa 	bl	8008f9c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80093a8:	4828      	ldr	r0, [pc, #160]	; (800944c <RadioSetRxConfig+0x314>)
 80093aa:	f002 f8dd 	bl	800b568 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80093ae:	4828      	ldr	r0, [pc, #160]	; (8009450 <RadioSetRxConfig+0x318>)
 80093b0:	f002 f9ac 	bl	800b70c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80093b4:	4a28      	ldr	r2, [pc, #160]	; (8009458 <RadioSetRxConfig+0x320>)
 80093b6:	f107 0314 	add.w	r3, r7, #20
 80093ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093be:	e883 0003 	stmia.w	r3, {r0, r1}
 80093c2:	f107 0314 	add.w	r3, r7, #20
 80093c6:	4618      	mov	r0, r3
 80093c8:	f001 fcd5 	bl	800ad76 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80093cc:	f240 10ff 	movw	r0, #511	; 0x1ff
 80093d0:	f001 fd20 	bl	800ae14 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80093d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093d6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80093da:	fb02 f303 	mul.w	r3, r2, r3
 80093de:	461a      	mov	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e6:	4a17      	ldr	r2, [pc, #92]	; (8009444 <RadioSetRxConfig+0x30c>)
 80093e8:	6093      	str	r3, [r2, #8]
            break;
 80093ea:	e0a8      	b.n	800953e <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80093ec:	2000      	movs	r0, #0
 80093ee:	f001 fe89 	bl	800b104 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80093f2:	4b14      	ldr	r3, [pc, #80]	; (8009444 <RadioSetRxConfig+0x30c>)
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	4b11      	ldr	r3, [pc, #68]	; (8009444 <RadioSetRxConfig+0x30c>)
 8009400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8009404:	4a15      	ldr	r2, [pc, #84]	; (800945c <RadioSetRxConfig+0x324>)
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	4413      	add	r3, r2
 800940a:	781a      	ldrb	r2, [r3, #0]
 800940c:	4b0d      	ldr	r3, [pc, #52]	; (8009444 <RadioSetRxConfig+0x30c>)
 800940e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8009412:	4a0c      	ldr	r2, [pc, #48]	; (8009444 <RadioSetRxConfig+0x30c>)
 8009414:	7bbb      	ldrb	r3, [r7, #14]
 8009416:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d105      	bne.n	800942c <RadioSetRxConfig+0x2f4>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b0b      	cmp	r3, #11
 8009424:	d008      	beq.n	8009438 <RadioSetRxConfig+0x300>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b0c      	cmp	r3, #12
 800942a:	d005      	beq.n	8009438 <RadioSetRxConfig+0x300>
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d116      	bne.n	8009460 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b0c      	cmp	r3, #12
 8009436:	d113      	bne.n	8009460 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8009438:	4b02      	ldr	r3, [pc, #8]	; (8009444 <RadioSetRxConfig+0x30c>)
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8009440:	e012      	b.n	8009468 <RadioSetRxConfig+0x330>
 8009442:	bf00      	nop
 8009444:	20000428 	.word	0x20000428
 8009448:	20000019 	.word	0x20000019
 800944c:	20000460 	.word	0x20000460
 8009450:	20000436 	.word	0x20000436
 8009454:	0800e724 	.word	0x0800e724
 8009458:	0800e72c 	.word	0x0800e72c
 800945c:	0800e9c8 	.word	0x0800e9c8
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009460:	4b39      	ldr	r3, [pc, #228]	; (8009548 <RadioSetRxConfig+0x410>)
 8009462:	2200      	movs	r2, #0
 8009464:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009468:	4b37      	ldr	r3, [pc, #220]	; (8009548 <RadioSetRxConfig+0x410>)
 800946a:	2201      	movs	r2, #1
 800946c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800946e:	4b36      	ldr	r3, [pc, #216]	; (8009548 <RadioSetRxConfig+0x410>)
 8009470:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009474:	2b05      	cmp	r3, #5
 8009476:	d004      	beq.n	8009482 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8009478:	4b33      	ldr	r3, [pc, #204]	; (8009548 <RadioSetRxConfig+0x410>)
 800947a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800947e:	2b06      	cmp	r3, #6
 8009480:	d10a      	bne.n	8009498 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8009482:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009484:	2b0b      	cmp	r3, #11
 8009486:	d803      	bhi.n	8009490 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8009488:	4b2f      	ldr	r3, [pc, #188]	; (8009548 <RadioSetRxConfig+0x410>)
 800948a:	220c      	movs	r2, #12
 800948c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800948e:	e006      	b.n	800949e <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009490:	4a2d      	ldr	r2, [pc, #180]	; (8009548 <RadioSetRxConfig+0x410>)
 8009492:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009494:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8009496:	e002      	b.n	800949e <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009498:	4a2b      	ldr	r2, [pc, #172]	; (8009548 <RadioSetRxConfig+0x410>)
 800949a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800949c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800949e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80094a2:	4b29      	ldr	r3, [pc, #164]	; (8009548 <RadioSetRxConfig+0x410>)
 80094a4:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80094a6:	4b29      	ldr	r3, [pc, #164]	; (800954c <RadioSetRxConfig+0x414>)
 80094a8:	781a      	ldrb	r2, [r3, #0]
 80094aa:	4b27      	ldr	r3, [pc, #156]	; (8009548 <RadioSetRxConfig+0x410>)
 80094ac:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80094ae:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80094b2:	4b25      	ldr	r3, [pc, #148]	; (8009548 <RadioSetRxConfig+0x410>)
 80094b4:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80094b8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80094bc:	4b22      	ldr	r3, [pc, #136]	; (8009548 <RadioSetRxConfig+0x410>)
 80094be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80094c2:	f000 fbd6 	bl	8009c72 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80094c6:	4b20      	ldr	r3, [pc, #128]	; (8009548 <RadioSetRxConfig+0x410>)
 80094c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	bf14      	ite	ne
 80094d0:	2301      	movne	r3, #1
 80094d2:	2300      	moveq	r3, #0
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7ff fd60 	bl	8008f9c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80094dc:	481c      	ldr	r0, [pc, #112]	; (8009550 <RadioSetRxConfig+0x418>)
 80094de:	f002 f843 	bl	800b568 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80094e2:	481c      	ldr	r0, [pc, #112]	; (8009554 <RadioSetRxConfig+0x41c>)
 80094e4:	f002 f912 	bl	800b70c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80094e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	4618      	mov	r0, r3
 80094ee:	f001 fe18 	bl	800b122 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80094f2:	4b15      	ldr	r3, [pc, #84]	; (8009548 <RadioSetRxConfig+0x410>)
 80094f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d10d      	bne.n	8009518 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80094fc:	f240 7036 	movw	r0, #1846	; 0x736
 8009500:	f002 fa60 	bl	800b9c4 <SUBGRF_ReadRegister>
 8009504:	4603      	mov	r3, r0
 8009506:	f023 0304 	bic.w	r3, r3, #4
 800950a:	b2db      	uxtb	r3, r3
 800950c:	4619      	mov	r1, r3
 800950e:	f240 7036 	movw	r0, #1846	; 0x736
 8009512:	f002 fa43 	bl	800b99c <SUBGRF_WriteRegister>
 8009516:	e00c      	b.n	8009532 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8009518:	f240 7036 	movw	r0, #1846	; 0x736
 800951c:	f002 fa52 	bl	800b9c4 <SUBGRF_ReadRegister>
 8009520:	4603      	mov	r3, r0
 8009522:	f043 0304 	orr.w	r3, r3, #4
 8009526:	b2db      	uxtb	r3, r3
 8009528:	4619      	mov	r1, r3
 800952a:	f240 7036 	movw	r0, #1846	; 0x736
 800952e:	f002 fa35 	bl	800b99c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8009532:	4b05      	ldr	r3, [pc, #20]	; (8009548 <RadioSetRxConfig+0x410>)
 8009534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009538:	609a      	str	r2, [r3, #8]
            break;
 800953a:	e000      	b.n	800953e <RadioSetRxConfig+0x406>
            break;
 800953c:	bf00      	nop
    }
}
 800953e:	bf00      	nop
 8009540:	3728      	adds	r7, #40	; 0x28
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20000428 	.word	0x20000428
 800954c:	20000019 	.word	0x20000019
 8009550:	20000460 	.word	0x20000460
 8009554:	20000436 	.word	0x20000436

08009558 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	60ba      	str	r2, [r7, #8]
 8009560:	607b      	str	r3, [r7, #4]
 8009562:	4603      	mov	r3, r0
 8009564:	73fb      	strb	r3, [r7, #15]
 8009566:	460b      	mov	r3, r1
 8009568:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800956a:	f002 fcee 	bl	800bf4a <RFW_DeInit>
    switch( modem )
 800956e:	7bfb      	ldrb	r3, [r7, #15]
 8009570:	2b03      	cmp	r3, #3
 8009572:	f000 80d7 	beq.w	8009724 <RadioSetTxConfig+0x1cc>
 8009576:	2b03      	cmp	r3, #3
 8009578:	f300 80e6 	bgt.w	8009748 <RadioSetTxConfig+0x1f0>
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <RadioSetTxConfig+0x2e>
 8009580:	2b01      	cmp	r3, #1
 8009582:	d061      	beq.n	8009648 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8009584:	e0e0      	b.n	8009748 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009586:	4b7c      	ldr	r3, [pc, #496]	; (8009778 <RadioSetTxConfig+0x220>)
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800958e:	4a7a      	ldr	r2, [pc, #488]	; (8009778 <RadioSetTxConfig+0x220>)
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8009594:	4b78      	ldr	r3, [pc, #480]	; (8009778 <RadioSetTxConfig+0x220>)
 8009596:	220b      	movs	r2, #11
 8009598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f002 fc07 	bl	800bdb0 <SUBGRF_GetFskBandwidthRegValue>
 80095a2:	4603      	mov	r3, r0
 80095a4:	461a      	mov	r2, r3
 80095a6:	4b74      	ldr	r3, [pc, #464]	; (8009778 <RadioSetTxConfig+0x220>)
 80095a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80095ac:	4a72      	ldr	r2, [pc, #456]	; (8009778 <RadioSetTxConfig+0x220>)
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80095b2:	4b71      	ldr	r3, [pc, #452]	; (8009778 <RadioSetTxConfig+0x220>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80095b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095ba:	00db      	lsls	r3, r3, #3
 80095bc:	b29a      	uxth	r2, r3
 80095be:	4b6e      	ldr	r3, [pc, #440]	; (8009778 <RadioSetTxConfig+0x220>)
 80095c0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80095c2:	4b6d      	ldr	r3, [pc, #436]	; (8009778 <RadioSetTxConfig+0x220>)
 80095c4:	2204      	movs	r2, #4
 80095c6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80095c8:	4b6b      	ldr	r3, [pc, #428]	; (8009778 <RadioSetTxConfig+0x220>)
 80095ca:	2218      	movs	r2, #24
 80095cc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80095ce:	4b6a      	ldr	r3, [pc, #424]	; (8009778 <RadioSetTxConfig+0x220>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80095d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80095d8:	f083 0301 	eor.w	r3, r3, #1
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	461a      	mov	r2, r3
 80095e0:	4b65      	ldr	r3, [pc, #404]	; (8009778 <RadioSetTxConfig+0x220>)
 80095e2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80095e4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d003      	beq.n	80095f4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80095ec:	4b62      	ldr	r3, [pc, #392]	; (8009778 <RadioSetTxConfig+0x220>)
 80095ee:	22f2      	movs	r2, #242	; 0xf2
 80095f0:	75da      	strb	r2, [r3, #23]
 80095f2:	e002      	b.n	80095fa <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80095f4:	4b60      	ldr	r3, [pc, #384]	; (8009778 <RadioSetTxConfig+0x220>)
 80095f6:	2201      	movs	r2, #1
 80095f8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80095fa:	4b5f      	ldr	r3, [pc, #380]	; (8009778 <RadioSetTxConfig+0x220>)
 80095fc:	2201      	movs	r2, #1
 80095fe:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8009600:	f000 fb37 	bl	8009c72 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8009604:	4b5c      	ldr	r3, [pc, #368]	; (8009778 <RadioSetTxConfig+0x220>)
 8009606:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800960a:	2b00      	cmp	r3, #0
 800960c:	bf14      	ite	ne
 800960e:	2301      	movne	r3, #1
 8009610:	2300      	moveq	r3, #0
 8009612:	b2db      	uxtb	r3, r3
 8009614:	4618      	mov	r0, r3
 8009616:	f7ff fcc1 	bl	8008f9c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800961a:	4858      	ldr	r0, [pc, #352]	; (800977c <RadioSetTxConfig+0x224>)
 800961c:	f001 ffa4 	bl	800b568 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009620:	4857      	ldr	r0, [pc, #348]	; (8009780 <RadioSetTxConfig+0x228>)
 8009622:	f002 f873 	bl	800b70c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009626:	4a57      	ldr	r2, [pc, #348]	; (8009784 <RadioSetTxConfig+0x22c>)
 8009628:	f107 0310 	add.w	r3, r7, #16
 800962c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009630:	e883 0003 	stmia.w	r3, {r0, r1}
 8009634:	f107 0310 	add.w	r3, r7, #16
 8009638:	4618      	mov	r0, r3
 800963a:	f001 fb9c 	bl	800ad76 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800963e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009642:	f001 fbe7 	bl	800ae14 <SUBGRF_SetWhiteningSeed>
            break;
 8009646:	e080      	b.n	800974a <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009648:	4b4b      	ldr	r3, [pc, #300]	; (8009778 <RadioSetTxConfig+0x220>)
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8009650:	6a3b      	ldr	r3, [r7, #32]
 8009652:	b2da      	uxtb	r2, r3
 8009654:	4b48      	ldr	r3, [pc, #288]	; (8009778 <RadioSetTxConfig+0x220>)
 8009656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800965a:	4a4b      	ldr	r2, [pc, #300]	; (8009788 <RadioSetTxConfig+0x230>)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4413      	add	r3, r2
 8009660:	781a      	ldrb	r2, [r3, #0]
 8009662:	4b45      	ldr	r3, [pc, #276]	; (8009778 <RadioSetTxConfig+0x220>)
 8009664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8009668:	4a43      	ldr	r2, [pc, #268]	; (8009778 <RadioSetTxConfig+0x220>)
 800966a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800966e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d105      	bne.n	8009684 <RadioSetTxConfig+0x12c>
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	2b0b      	cmp	r3, #11
 800967c:	d008      	beq.n	8009690 <RadioSetTxConfig+0x138>
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	2b0c      	cmp	r3, #12
 8009682:	d005      	beq.n	8009690 <RadioSetTxConfig+0x138>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d107      	bne.n	800969a <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	2b0c      	cmp	r3, #12
 800968e:	d104      	bne.n	800969a <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8009690:	4b39      	ldr	r3, [pc, #228]	; (8009778 <RadioSetTxConfig+0x220>)
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8009698:	e003      	b.n	80096a2 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800969a:	4b37      	ldr	r3, [pc, #220]	; (8009778 <RadioSetTxConfig+0x220>)
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80096a2:	4b35      	ldr	r3, [pc, #212]	; (8009778 <RadioSetTxConfig+0x220>)
 80096a4:	2201      	movs	r2, #1
 80096a6:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80096a8:	4b33      	ldr	r3, [pc, #204]	; (8009778 <RadioSetTxConfig+0x220>)
 80096aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80096ae:	2b05      	cmp	r3, #5
 80096b0:	d004      	beq.n	80096bc <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80096b2:	4b31      	ldr	r3, [pc, #196]	; (8009778 <RadioSetTxConfig+0x220>)
 80096b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80096b8:	2b06      	cmp	r3, #6
 80096ba:	d10a      	bne.n	80096d2 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 80096bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80096be:	2b0b      	cmp	r3, #11
 80096c0:	d803      	bhi.n	80096ca <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80096c2:	4b2d      	ldr	r3, [pc, #180]	; (8009778 <RadioSetTxConfig+0x220>)
 80096c4:	220c      	movs	r2, #12
 80096c6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80096c8:	e006      	b.n	80096d8 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80096ca:	4a2b      	ldr	r2, [pc, #172]	; (8009778 <RadioSetTxConfig+0x220>)
 80096cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80096ce:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80096d0:	e002      	b.n	80096d8 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80096d2:	4a29      	ldr	r2, [pc, #164]	; (8009778 <RadioSetTxConfig+0x220>)
 80096d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80096d6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80096d8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80096dc:	4b26      	ldr	r3, [pc, #152]	; (8009778 <RadioSetTxConfig+0x220>)
 80096de:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80096e0:	4b2a      	ldr	r3, [pc, #168]	; (800978c <RadioSetTxConfig+0x234>)
 80096e2:	781a      	ldrb	r2, [r3, #0]
 80096e4:	4b24      	ldr	r3, [pc, #144]	; (8009778 <RadioSetTxConfig+0x220>)
 80096e6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80096e8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80096ec:	4b22      	ldr	r3, [pc, #136]	; (8009778 <RadioSetTxConfig+0x220>)
 80096ee:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80096f2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80096f6:	4b20      	ldr	r3, [pc, #128]	; (8009778 <RadioSetTxConfig+0x220>)
 80096f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80096fc:	f000 fab9 	bl	8009c72 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8009700:	4b1d      	ldr	r3, [pc, #116]	; (8009778 <RadioSetTxConfig+0x220>)
 8009702:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009706:	2b00      	cmp	r3, #0
 8009708:	bf14      	ite	ne
 800970a:	2301      	movne	r3, #1
 800970c:	2300      	moveq	r3, #0
 800970e:	b2db      	uxtb	r3, r3
 8009710:	4618      	mov	r0, r3
 8009712:	f7ff fc43 	bl	8008f9c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009716:	4819      	ldr	r0, [pc, #100]	; (800977c <RadioSetTxConfig+0x224>)
 8009718:	f001 ff26 	bl	800b568 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800971c:	4818      	ldr	r0, [pc, #96]	; (8009780 <RadioSetTxConfig+0x228>)
 800971e:	f001 fff5 	bl	800b70c <SUBGRF_SetPacketParams>
            break;
 8009722:	e012      	b.n	800974a <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8009724:	2003      	movs	r0, #3
 8009726:	f7ff fc39 	bl	8008f9c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800972a:	4b13      	ldr	r3, [pc, #76]	; (8009778 <RadioSetTxConfig+0x220>)
 800972c:	2202      	movs	r2, #2
 800972e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8009732:	4a11      	ldr	r2, [pc, #68]	; (8009778 <RadioSetTxConfig+0x220>)
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009738:	4b0f      	ldr	r3, [pc, #60]	; (8009778 <RadioSetTxConfig+0x220>)
 800973a:	2216      	movs	r2, #22
 800973c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009740:	480e      	ldr	r0, [pc, #56]	; (800977c <RadioSetTxConfig+0x224>)
 8009742:	f001 ff11 	bl	800b568 <SUBGRF_SetModulationParams>
            break;
 8009746:	e000      	b.n	800974a <RadioSetTxConfig+0x1f2>
            break;
 8009748:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800974a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800974e:	4618      	mov	r0, r3
 8009750:	f002 fa40 	bl	800bbd4 <SUBGRF_SetRfTxPower>
 8009754:	4603      	mov	r3, r0
 8009756:	461a      	mov	r2, r3
 8009758:	4b07      	ldr	r3, [pc, #28]	; (8009778 <RadioSetTxConfig+0x220>)
 800975a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800975e:	4b06      	ldr	r3, [pc, #24]	; (8009778 <RadioSetTxConfig+0x220>)
 8009760:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009764:	4618      	mov	r0, r3
 8009766:	f002 fc04 	bl	800bf72 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800976a:	4a03      	ldr	r2, [pc, #12]	; (8009778 <RadioSetTxConfig+0x220>)
 800976c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800976e:	6053      	str	r3, [r2, #4]
}
 8009770:	bf00      	nop
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	20000428 	.word	0x20000428
 800977c:	20000460 	.word	0x20000460
 8009780:	20000436 	.word	0x20000436
 8009784:	0800e72c 	.word	0x0800e72c
 8009788:	0800e9c8 	.word	0x0800e9c8
 800978c:	20000019 	.word	0x20000019

08009790 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
    return true;
 8009798:	2301      	movs	r3, #1
}
 800979a:	4618      	mov	r0, r3
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	bc80      	pop	{r7}
 80097a2:	4770      	bx	lr

080097a4 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	2b0a      	cmp	r3, #10
 80097b6:	d83e      	bhi.n	8009836 <RadioGetLoRaBandwidthInHz+0x92>
 80097b8:	a201      	add	r2, pc, #4	; (adr r2, 80097c0 <RadioGetLoRaBandwidthInHz+0x1c>)
 80097ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097be:	bf00      	nop
 80097c0:	080097ed 	.word	0x080097ed
 80097c4:	080097fd 	.word	0x080097fd
 80097c8:	0800980d 	.word	0x0800980d
 80097cc:	0800981d 	.word	0x0800981d
 80097d0:	08009825 	.word	0x08009825
 80097d4:	0800982b 	.word	0x0800982b
 80097d8:	08009831 	.word	0x08009831
 80097dc:	08009837 	.word	0x08009837
 80097e0:	080097f5 	.word	0x080097f5
 80097e4:	08009805 	.word	0x08009805
 80097e8:	08009815 	.word	0x08009815
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80097ec:	f641 6384 	movw	r3, #7812	; 0x1e84
 80097f0:	60fb      	str	r3, [r7, #12]
        break;
 80097f2:	e020      	b.n	8009836 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80097f4:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80097f8:	60fb      	str	r3, [r7, #12]
        break;
 80097fa:	e01c      	b.n	8009836 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80097fc:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009800:	60fb      	str	r3, [r7, #12]
        break;
 8009802:	e018      	b.n	8009836 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8009804:	f245 1361 	movw	r3, #20833	; 0x5161
 8009808:	60fb      	str	r3, [r7, #12]
        break;
 800980a:	e014      	b.n	8009836 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800980c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009810:	60fb      	str	r3, [r7, #12]
        break;
 8009812:	e010      	b.n	8009836 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8009814:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8009818:	60fb      	str	r3, [r7, #12]
        break;
 800981a:	e00c      	b.n	8009836 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800981c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009820:	60fb      	str	r3, [r7, #12]
        break;
 8009822:	e008      	b.n	8009836 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8009824:	4b07      	ldr	r3, [pc, #28]	; (8009844 <RadioGetLoRaBandwidthInHz+0xa0>)
 8009826:	60fb      	str	r3, [r7, #12]
        break;
 8009828:	e005      	b.n	8009836 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800982a:	4b07      	ldr	r3, [pc, #28]	; (8009848 <RadioGetLoRaBandwidthInHz+0xa4>)
 800982c:	60fb      	str	r3, [r7, #12]
        break;
 800982e:	e002      	b.n	8009836 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8009830:	4b06      	ldr	r3, [pc, #24]	; (800984c <RadioGetLoRaBandwidthInHz+0xa8>)
 8009832:	60fb      	str	r3, [r7, #12]
        break;
 8009834:	bf00      	nop
    }

    return bandwidthInHz;
 8009836:	68fb      	ldr	r3, [r7, #12]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	bc80      	pop	{r7}
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	0001e848 	.word	0x0001e848
 8009848:	0003d090 	.word	0x0003d090
 800984c:	0007a120 	.word	0x0007a120

08009850 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	4608      	mov	r0, r1
 800985a:	4611      	mov	r1, r2
 800985c:	461a      	mov	r2, r3
 800985e:	4603      	mov	r3, r0
 8009860:	70fb      	strb	r3, [r7, #3]
 8009862:	460b      	mov	r3, r1
 8009864:	803b      	strh	r3, [r7, #0]
 8009866:	4613      	mov	r3, r2
 8009868:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800986a:	883b      	ldrh	r3, [r7, #0]
 800986c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800986e:	78ba      	ldrb	r2, [r7, #2]
 8009870:	f082 0201 	eor.w	r2, r2, #1
 8009874:	b2d2      	uxtb	r2, r2
 8009876:	2a00      	cmp	r2, #0
 8009878:	d001      	beq.n	800987e <RadioGetGfskTimeOnAirNumerator+0x2e>
 800987a:	2208      	movs	r2, #8
 800987c:	e000      	b.n	8009880 <RadioGetGfskTimeOnAirNumerator+0x30>
 800987e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8009880:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009882:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8009886:	7c3b      	ldrb	r3, [r7, #16]
 8009888:	7d39      	ldrb	r1, [r7, #20]
 800988a:	2900      	cmp	r1, #0
 800988c:	d001      	beq.n	8009892 <RadioGetGfskTimeOnAirNumerator+0x42>
 800988e:	2102      	movs	r1, #2
 8009890:	e000      	b.n	8009894 <RadioGetGfskTimeOnAirNumerator+0x44>
 8009892:	2100      	movs	r1, #0
 8009894:	440b      	add	r3, r1
 8009896:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009898:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 800989a:	4618      	mov	r0, r3
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	bc80      	pop	{r7}
 80098a2:	4770      	bx	lr

080098a4 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80098a4:	b480      	push	{r7}
 80098a6:	b08b      	sub	sp, #44	; 0x2c
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	4611      	mov	r1, r2
 80098b0:	461a      	mov	r2, r3
 80098b2:	460b      	mov	r3, r1
 80098b4:	71fb      	strb	r3, [r7, #7]
 80098b6:	4613      	mov	r3, r2
 80098b8:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	3304      	adds	r3, #4
 80098be:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80098c0:	2300      	movs	r3, #0
 80098c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2b05      	cmp	r3, #5
 80098ca:	d002      	beq.n	80098d2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	2b06      	cmp	r3, #6
 80098d0:	d104      	bne.n	80098dc <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80098d2:	88bb      	ldrh	r3, [r7, #4]
 80098d4:	2b0b      	cmp	r3, #11
 80098d6:	d801      	bhi.n	80098dc <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80098d8:	230c      	movs	r3, #12
 80098da:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d105      	bne.n	80098ee <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2b0b      	cmp	r3, #11
 80098e6:	d008      	beq.n	80098fa <RadioGetLoRaTimeOnAirNumerator+0x56>
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2b0c      	cmp	r3, #12
 80098ec:	d005      	beq.n	80098fa <RadioGetLoRaTimeOnAirNumerator+0x56>
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d105      	bne.n	8009900 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2b0c      	cmp	r3, #12
 80098f8:	d102      	bne.n	8009900 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80098fa:	2301      	movs	r3, #1
 80098fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009900:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009904:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8009906:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800990a:	2a00      	cmp	r2, #0
 800990c:	d001      	beq.n	8009912 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800990e:	2210      	movs	r2, #16
 8009910:	e000      	b.n	8009914 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8009912:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009914:	4413      	add	r3, r2
 8009916:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 800991c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800991e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8009922:	2a00      	cmp	r2, #0
 8009924:	d001      	beq.n	800992a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8009926:	2200      	movs	r2, #0
 8009928:	e000      	b.n	800992c <RadioGetLoRaTimeOnAirNumerator+0x88>
 800992a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 800992c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800992e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	2b06      	cmp	r3, #6
 8009934:	d803      	bhi.n	800993e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	623b      	str	r3, [r7, #32]
 800993c:	e00e      	b.n	800995c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	3308      	adds	r3, #8
 8009942:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8009944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009948:	2b00      	cmp	r3, #0
 800994a:	d004      	beq.n	8009956 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	3b02      	subs	r3, #2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	623b      	str	r3, [r7, #32]
 8009954:	e002      	b.n	800995c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	2b00      	cmp	r3, #0
 8009960:	da01      	bge.n	8009966 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8009966:	69fa      	ldr	r2, [r7, #28]
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	4413      	add	r3, r2
 800996c:	1e5a      	subs	r2, r3, #1
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	fb92 f3f3 	sdiv	r3, r2, r3
 8009974:	697a      	ldr	r2, [r7, #20]
 8009976:	fb03 f202 	mul.w	r2, r3, r2
 800997a:	88bb      	ldrh	r3, [r7, #4]
 800997c:	4413      	add	r3, r2
    int32_t intermediate =
 800997e:	330c      	adds	r3, #12
 8009980:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2b06      	cmp	r3, #6
 8009986:	d802      	bhi.n	800998e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	3302      	adds	r3, #2
 800998c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	1c5a      	adds	r2, r3, #1
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	3b02      	subs	r3, #2
 8009998:	fa02 f303 	lsl.w	r3, r2, r3
}
 800999c:	4618      	mov	r0, r3
 800999e:	372c      	adds	r7, #44	; 0x2c
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bc80      	pop	{r7}
 80099a4:	4770      	bx	lr
	...

080099a8 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08a      	sub	sp, #40	; 0x28
 80099ac:	af04      	add	r7, sp, #16
 80099ae:	60b9      	str	r1, [r7, #8]
 80099b0:	607a      	str	r2, [r7, #4]
 80099b2:	461a      	mov	r2, r3
 80099b4:	4603      	mov	r3, r0
 80099b6:	73fb      	strb	r3, [r7, #15]
 80099b8:	4613      	mov	r3, r2
 80099ba:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80099c0:	2301      	movs	r3, #1
 80099c2:	613b      	str	r3, [r7, #16]

    switch( modem )
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d002      	beq.n	80099d0 <RadioTimeOnAir+0x28>
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d017      	beq.n	80099fe <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80099ce:	e035      	b.n	8009a3c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80099d0:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80099d4:	8c3a      	ldrh	r2, [r7, #32]
 80099d6:	7bb9      	ldrb	r1, [r7, #14]
 80099d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099dc:	9301      	str	r3, [sp, #4]
 80099de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	4603      	mov	r3, r0
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f7ff ff32 	bl	8009850 <RadioGetGfskTimeOnAirNumerator>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099f2:	fb02 f303 	mul.w	r3, r2, r3
 80099f6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	613b      	str	r3, [r7, #16]
        break;
 80099fc:	e01e      	b.n	8009a3c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80099fe:	8c39      	ldrh	r1, [r7, #32]
 8009a00:	7bba      	ldrb	r2, [r7, #14]
 8009a02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a06:	9302      	str	r3, [sp, #8]
 8009a08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a0c:	9301      	str	r3, [sp, #4]
 8009a0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a12:	9300      	str	r3, [sp, #0]
 8009a14:	460b      	mov	r3, r1
 8009a16:	6879      	ldr	r1, [r7, #4]
 8009a18:	68b8      	ldr	r0, [r7, #8]
 8009a1a:	f7ff ff43 	bl	80098a4 <RadioGetLoRaTimeOnAirNumerator>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a24:	fb02 f303 	mul.w	r3, r2, r3
 8009a28:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8009a2a:	4a0a      	ldr	r2, [pc, #40]	; (8009a54 <RadioTimeOnAir+0xac>)
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	4413      	add	r3, r2
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7ff feb6 	bl	80097a4 <RadioGetLoRaBandwidthInHz>
 8009a38:	6138      	str	r0, [r7, #16]
        break;
 8009a3a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8009a3c:	697a      	ldr	r2, [r7, #20]
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	4413      	add	r3, r2
 8009a42:	1e5a      	subs	r2, r3, #1
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3718      	adds	r7, #24
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	0800e9c8 	.word	0x0800e9c8

08009a58 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	460b      	mov	r3, r1
 8009a62:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8009a64:	2300      	movs	r3, #0
 8009a66:	2200      	movs	r2, #0
 8009a68:	f240 2101 	movw	r1, #513	; 0x201
 8009a6c:	f240 2001 	movw	r0, #513	; 0x201
 8009a70:	f001 fc4c 	bl	800b30c <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8009a74:	4b70      	ldr	r3, [pc, #448]	; (8009c38 <RadioSend+0x1e0>)
 8009a76:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f002 f881 	bl	800bb84 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8009a82:	4b6d      	ldr	r3, [pc, #436]	; (8009c38 <RadioSend+0x1e0>)
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d112      	bne.n	8009ab0 <RadioSend+0x58>
 8009a8a:	4b6b      	ldr	r3, [pc, #428]	; (8009c38 <RadioSend+0x1e0>)
 8009a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a90:	2b06      	cmp	r3, #6
 8009a92:	d10d      	bne.n	8009ab0 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8009a94:	f640 0089 	movw	r0, #2185	; 0x889
 8009a98:	f001 ff94 	bl	800b9c4 <SUBGRF_ReadRegister>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	f023 0304 	bic.w	r3, r3, #4
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	f640 0089 	movw	r0, #2185	; 0x889
 8009aaa:	f001 ff77 	bl	800b99c <SUBGRF_WriteRegister>
 8009aae:	e00c      	b.n	8009aca <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8009ab0:	f640 0089 	movw	r0, #2185	; 0x889
 8009ab4:	f001 ff86 	bl	800b9c4 <SUBGRF_ReadRegister>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	f043 0304 	orr.w	r3, r3, #4
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	f640 0089 	movw	r0, #2185	; 0x889
 8009ac6:	f001 ff69 	bl	800b99c <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8009aca:	4b5b      	ldr	r3, [pc, #364]	; (8009c38 <RadioSend+0x1e0>)
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	f200 80a5 	bhi.w	8009c1e <RadioSend+0x1c6>
 8009ad4:	a201      	add	r2, pc, #4	; (adr r2, 8009adc <RadioSend+0x84>)
 8009ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ada:	bf00      	nop
 8009adc:	08009b07 	.word	0x08009b07
 8009ae0:	08009aed 	.word	0x08009aed
 8009ae4:	08009b67 	.word	0x08009b67
 8009ae8:	08009b87 	.word	0x08009b87
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8009aec:	4a52      	ldr	r2, [pc, #328]	; (8009c38 <RadioSend+0x1e0>)
 8009aee:	78fb      	ldrb	r3, [r7, #3]
 8009af0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009af2:	4852      	ldr	r0, [pc, #328]	; (8009c3c <RadioSend+0x1e4>)
 8009af4:	f001 fe0a 	bl	800b70c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009af8:	78fb      	ldrb	r3, [r7, #3]
 8009afa:	2200      	movs	r2, #0
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f001 f926 	bl	800ad50 <SUBGRF_SendPayload>
            break;
 8009b04:	e08c      	b.n	8009c20 <RadioSend+0x1c8>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8009b06:	f002 fa26 	bl	800bf56 <RFW_Is_Init>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d11d      	bne.n	8009b4c <RadioSend+0xf4>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8009b10:	f107 020d 	add.w	r2, r7, #13
 8009b14:	78fb      	ldrb	r3, [r7, #3]
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f002 fa34 	bl	800bf86 <RFW_TransmitInit>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10c      	bne.n	8009b3e <RadioSend+0xe6>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8009b24:	7b7a      	ldrb	r2, [r7, #13]
 8009b26:	4b44      	ldr	r3, [pc, #272]	; (8009c38 <RadioSend+0x1e0>)
 8009b28:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009b2a:	4844      	ldr	r0, [pc, #272]	; (8009c3c <RadioSend+0x1e4>)
 8009b2c:	f001 fdee 	bl	800b70c <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8009b30:	7b7b      	ldrb	r3, [r7, #13]
 8009b32:	2200      	movs	r2, #0
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 f90a 	bl	800ad50 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8009b3c:	e070      	b.n	8009c20 <RadioSend+0x1c8>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8009b3e:	4b40      	ldr	r3, [pc, #256]	; (8009c40 <RadioSend+0x1e8>)
 8009b40:	2201      	movs	r2, #1
 8009b42:	2100      	movs	r1, #0
 8009b44:	2002      	movs	r0, #2
 8009b46:	f003 fa0b 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
 8009b4a:	e072      	b.n	8009c32 <RadioSend+0x1da>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8009b4c:	4a3a      	ldr	r2, [pc, #232]	; (8009c38 <RadioSend+0x1e0>)
 8009b4e:	78fb      	ldrb	r3, [r7, #3]
 8009b50:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009b52:	483a      	ldr	r0, [pc, #232]	; (8009c3c <RadioSend+0x1e4>)
 8009b54:	f001 fdda 	bl	800b70c <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8009b58:	78fb      	ldrb	r3, [r7, #3]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f001 f8f6 	bl	800ad50 <SUBGRF_SendPayload>
            break;
 8009b64:	e05c      	b.n	8009c20 <RadioSend+0x1c8>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009b66:	4b34      	ldr	r3, [pc, #208]	; (8009c38 <RadioSend+0x1e0>)
 8009b68:	2202      	movs	r2, #2
 8009b6a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8009b6c:	4a32      	ldr	r2, [pc, #200]	; (8009c38 <RadioSend+0x1e0>)
 8009b6e:	78fb      	ldrb	r3, [r7, #3]
 8009b70:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009b72:	4832      	ldr	r0, [pc, #200]	; (8009c3c <RadioSend+0x1e4>)
 8009b74:	f001 fdca 	bl	800b70c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f001 f8e6 	bl	800ad50 <SUBGRF_SendPayload>
            break;
 8009b84:	e04c      	b.n	8009c20 <RadioSend+0x1c8>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8009b86:	78fb      	ldrb	r3, [r7, #3]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	6879      	ldr	r1, [r7, #4]
 8009b8c:	482d      	ldr	r0, [pc, #180]	; (8009c44 <RadioSend+0x1ec>)
 8009b8e:	f000 fc66 	bl	800a45e <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009b92:	4b29      	ldr	r3, [pc, #164]	; (8009c38 <RadioSend+0x1e0>)
 8009b94:	2202      	movs	r2, #2
 8009b96:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8009b98:	78fb      	ldrb	r3, [r7, #3]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	4b26      	ldr	r3, [pc, #152]	; (8009c38 <RadioSend+0x1e0>)
 8009ba0:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009ba2:	4826      	ldr	r0, [pc, #152]	; (8009c3c <RadioSend+0x1e4>)
 8009ba4:	f001 fdb2 	bl	800b70c <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8009ba8:	2100      	movs	r1, #0
 8009baa:	20f1      	movs	r0, #241	; 0xf1
 8009bac:	f000 f947 	bl	8009e3e <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	20f0      	movs	r0, #240	; 0xf0
 8009bb4:	f000 f943 	bl	8009e3e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8009bb8:	4b1f      	ldr	r3, [pc, #124]	; (8009c38 <RadioSend+0x1e0>)
 8009bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bbc:	2b64      	cmp	r3, #100	; 0x64
 8009bbe:	d108      	bne.n	8009bd2 <RadioSend+0x17a>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8009bc0:	2170      	movs	r1, #112	; 0x70
 8009bc2:	20f3      	movs	r0, #243	; 0xf3
 8009bc4:	f000 f93b 	bl	8009e3e <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8009bc8:	211d      	movs	r1, #29
 8009bca:	20f2      	movs	r0, #242	; 0xf2
 8009bcc:	f000 f937 	bl	8009e3e <RadioWrite>
 8009bd0:	e007      	b.n	8009be2 <RadioSend+0x18a>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8009bd2:	21e1      	movs	r1, #225	; 0xe1
 8009bd4:	20f3      	movs	r0, #243	; 0xf3
 8009bd6:	f000 f932 	bl	8009e3e <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8009bda:	2104      	movs	r1, #4
 8009bdc:	20f2      	movs	r0, #242	; 0xf2
 8009bde:	f000 f92e 	bl	8009e3e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8009be2:	78fb      	ldrb	r3, [r7, #3]
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	00db      	lsls	r3, r3, #3
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	3302      	adds	r3, #2
 8009bec:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8009bee:	89fb      	ldrh	r3, [r7, #14]
 8009bf0:	0a1b      	lsrs	r3, r3, #8
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	20f4      	movs	r0, #244	; 0xf4
 8009bfa:	f000 f920 	bl	8009e3e <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8009bfe:	89fb      	ldrh	r3, [r7, #14]
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	4619      	mov	r1, r3
 8009c04:	20f5      	movs	r0, #245	; 0xf5
 8009c06:	f000 f91a 	bl	8009e3e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8009c0a:	78fb      	ldrb	r3, [r7, #3]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8009c14:	4619      	mov	r1, r3
 8009c16:	480b      	ldr	r0, [pc, #44]	; (8009c44 <RadioSend+0x1ec>)
 8009c18:	f001 f89a 	bl	800ad50 <SUBGRF_SendPayload>
            break;
 8009c1c:	e000      	b.n	8009c20 <RadioSend+0x1c8>
        }
        default:
            break;
 8009c1e:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8009c20:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <RadioSend+0x1e0>)
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	4619      	mov	r1, r3
 8009c26:	4808      	ldr	r0, [pc, #32]	; (8009c48 <RadioSend+0x1f0>)
 8009c28:	f003 f812 	bl	800cc50 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8009c2c:	4806      	ldr	r0, [pc, #24]	; (8009c48 <RadioSend+0x1f0>)
 8009c2e:	f002 ff31 	bl	800ca94 <UTIL_TIMER_Start>
}
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	20000428 	.word	0x20000428
 8009c3c:	20000436 	.word	0x20000436
 8009c40:	0800e734 	.word	0x0800e734
 8009c44:	20000324 	.word	0x20000324
 8009c48:	20000480 	.word	0x20000480

08009c4c <RadioSleep>:

static void RadioSleep( void )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8009c52:	2300      	movs	r3, #0
 8009c54:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8009c56:	793b      	ldrb	r3, [r7, #4]
 8009c58:	f043 0304 	orr.w	r3, r3, #4
 8009c5c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8009c5e:	7938      	ldrb	r0, [r7, #4]
 8009c60:	f001 f952 	bl	800af08 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8009c64:	2002      	movs	r0, #2
 8009c66:	f7f7 ff88 	bl	8001b7a <HAL_Delay>
}
 8009c6a:	bf00      	nop
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <RadioStandby>:

static void RadioStandby( void )
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8009c76:	2000      	movs	r0, #0
 8009c78:	f001 f978 	bl	800af6c <SUBGRF_SetStandby>
}
 8009c7c:	bf00      	nop
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8009c88:	f002 f965 	bl	800bf56 <RFW_Is_Init>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d102      	bne.n	8009c98 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8009c92:	f002 f988 	bl	800bfa6 <RFW_ReceiveInit>
 8009c96:	e007      	b.n	8009ca8 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009c98:	2300      	movs	r3, #0
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f240 2162 	movw	r1, #610	; 0x262
 8009ca0:	f240 2062 	movw	r0, #610	; 0x262
 8009ca4:	f001 fb32 	bl	800b30c <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d006      	beq.n	8009cbc <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	480f      	ldr	r0, [pc, #60]	; (8009cf0 <RadioRx+0x70>)
 8009cb2:	f002 ffcd 	bl	800cc50 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8009cb6:	480e      	ldr	r0, [pc, #56]	; (8009cf0 <RadioRx+0x70>)
 8009cb8:	f002 feec 	bl	800ca94 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8009cbc:	4b0d      	ldr	r3, [pc, #52]	; (8009cf4 <RadioRx+0x74>)
 8009cbe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f001 ff5d 	bl	800bb84 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8009cca:	4b0a      	ldr	r3, [pc, #40]	; (8009cf4 <RadioRx+0x74>)
 8009ccc:	785b      	ldrb	r3, [r3, #1]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d004      	beq.n	8009cdc <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009cd2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009cd6:	f001 f985 	bl	800afe4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8009cda:	e005      	b.n	8009ce8 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8009cdc:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <RadioRx+0x74>)
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	019b      	lsls	r3, r3, #6
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f001 f97e 	bl	800afe4 <SUBGRF_SetRx>
}
 8009ce8:	bf00      	nop
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	20000498 	.word	0x20000498
 8009cf4:	20000428 	.word	0x20000428

08009cf8 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8009d00:	f002 f929 	bl	800bf56 <RFW_Is_Init>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d102      	bne.n	8009d10 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8009d0a:	f002 f94c 	bl	800bfa6 <RFW_ReceiveInit>
 8009d0e:	e007      	b.n	8009d20 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009d10:	2300      	movs	r3, #0
 8009d12:	2200      	movs	r2, #0
 8009d14:	f240 2162 	movw	r1, #610	; 0x262
 8009d18:	f240 2062 	movw	r0, #610	; 0x262
 8009d1c:	f001 faf6 	bl	800b30c <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d006      	beq.n	8009d34 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	480f      	ldr	r0, [pc, #60]	; (8009d68 <RadioRxBoosted+0x70>)
 8009d2a:	f002 ff91 	bl	800cc50 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8009d2e:	480e      	ldr	r0, [pc, #56]	; (8009d68 <RadioRxBoosted+0x70>)
 8009d30:	f002 feb0 	bl	800ca94 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8009d34:	4b0d      	ldr	r3, [pc, #52]	; (8009d6c <RadioRxBoosted+0x74>)
 8009d36:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f001 ff21 	bl	800bb84 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8009d42:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <RadioRxBoosted+0x74>)
 8009d44:	785b      	ldrb	r3, [r3, #1]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d004      	beq.n	8009d54 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8009d4a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009d4e:	f001 f969 	bl	800b024 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8009d52:	e005      	b.n	8009d60 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8009d54:	4b05      	ldr	r3, [pc, #20]	; (8009d6c <RadioRxBoosted+0x74>)
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	019b      	lsls	r3, r3, #6
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f001 f962 	bl	800b024 <SUBGRF_SetRxBoosted>
}
 8009d60:	bf00      	nop
 8009d62:	3708      	adds	r7, #8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	20000498 	.word	0x20000498
 8009d6c:	20000428 	.word	0x20000428

08009d70 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8009d7a:	4b07      	ldr	r3, [pc, #28]	; (8009d98 <RadioSetRxDutyCycle+0x28>)
 8009d7c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009d80:	2100      	movs	r1, #0
 8009d82:	4618      	mov	r0, r3
 8009d84:	f001 fefe 	bl	800bb84 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f001 f96e 	bl	800b06c <SUBGRF_SetRxDutyCycle>
}
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	20000428 	.word	0x20000428

08009d9c <RadioStartCad>:

static void RadioStartCad( void )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8009da0:	4b09      	ldr	r3, [pc, #36]	; (8009dc8 <RadioStartCad+0x2c>)
 8009da2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009da6:	2100      	movs	r1, #0
 8009da8:	4618      	mov	r0, r3
 8009daa:	f001 feeb 	bl	800bb84 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8009dae:	2300      	movs	r3, #0
 8009db0:	2200      	movs	r2, #0
 8009db2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8009db6:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8009dba:	f001 faa7 	bl	800b30c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8009dbe:	f001 f981 	bl	800b0c4 <SUBGRF_SetCad>
}
 8009dc2:	bf00      	nop
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20000428 	.word	0x20000428

08009dcc <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	70fb      	strb	r3, [r7, #3]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8009ddc:	883b      	ldrh	r3, [r7, #0]
 8009dde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009de2:	fb02 f303 	mul.w	r3, r2, r3
 8009de6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f001 faeb 	bl	800b3c4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8009dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f001 feee 	bl	800bbd4 <SUBGRF_SetRfTxPower>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8009dfc:	7afb      	ldrb	r3, [r7, #11]
 8009dfe:	2101      	movs	r1, #1
 8009e00:	4618      	mov	r0, r3
 8009e02:	f001 febf 	bl	800bb84 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8009e06:	f001 f96b 	bl	800b0e0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8009e0a:	68f9      	ldr	r1, [r7, #12]
 8009e0c:	4804      	ldr	r0, [pc, #16]	; (8009e20 <RadioSetTxContinuousWave+0x54>)
 8009e0e:	f002 ff1f 	bl	800cc50 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8009e12:	4803      	ldr	r0, [pc, #12]	; (8009e20 <RadioSetTxContinuousWave+0x54>)
 8009e14:	f002 fe3e 	bl	800ca94 <UTIL_TIMER_Start>
}
 8009e18:	bf00      	nop
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	20000480 	.word	0x20000480

08009e24 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8009e2e:	f001 fd22 	bl	800b876 <SUBGRF_GetRssiInst>
 8009e32:	4603      	mov	r3, r0
 8009e34:	b21b      	sxth	r3, r3
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b082      	sub	sp, #8
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	4603      	mov	r3, r0
 8009e46:	460a      	mov	r2, r1
 8009e48:	80fb      	strh	r3, [r7, #6]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8009e4e:	797a      	ldrb	r2, [r7, #5]
 8009e50:	88fb      	ldrh	r3, [r7, #6]
 8009e52:	4611      	mov	r1, r2
 8009e54:	4618      	mov	r0, r3
 8009e56:	f001 fda1 	bl	800b99c <SUBGRF_WriteRegister>
}
 8009e5a:	bf00      	nop
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b082      	sub	sp, #8
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	4603      	mov	r3, r0
 8009e6a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8009e6c:	88fb      	ldrh	r3, [r7, #6]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f001 fda8 	bl	800b9c4 <SUBGRF_ReadRegister>
 8009e74:	4603      	mov	r3, r0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b082      	sub	sp, #8
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	4603      	mov	r3, r0
 8009e86:	6039      	str	r1, [r7, #0]
 8009e88:	80fb      	strh	r3, [r7, #6]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8009e8e:	797b      	ldrb	r3, [r7, #5]
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	88fb      	ldrh	r3, [r7, #6]
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f001 fda8 	bl	800b9ec <SUBGRF_WriteRegisters>
}
 8009e9c:	bf00      	nop
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	6039      	str	r1, [r7, #0]
 8009eae:	80fb      	strh	r3, [r7, #6]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8009eb4:	797b      	ldrb	r3, [r7, #5]
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	88fb      	ldrh	r3, [r7, #6]
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f001 fdb7 	bl	800ba30 <SUBGRF_ReadRegisters>
}
 8009ec2:	bf00      	nop
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	460a      	mov	r2, r1
 8009ed6:	71fb      	strb	r3, [r7, #7]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8009edc:	79fb      	ldrb	r3, [r7, #7]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d10a      	bne.n	8009ef8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8009ee2:	4a0e      	ldr	r2, [pc, #56]	; (8009f1c <RadioSetMaxPayloadLength+0x50>)
 8009ee4:	79bb      	ldrb	r3, [r7, #6]
 8009ee6:	7013      	strb	r3, [r2, #0]
 8009ee8:	4b0c      	ldr	r3, [pc, #48]	; (8009f1c <RadioSetMaxPayloadLength+0x50>)
 8009eea:	781a      	ldrb	r2, [r3, #0]
 8009eec:	4b0c      	ldr	r3, [pc, #48]	; (8009f20 <RadioSetMaxPayloadLength+0x54>)
 8009eee:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009ef0:	480c      	ldr	r0, [pc, #48]	; (8009f24 <RadioSetMaxPayloadLength+0x58>)
 8009ef2:	f001 fc0b 	bl	800b70c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8009ef6:	e00d      	b.n	8009f14 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8009ef8:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <RadioSetMaxPayloadLength+0x54>)
 8009efa:	7d5b      	ldrb	r3, [r3, #21]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d109      	bne.n	8009f14 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8009f00:	4a06      	ldr	r2, [pc, #24]	; (8009f1c <RadioSetMaxPayloadLength+0x50>)
 8009f02:	79bb      	ldrb	r3, [r7, #6]
 8009f04:	7013      	strb	r3, [r2, #0]
 8009f06:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <RadioSetMaxPayloadLength+0x50>)
 8009f08:	781a      	ldrb	r2, [r3, #0]
 8009f0a:	4b05      	ldr	r3, [pc, #20]	; (8009f20 <RadioSetMaxPayloadLength+0x54>)
 8009f0c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009f0e:	4805      	ldr	r0, [pc, #20]	; (8009f24 <RadioSetMaxPayloadLength+0x58>)
 8009f10:	f001 fbfc 	bl	800b70c <SUBGRF_SetPacketParams>
}
 8009f14:	bf00      	nop
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	20000019 	.word	0x20000019
 8009f20:	20000428 	.word	0x20000428
 8009f24:	20000436 	.word	0x20000436

08009f28 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	4603      	mov	r3, r0
 8009f30:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009f32:	4a13      	ldr	r2, [pc, #76]	; (8009f80 <RadioSetPublicNetwork+0x58>)
 8009f34:	79fb      	ldrb	r3, [r7, #7]
 8009f36:	7313      	strb	r3, [r2, #12]
 8009f38:	4b11      	ldr	r3, [pc, #68]	; (8009f80 <RadioSetPublicNetwork+0x58>)
 8009f3a:	7b1a      	ldrb	r2, [r3, #12]
 8009f3c:	4b10      	ldr	r3, [pc, #64]	; (8009f80 <RadioSetPublicNetwork+0x58>)
 8009f3e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8009f40:	2001      	movs	r0, #1
 8009f42:	f7ff f82b 	bl	8008f9c <RadioSetModem>
    if( enable == true )
 8009f46:	79fb      	ldrb	r3, [r7, #7]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00a      	beq.n	8009f62 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8009f4c:	2134      	movs	r1, #52	; 0x34
 8009f4e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8009f52:	f001 fd23 	bl	800b99c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8009f56:	2144      	movs	r1, #68	; 0x44
 8009f58:	f240 7041 	movw	r0, #1857	; 0x741
 8009f5c:	f001 fd1e 	bl	800b99c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8009f60:	e009      	b.n	8009f76 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8009f62:	2114      	movs	r1, #20
 8009f64:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8009f68:	f001 fd18 	bl	800b99c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8009f6c:	2124      	movs	r1, #36	; 0x24
 8009f6e:	f240 7041 	movw	r0, #1857	; 0x741
 8009f72:	f001 fd13 	bl	800b99c <SUBGRF_WriteRegister>
}
 8009f76:	bf00      	nop
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	20000428 	.word	0x20000428

08009f84 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8009f88:	f001 fe58 	bl	800bc3c <SUBGRF_GetRadioWakeUpTime>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	3303      	adds	r3, #3
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8009f9c:	f000 f80e 	bl	8009fbc <RadioOnTxTimeoutProcess>
}
 8009fa0:	bf00      	nop
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8009fb0:	f000 f818 	bl	8009fe4 <RadioOnRxTimeoutProcess>
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <RadioOnTxTimeoutProcess+0x24>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d008      	beq.n	8009fda <RadioOnTxTimeoutProcess+0x1e>
 8009fc8:	4b05      	ldr	r3, [pc, #20]	; (8009fe0 <RadioOnTxTimeoutProcess+0x24>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8009fd2:	4b03      	ldr	r3, [pc, #12]	; (8009fe0 <RadioOnTxTimeoutProcess+0x24>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	4798      	blx	r3
    }
}
 8009fda:	bf00      	nop
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	20000424 	.word	0x20000424

08009fe4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009fe8:	4b07      	ldr	r3, [pc, #28]	; (800a008 <RadioOnRxTimeoutProcess+0x24>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d008      	beq.n	800a002 <RadioOnRxTimeoutProcess+0x1e>
 8009ff0:	4b05      	ldr	r3, [pc, #20]	; (800a008 <RadioOnRxTimeoutProcess+0x24>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d003      	beq.n	800a002 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8009ffa:	4b03      	ldr	r3, [pc, #12]	; (800a008 <RadioOnRxTimeoutProcess+0x24>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	4798      	blx	r3
    }
}
 800a002:	bf00      	nop
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	20000424 	.word	0x20000424

0800a00c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	4603      	mov	r3, r0
 800a014:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800a016:	4a05      	ldr	r2, [pc, #20]	; (800a02c <RadioOnDioIrq+0x20>)
 800a018:	88fb      	ldrh	r3, [r7, #6]
 800a01a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800a01e:	f000 f807 	bl	800a030 <RadioIrqProcess>
}
 800a022:	bf00      	nop
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	20000428 	.word	0x20000428

0800a030 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800a030:	b590      	push	{r4, r7, lr}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800a03a:	2300      	movs	r3, #0
 800a03c:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 800a03e:	4bb5      	ldr	r3, [pc, #724]	; (800a314 <RadioIrqProcess+0x2e4>)
 800a040:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a048:	f000 810c 	beq.w	800a264 <RadioIrqProcess+0x234>
 800a04c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a050:	f300 81b5 	bgt.w	800a3be <RadioIrqProcess+0x38e>
 800a054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a058:	f000 80f0 	beq.w	800a23c <RadioIrqProcess+0x20c>
 800a05c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a060:	f300 81ad 	bgt.w	800a3be <RadioIrqProcess+0x38e>
 800a064:	2b80      	cmp	r3, #128	; 0x80
 800a066:	f000 80d5 	beq.w	800a214 <RadioIrqProcess+0x1e4>
 800a06a:	2b80      	cmp	r3, #128	; 0x80
 800a06c:	f300 81a7 	bgt.w	800a3be <RadioIrqProcess+0x38e>
 800a070:	2b20      	cmp	r3, #32
 800a072:	dc49      	bgt.n	800a108 <RadioIrqProcess+0xd8>
 800a074:	2b00      	cmp	r3, #0
 800a076:	f340 81a2 	ble.w	800a3be <RadioIrqProcess+0x38e>
 800a07a:	3b01      	subs	r3, #1
 800a07c:	2b1f      	cmp	r3, #31
 800a07e:	f200 819e 	bhi.w	800a3be <RadioIrqProcess+0x38e>
 800a082:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <RadioIrqProcess+0x58>)
 800a084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a088:	0800a111 	.word	0x0800a111
 800a08c:	0800a14b 	.word	0x0800a14b
 800a090:	0800a3bf 	.word	0x0800a3bf
 800a094:	0800a2dd 	.word	0x0800a2dd
 800a098:	0800a3bf 	.word	0x0800a3bf
 800a09c:	0800a3bf 	.word	0x0800a3bf
 800a0a0:	0800a3bf 	.word	0x0800a3bf
 800a0a4:	0800a2eb 	.word	0x0800a2eb
 800a0a8:	0800a3bf 	.word	0x0800a3bf
 800a0ac:	0800a3bf 	.word	0x0800a3bf
 800a0b0:	0800a3bf 	.word	0x0800a3bf
 800a0b4:	0800a3bf 	.word	0x0800a3bf
 800a0b8:	0800a3bf 	.word	0x0800a3bf
 800a0bc:	0800a3bf 	.word	0x0800a3bf
 800a0c0:	0800a3bf 	.word	0x0800a3bf
 800a0c4:	0800a307 	.word	0x0800a307
 800a0c8:	0800a3bf 	.word	0x0800a3bf
 800a0cc:	0800a3bf 	.word	0x0800a3bf
 800a0d0:	0800a3bf 	.word	0x0800a3bf
 800a0d4:	0800a3bf 	.word	0x0800a3bf
 800a0d8:	0800a3bf 	.word	0x0800a3bf
 800a0dc:	0800a3bf 	.word	0x0800a3bf
 800a0e0:	0800a3bf 	.word	0x0800a3bf
 800a0e4:	0800a3bf 	.word	0x0800a3bf
 800a0e8:	0800a3bf 	.word	0x0800a3bf
 800a0ec:	0800a3bf 	.word	0x0800a3bf
 800a0f0:	0800a3bf 	.word	0x0800a3bf
 800a0f4:	0800a3bf 	.word	0x0800a3bf
 800a0f8:	0800a3bf 	.word	0x0800a3bf
 800a0fc:	0800a3bf 	.word	0x0800a3bf
 800a100:	0800a3bf 	.word	0x0800a3bf
 800a104:	0800a341 	.word	0x0800a341
 800a108:	2b40      	cmp	r3, #64	; 0x40
 800a10a:	f000 813a 	beq.w	800a382 <RadioIrqProcess+0x352>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 800a10e:	e156      	b.n	800a3be <RadioIrqProcess+0x38e>
        TimerStop( &TxTimeoutTimer );
 800a110:	4881      	ldr	r0, [pc, #516]	; (800a318 <RadioIrqProcess+0x2e8>)
 800a112:	f002 fd2d 	bl	800cb70 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800a116:	2000      	movs	r0, #0
 800a118:	f000 ff28 	bl	800af6c <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 800a11c:	f001 ff22 	bl	800bf64 <RFW_Is_LongPacketModeEnabled>
 800a120:	4603      	mov	r3, r0
 800a122:	2b01      	cmp	r3, #1
 800a124:	d101      	bne.n	800a12a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800a126:	f001 ff46 	bl	800bfb6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800a12a:	4b7c      	ldr	r3, [pc, #496]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f000 8147 	beq.w	800a3c2 <RadioIrqProcess+0x392>
 800a134:	4b79      	ldr	r3, [pc, #484]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 8141 	beq.w	800a3c2 <RadioIrqProcess+0x392>
            RadioEvents->TxDone( );
 800a140:	4b76      	ldr	r3, [pc, #472]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4798      	blx	r3
        break;
 800a148:	e13b      	b.n	800a3c2 <RadioIrqProcess+0x392>
        TimerStop( &RxTimeoutTimer );
 800a14a:	4875      	ldr	r0, [pc, #468]	; (800a320 <RadioIrqProcess+0x2f0>)
 800a14c:	f002 fd10 	bl	800cb70 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800a150:	4b70      	ldr	r3, [pc, #448]	; (800a314 <RadioIrqProcess+0x2e4>)
 800a152:	785b      	ldrb	r3, [r3, #1]
 800a154:	f083 0301 	eor.w	r3, r3, #1
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d014      	beq.n	800a188 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800a15e:	2000      	movs	r0, #0
 800a160:	f000 ff04 	bl	800af6c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 800a164:	2100      	movs	r1, #0
 800a166:	f640 1002 	movw	r0, #2306	; 0x902
 800a16a:	f001 fc17 	bl	800b99c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800a16e:	f640 1044 	movw	r0, #2372	; 0x944
 800a172:	f001 fc27 	bl	800b9c4 <SUBGRF_ReadRegister>
 800a176:	4603      	mov	r3, r0
 800a178:	f043 0302 	orr.w	r3, r3, #2
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	4619      	mov	r1, r3
 800a180:	f640 1044 	movw	r0, #2372	; 0x944
 800a184:	f001 fc0a 	bl	800b99c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 800a188:	1dfb      	adds	r3, r7, #7
 800a18a:	22ff      	movs	r2, #255	; 0xff
 800a18c:	4619      	mov	r1, r3
 800a18e:	4865      	ldr	r0, [pc, #404]	; (800a324 <RadioIrqProcess+0x2f4>)
 800a190:	f000 fdbc 	bl	800ad0c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 800a194:	4864      	ldr	r0, [pc, #400]	; (800a328 <RadioIrqProcess+0x2f8>)
 800a196:	f001 fbaf 	bl	800b8f8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800a19a:	4b60      	ldr	r3, [pc, #384]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d036      	beq.n	800a210 <RadioIrqProcess+0x1e0>
 800a1a2:	4b5e      	ldr	r3, [pc, #376]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d031      	beq.n	800a210 <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 800a1ac:	4b59      	ldr	r3, [pc, #356]	; (800a314 <RadioIrqProcess+0x2e4>)
 800a1ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d10e      	bne.n	800a1d4 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800a1b6:	4b59      	ldr	r3, [pc, #356]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	689c      	ldr	r4, [r3, #8]
 800a1bc:	79fb      	ldrb	r3, [r7, #7]
 800a1be:	b299      	uxth	r1, r3
 800a1c0:	4b54      	ldr	r3, [pc, #336]	; (800a314 <RadioIrqProcess+0x2e4>)
 800a1c2:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800a1c6:	b21a      	sxth	r2, r3
 800a1c8:	4b52      	ldr	r3, [pc, #328]	; (800a314 <RadioIrqProcess+0x2e4>)
 800a1ca:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800a1ce:	4855      	ldr	r0, [pc, #340]	; (800a324 <RadioIrqProcess+0x2f4>)
 800a1d0:	47a0      	blx	r4
                break;
 800a1d2:	e01e      	b.n	800a212 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800a1d4:	4b4f      	ldr	r3, [pc, #316]	; (800a314 <RadioIrqProcess+0x2e4>)
 800a1d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d8:	463a      	mov	r2, r7
 800a1da:	4611      	mov	r1, r2
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f001 fe0f 	bl	800be00 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800a1e2:	4b4e      	ldr	r3, [pc, #312]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	689c      	ldr	r4, [r3, #8]
 800a1e8:	79fb      	ldrb	r3, [r7, #7]
 800a1ea:	b299      	uxth	r1, r3
 800a1ec:	4b49      	ldr	r3, [pc, #292]	; (800a314 <RadioIrqProcess+0x2e4>)
 800a1ee:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800a1f2:	b218      	sxth	r0, r3
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a1fa:	4a4c      	ldr	r2, [pc, #304]	; (800a32c <RadioIrqProcess+0x2fc>)
 800a1fc:	fb82 c203 	smull	ip, r2, r2, r3
 800a200:	1192      	asrs	r2, r2, #6
 800a202:	17db      	asrs	r3, r3, #31
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	b25b      	sxtb	r3, r3
 800a208:	4602      	mov	r2, r0
 800a20a:	4846      	ldr	r0, [pc, #280]	; (800a324 <RadioIrqProcess+0x2f4>)
 800a20c:	47a0      	blx	r4
                break;
 800a20e:	e000      	b.n	800a212 <RadioIrqProcess+0x1e2>
        }
 800a210:	bf00      	nop
        break;
 800a212:	e0e3      	b.n	800a3dc <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800a214:	2000      	movs	r0, #0
 800a216:	f000 fea9 	bl	800af6c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a21a:	4b40      	ldr	r3, [pc, #256]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f000 80d1 	beq.w	800a3c6 <RadioIrqProcess+0x396>
 800a224:	4b3d      	ldr	r3, [pc, #244]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f000 80cb 	beq.w	800a3c6 <RadioIrqProcess+0x396>
            RadioEvents->CadDone( false );
 800a230:	4b3a      	ldr	r3, [pc, #232]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	2000      	movs	r0, #0
 800a238:	4798      	blx	r3
        break;
 800a23a:	e0c4      	b.n	800a3c6 <RadioIrqProcess+0x396>
        SUBGRF_SetStandby( STDBY_RC );
 800a23c:	2000      	movs	r0, #0
 800a23e:	f000 fe95 	bl	800af6c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a242:	4b36      	ldr	r3, [pc, #216]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	f000 80bf 	beq.w	800a3ca <RadioIrqProcess+0x39a>
 800a24c:	4b33      	ldr	r3, [pc, #204]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	2b00      	cmp	r3, #0
 800a254:	f000 80b9 	beq.w	800a3ca <RadioIrqProcess+0x39a>
            RadioEvents->CadDone( true );
 800a258:	4b30      	ldr	r3, [pc, #192]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	2001      	movs	r0, #1
 800a260:	4798      	blx	r3
        break;
 800a262:	e0b2      	b.n	800a3ca <RadioIrqProcess+0x39a>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800a264:	4b32      	ldr	r3, [pc, #200]	; (800a330 <RadioIrqProcess+0x300>)
 800a266:	2201      	movs	r2, #1
 800a268:	2100      	movs	r1, #0
 800a26a:	2002      	movs	r0, #2
 800a26c:	f002 fe78 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800a270:	f000 fd32 	bl	800acd8 <SUBGRF_GetOperatingMode>
 800a274:	4603      	mov	r3, r0
 800a276:	2b04      	cmp	r3, #4
 800a278:	d115      	bne.n	800a2a6 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 800a27a:	4827      	ldr	r0, [pc, #156]	; (800a318 <RadioIrqProcess+0x2e8>)
 800a27c:	f002 fc78 	bl	800cb70 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800a280:	2000      	movs	r0, #0
 800a282:	f000 fe73 	bl	800af6c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a286:	4b25      	ldr	r3, [pc, #148]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f000 809f 	beq.w	800a3ce <RadioIrqProcess+0x39e>
 800a290:	4b22      	ldr	r3, [pc, #136]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	f000 8099 	beq.w	800a3ce <RadioIrqProcess+0x39e>
                RadioEvents->TxTimeout( );
 800a29c:	4b1f      	ldr	r3, [pc, #124]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	4798      	blx	r3
        break;
 800a2a4:	e093      	b.n	800a3ce <RadioIrqProcess+0x39e>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800a2a6:	f000 fd17 	bl	800acd8 <SUBGRF_GetOperatingMode>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b05      	cmp	r3, #5
 800a2ae:	f040 808e 	bne.w	800a3ce <RadioIrqProcess+0x39e>
            TimerStop( &RxTimeoutTimer );
 800a2b2:	481b      	ldr	r0, [pc, #108]	; (800a320 <RadioIrqProcess+0x2f0>)
 800a2b4:	f002 fc5c 	bl	800cb70 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	f000 fe57 	bl	800af6c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a2be:	4b17      	ldr	r3, [pc, #92]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f000 8083 	beq.w	800a3ce <RadioIrqProcess+0x39e>
 800a2c8:	4b14      	ldr	r3, [pc, #80]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d07d      	beq.n	800a3ce <RadioIrqProcess+0x39e>
                RadioEvents->RxTimeout( );
 800a2d2:	4b12      	ldr	r3, [pc, #72]	; (800a31c <RadioIrqProcess+0x2ec>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	4798      	blx	r3
        break;
 800a2da:	e078      	b.n	800a3ce <RadioIrqProcess+0x39e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800a2dc:	4b15      	ldr	r3, [pc, #84]	; (800a334 <RadioIrqProcess+0x304>)
 800a2de:	2201      	movs	r2, #1
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	2002      	movs	r0, #2
 800a2e4:	f002 fe3c 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a2e8:	e078      	b.n	800a3dc <RadioIrqProcess+0x3ac>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800a2ea:	4b13      	ldr	r3, [pc, #76]	; (800a338 <RadioIrqProcess+0x308>)
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	2002      	movs	r0, #2
 800a2f2:	f002 fe35 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 800a2f6:	f001 fe2e 	bl	800bf56 <RFW_Is_Init>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d168      	bne.n	800a3d2 <RadioIrqProcess+0x3a2>
            RFW_ReceivePayload( );
 800a300:	f001 fe5f 	bl	800bfc2 <RFW_ReceivePayload>
        break;
 800a304:	e065      	b.n	800a3d2 <RadioIrqProcess+0x3a2>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800a306:	4b0d      	ldr	r3, [pc, #52]	; (800a33c <RadioIrqProcess+0x30c>)
 800a308:	2201      	movs	r2, #1
 800a30a:	2100      	movs	r1, #0
 800a30c:	2002      	movs	r0, #2
 800a30e:	f002 fe27 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a312:	e063      	b.n	800a3dc <RadioIrqProcess+0x3ac>
 800a314:	20000428 	.word	0x20000428
 800a318:	20000480 	.word	0x20000480
 800a31c:	20000424 	.word	0x20000424
 800a320:	20000498 	.word	0x20000498
 800a324:	20000324 	.word	0x20000324
 800a328:	2000044c 	.word	0x2000044c
 800a32c:	10624dd3 	.word	0x10624dd3
 800a330:	0800e74c 	.word	0x0800e74c
 800a334:	0800e760 	.word	0x0800e760
 800a338:	0800e76c 	.word	0x0800e76c
 800a33c:	0800e778 	.word	0x0800e778
        TimerStop( &RxTimeoutTimer );
 800a340:	4828      	ldr	r0, [pc, #160]	; (800a3e4 <RadioIrqProcess+0x3b4>)
 800a342:	f002 fc15 	bl	800cb70 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800a346:	4b28      	ldr	r3, [pc, #160]	; (800a3e8 <RadioIrqProcess+0x3b8>)
 800a348:	785b      	ldrb	r3, [r3, #1]
 800a34a:	f083 0301 	eor.w	r3, r3, #1
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <RadioIrqProcess+0x32a>
            SUBGRF_SetStandby( STDBY_RC );
 800a354:	2000      	movs	r0, #0
 800a356:	f000 fe09 	bl	800af6c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a35a:	4b24      	ldr	r3, [pc, #144]	; (800a3ec <RadioIrqProcess+0x3bc>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d039      	beq.n	800a3d6 <RadioIrqProcess+0x3a6>
 800a362:	4b22      	ldr	r3, [pc, #136]	; (800a3ec <RadioIrqProcess+0x3bc>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d034      	beq.n	800a3d6 <RadioIrqProcess+0x3a6>
            RadioEvents->RxTimeout( );
 800a36c:	4b1f      	ldr	r3, [pc, #124]	; (800a3ec <RadioIrqProcess+0x3bc>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800a374:	4b1e      	ldr	r3, [pc, #120]	; (800a3f0 <RadioIrqProcess+0x3c0>)
 800a376:	2201      	movs	r2, #1
 800a378:	2100      	movs	r1, #0
 800a37a:	2002      	movs	r0, #2
 800a37c:	f002 fdf0 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a380:	e029      	b.n	800a3d6 <RadioIrqProcess+0x3a6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800a382:	4b1c      	ldr	r3, [pc, #112]	; (800a3f4 <RadioIrqProcess+0x3c4>)
 800a384:	2201      	movs	r2, #1
 800a386:	2100      	movs	r1, #0
 800a388:	2002      	movs	r0, #2
 800a38a:	f002 fde9 	bl	800cf60 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800a38e:	4b16      	ldr	r3, [pc, #88]	; (800a3e8 <RadioIrqProcess+0x3b8>)
 800a390:	785b      	ldrb	r3, [r3, #1]
 800a392:	f083 0301 	eor.w	r3, r3, #1
 800a396:	b2db      	uxtb	r3, r3
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <RadioIrqProcess+0x372>
            SUBGRF_SetStandby( STDBY_RC );
 800a39c:	2000      	movs	r0, #0
 800a39e:	f000 fde5 	bl	800af6c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800a3a2:	4b12      	ldr	r3, [pc, #72]	; (800a3ec <RadioIrqProcess+0x3bc>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d017      	beq.n	800a3da <RadioIrqProcess+0x3aa>
 800a3aa:	4b10      	ldr	r3, [pc, #64]	; (800a3ec <RadioIrqProcess+0x3bc>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d012      	beq.n	800a3da <RadioIrqProcess+0x3aa>
            RadioEvents->RxError( );
 800a3b4:	4b0d      	ldr	r3, [pc, #52]	; (800a3ec <RadioIrqProcess+0x3bc>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	4798      	blx	r3
        break;
 800a3bc:	e00d      	b.n	800a3da <RadioIrqProcess+0x3aa>
        break;
 800a3be:	bf00      	nop
 800a3c0:	e00c      	b.n	800a3dc <RadioIrqProcess+0x3ac>
        break;
 800a3c2:	bf00      	nop
 800a3c4:	e00a      	b.n	800a3dc <RadioIrqProcess+0x3ac>
        break;
 800a3c6:	bf00      	nop
 800a3c8:	e008      	b.n	800a3dc <RadioIrqProcess+0x3ac>
        break;
 800a3ca:	bf00      	nop
 800a3cc:	e006      	b.n	800a3dc <RadioIrqProcess+0x3ac>
        break;
 800a3ce:	bf00      	nop
 800a3d0:	e004      	b.n	800a3dc <RadioIrqProcess+0x3ac>
        break;
 800a3d2:	bf00      	nop
 800a3d4:	e002      	b.n	800a3dc <RadioIrqProcess+0x3ac>
        break;
 800a3d6:	bf00      	nop
 800a3d8:	e000      	b.n	800a3dc <RadioIrqProcess+0x3ac>
        break;
 800a3da:	bf00      	nop
  }
}
 800a3dc:	bf00      	nop
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd90      	pop	{r4, r7, pc}
 800a3e4:	20000498 	.word	0x20000498
 800a3e8:	20000428 	.word	0x20000428
 800a3ec:	20000424 	.word	0x20000424
 800a3f0:	0800e784 	.word	0x0800e784
 800a3f4:	0800e790 	.word	0x0800e790

0800a3f8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800a3fc:	4b09      	ldr	r3, [pc, #36]	; (800a424 <RadioTxPrbs+0x2c>)
 800a3fe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a402:	2101      	movs	r1, #1
 800a404:	4618      	mov	r0, r3
 800a406:	f001 fbbd 	bl	800bb84 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800a40a:	4b07      	ldr	r3, [pc, #28]	; (800a428 <RadioTxPrbs+0x30>)
 800a40c:	212d      	movs	r1, #45	; 0x2d
 800a40e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a412:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800a414:	f000 fe6d 	bl	800b0f2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800a418:	4804      	ldr	r0, [pc, #16]	; (800a42c <RadioTxPrbs+0x34>)
 800a41a:	f000 fdc3 	bl	800afa4 <SUBGRF_SetTx>
}
 800a41e:	bf00      	nop
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	20000428 	.word	0x20000428
 800a428:	08009e3f 	.word	0x08009e3f
 800a42c:	000fffff 	.word	0x000fffff

0800a430 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800a43a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a43e:	4618      	mov	r0, r3
 800a440:	f001 fbc8 	bl	800bbd4 <SUBGRF_SetRfTxPower>
 800a444:	4603      	mov	r3, r0
 800a446:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800a448:	7bfb      	ldrb	r3, [r7, #15]
 800a44a:	2101      	movs	r1, #1
 800a44c:	4618      	mov	r0, r3
 800a44e:	f001 fb99 	bl	800bb84 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800a452:	f000 fe45 	bl	800b0e0 <SUBGRF_SetTxContinuousWave>
}
 800a456:	bf00      	nop
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800a45e:	b480      	push	{r7}
 800a460:	b089      	sub	sp, #36	; 0x24
 800a462:	af00      	add	r7, sp, #0
 800a464:	60f8      	str	r0, [r7, #12]
 800a466:	60b9      	str	r1, [r7, #8]
 800a468:	4613      	mov	r3, r2
 800a46a:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 800a474:	2300      	movs	r3, #0
 800a476:	61bb      	str	r3, [r7, #24]
 800a478:	e011      	b.n	800a49e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	4413      	add	r3, r2
 800a480:	781a      	ldrb	r2, [r3, #0]
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	68b9      	ldr	r1, [r7, #8]
 800a486:	440b      	add	r3, r1
 800a488:	43d2      	mvns	r2, r2
 800a48a:	b2d2      	uxtb	r2, r2
 800a48c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	4413      	add	r3, r2
 800a494:	2200      	movs	r2, #0
 800a496:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	3301      	adds	r3, #1
 800a49c:	61bb      	str	r3, [r7, #24]
 800a49e:	79fb      	ldrb	r3, [r7, #7]
 800a4a0:	69ba      	ldr	r2, [r7, #24]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	dbe9      	blt.n	800a47a <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	61bb      	str	r3, [r7, #24]
 800a4aa:	e049      	b.n	800a540 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	425a      	negs	r2, r3
 800a4b0:	f003 0307 	and.w	r3, r3, #7
 800a4b4:	f002 0207 	and.w	r2, r2, #7
 800a4b8:	bf58      	it	pl
 800a4ba:	4253      	negpl	r3, r2
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	f1c3 0307 	rsb	r3, r3, #7
 800a4c2:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	da00      	bge.n	800a4cc <payload_integration+0x6e>
 800a4ca:	3307      	adds	r3, #7
 800a4cc:	10db      	asrs	r3, r3, #3
 800a4ce:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	425a      	negs	r2, r3
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	f002 0207 	and.w	r2, r2, #7
 800a4de:	bf58      	it	pl
 800a4e0:	4253      	negpl	r3, r2
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	f1c3 0307 	rsb	r3, r3, #7
 800a4e8:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	da00      	bge.n	800a4f4 <payload_integration+0x96>
 800a4f2:	3307      	adds	r3, #7
 800a4f4:	10db      	asrs	r3, r3, #3
 800a4f6:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800a4f8:	7dbb      	ldrb	r3, [r7, #22]
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	461a      	mov	r2, r3
 800a502:	7dfb      	ldrb	r3, [r7, #23]
 800a504:	fa42 f303 	asr.w	r3, r2, r3
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800a510:	7ffa      	ldrb	r2, [r7, #31]
 800a512:	7cfb      	ldrb	r3, [r7, #19]
 800a514:	4053      	eors	r3, r2
 800a516:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800a518:	7d3b      	ldrb	r3, [r7, #20]
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	4413      	add	r3, r2
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	b25a      	sxtb	r2, r3
 800a522:	7ff9      	ldrb	r1, [r7, #31]
 800a524:	7d7b      	ldrb	r3, [r7, #21]
 800a526:	fa01 f303 	lsl.w	r3, r1, r3
 800a52a:	b25b      	sxtb	r3, r3
 800a52c:	4313      	orrs	r3, r2
 800a52e:	b259      	sxtb	r1, r3
 800a530:	7d3b      	ldrb	r3, [r7, #20]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	4413      	add	r3, r2
 800a536:	b2ca      	uxtb	r2, r1
 800a538:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	3301      	adds	r3, #1
 800a53e:	61bb      	str	r3, [r7, #24]
 800a540:	79fb      	ldrb	r3, [r7, #7]
 800a542:	00db      	lsls	r3, r3, #3
 800a544:	69ba      	ldr	r2, [r7, #24]
 800a546:	429a      	cmp	r2, r3
 800a548:	dbb0      	blt.n	800a4ac <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800a54a:	7ffb      	ldrb	r3, [r7, #31]
 800a54c:	01db      	lsls	r3, r3, #7
 800a54e:	b25a      	sxtb	r2, r3
 800a550:	7ffb      	ldrb	r3, [r7, #31]
 800a552:	019b      	lsls	r3, r3, #6
 800a554:	b25b      	sxtb	r3, r3
 800a556:	4313      	orrs	r3, r2
 800a558:	b25b      	sxtb	r3, r3
 800a55a:	7ffa      	ldrb	r2, [r7, #31]
 800a55c:	2a00      	cmp	r2, #0
 800a55e:	d101      	bne.n	800a564 <payload_integration+0x106>
 800a560:	2220      	movs	r2, #32
 800a562:	e000      	b.n	800a566 <payload_integration+0x108>
 800a564:	2200      	movs	r2, #0
 800a566:	4313      	orrs	r3, r2
 800a568:	b259      	sxtb	r1, r3
 800a56a:	79fb      	ldrb	r3, [r7, #7]
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	4413      	add	r3, r2
 800a570:	b2ca      	uxtb	r2, r1
 800a572:	701a      	strb	r2, [r3, #0]
}
 800a574:	bf00      	nop
 800a576:	3724      	adds	r7, #36	; 0x24
 800a578:	46bd      	mov	sp, r7
 800a57a:	bc80      	pop	{r7}
 800a57c:	4770      	bx	lr
	...

0800a580 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b08c      	sub	sp, #48	; 0x30
 800a584:	af00      	add	r7, sp, #0
 800a586:	60b9      	str	r1, [r7, #8]
 800a588:	607a      	str	r2, [r7, #4]
 800a58a:	603b      	str	r3, [r7, #0]
 800a58c:	4603      	mov	r3, r0
 800a58e:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800a590:	2300      	movs	r3, #0
 800a592:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 800a594:	2300      	movs	r3, #0
 800a596:	61fb      	str	r3, [r7, #28]
 800a598:	2300      	movs	r3, #0
 800a59a:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a59c:	f001 fcd5 	bl	800bf4a <RFW_DeInit>

    if( rxContinuous != 0 )
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	bf14      	ite	ne
 800a5b0:	2301      	movne	r3, #1
 800a5b2:	2300      	moveq	r3, #0
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	4b9f      	ldr	r3, [pc, #636]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a5b8:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800a5ba:	7bfb      	ldrb	r3, [r7, #15]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d003      	beq.n	800a5c8 <RadioSetRxGenericConfig+0x48>
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	f000 80e8 	beq.w	800a796 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800a5c6:	e1a0      	b.n	800a90a <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d003      	beq.n	800a5d8 <RadioSetRxGenericConfig+0x58>
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d102      	bne.n	800a5de <RadioSetRxGenericConfig+0x5e>
            return -1;
 800a5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5dc:	e196      	b.n	800a90c <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	7d5b      	ldrb	r3, [r3, #21]
 800a5e2:	2b08      	cmp	r3, #8
 800a5e4:	d902      	bls.n	800a5ec <RadioSetRxGenericConfig+0x6c>
            return -1;
 800a5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ea:	e18f      	b.n	800a90c <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5f0:	e00d      	b.n	800a60e <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	699a      	ldr	r2, [r3, #24]
 800a5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f8:	4413      	add	r3, r2
 800a5fa:	7819      	ldrb	r1, [r3, #0]
 800a5fc:	f107 021c 	add.w	r2, r7, #28
 800a600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a602:	4413      	add	r3, r2
 800a604:	460a      	mov	r2, r1
 800a606:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800a608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60a:	3301      	adds	r3, #1
 800a60c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	7d5b      	ldrb	r3, [r3, #21]
 800a612:	461a      	mov	r2, r3
 800a614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a616:	4293      	cmp	r3, r2
 800a618:	dbeb      	blt.n	800a5f2 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	bf14      	ite	ne
 800a622:	2301      	movne	r3, #1
 800a624:	2300      	moveq	r3, #0
 800a626:	b2db      	uxtb	r3, r3
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 fd6b 	bl	800b104 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a62e:	4b81      	ldr	r3, [pc, #516]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	4a7e      	ldr	r2, [pc, #504]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a63c:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	791a      	ldrb	r2, [r3, #4]
 800a642:	4b7c      	ldr	r3, [pc, #496]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f001 fbaf 	bl	800bdb0 <SUBGRF_GetFskBandwidthRegValue>
 800a652:	4603      	mov	r3, r0
 800a654:	461a      	mov	r2, r3
 800a656:	4b77      	ldr	r3, [pc, #476]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a65c:	4b75      	ldr	r3, [pc, #468]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a65e:	2200      	movs	r2, #0
 800a660:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	b29b      	uxth	r3, r3
 800a668:	00db      	lsls	r3, r3, #3
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	4b71      	ldr	r3, [pc, #452]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a66e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	7d1a      	ldrb	r2, [r3, #20]
 800a674:	4b6f      	ldr	r3, [pc, #444]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a676:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	7d5b      	ldrb	r3, [r3, #21]
 800a67c:	00db      	lsls	r3, r3, #3
 800a67e:	b2da      	uxtb	r2, r3
 800a680:	4b6c      	ldr	r3, [pc, #432]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a682:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a68a:	4b6a      	ldr	r3, [pc, #424]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a68c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a694:	2b00      	cmp	r3, #0
 800a696:	d105      	bne.n	800a6a4 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	69db      	ldr	r3, [r3, #28]
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	4b65      	ldr	r3, [pc, #404]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a6a0:	759a      	strb	r2, [r3, #22]
 800a6a2:	e00b      	b.n	800a6bc <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d103      	bne.n	800a6b6 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800a6ae:	4b61      	ldr	r3, [pc, #388]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a6b0:	22ff      	movs	r2, #255	; 0xff
 800a6b2:	759a      	strb	r2, [r3, #22]
 800a6b4:	e002      	b.n	800a6bc <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800a6b6:	4b5f      	ldr	r3, [pc, #380]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a6b8:	22ff      	movs	r2, #255	; 0xff
 800a6ba:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d004      	beq.n	800a6d0 <RadioSetRxGenericConfig+0x150>
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a6cc:	2b02      	cmp	r3, #2
 800a6ce:	d12d      	bne.n	800a72c <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a6d6:	2bf1      	cmp	r3, #241	; 0xf1
 800a6d8:	d00c      	beq.n	800a6f4 <RadioSetRxGenericConfig+0x174>
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a6e0:	2bf2      	cmp	r3, #242	; 0xf2
 800a6e2:	d007      	beq.n	800a6f4 <RadioSetRxGenericConfig+0x174>
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d002      	beq.n	800a6f4 <RadioSetRxGenericConfig+0x174>
            return -1;
 800a6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f2:	e10b      	b.n	800a90c <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800a6fc:	4b4e      	ldr	r3, [pc, #312]	; (800a838 <RadioSetRxGenericConfig+0x2b8>)
 800a6fe:	6819      	ldr	r1, [r3, #0]
 800a700:	f107 0310 	add.w	r3, r7, #16
 800a704:	4a4d      	ldr	r2, [pc, #308]	; (800a83c <RadioSetRxGenericConfig+0x2bc>)
 800a706:	4618      	mov	r0, r3
 800a708:	f001 fc12 	bl	800bf30 <RFW_Init>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d002      	beq.n	800a718 <RadioSetRxGenericConfig+0x198>
            return -1;
 800a712:	f04f 33ff 	mov.w	r3, #4294967295
 800a716:	e0f9      	b.n	800a90c <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a718:	4b46      	ldr	r3, [pc, #280]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a71a:	2200      	movs	r2, #0
 800a71c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a71e:	4b45      	ldr	r3, [pc, #276]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a720:	2201      	movs	r2, #1
 800a722:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a724:	4b43      	ldr	r3, [pc, #268]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a726:	2200      	movs	r2, #0
 800a728:	755a      	strb	r2, [r3, #21]
        {
 800a72a:	e00e      	b.n	800a74a <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800a732:	4b40      	ldr	r3, [pc, #256]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a734:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800a73c:	4b3d      	ldr	r3, [pc, #244]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a73e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800a746:	4b3b      	ldr	r3, [pc, #236]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a748:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800a74a:	f7ff fa92 	bl	8009c72 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800a74e:	2000      	movs	r0, #0
 800a750:	f7fe fc24 	bl	8008f9c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a754:	483a      	ldr	r0, [pc, #232]	; (800a840 <RadioSetRxGenericConfig+0x2c0>)
 800a756:	f000 ff07 	bl	800b568 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a75a:	483a      	ldr	r0, [pc, #232]	; (800a844 <RadioSetRxGenericConfig+0x2c4>)
 800a75c:	f000 ffd6 	bl	800b70c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a760:	f107 031c 	add.w	r3, r7, #28
 800a764:	4618      	mov	r0, r3
 800a766:	f000 fb06 	bl	800ad76 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	8c1b      	ldrh	r3, [r3, #32]
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 fb50 	bl	800ae14 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a778:	4618      	mov	r0, r3
 800a77a:	f000 fb2b 	bl	800add4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800a784:	fb03 f202 	mul.w	r2, r3, r2
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a790:	4a28      	ldr	r2, [pc, #160]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a792:	6093      	str	r3, [r2, #8]
        break;
 800a794:	e0b9      	b.n	800a90a <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d102      	bne.n	800a7a4 <RadioSetRxGenericConfig+0x224>
            return -1;
 800a79e:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a2:	e0b3      	b.n	800a90c <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d104      	bne.n	800a7b8 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	69db      	ldr	r3, [r3, #28]
 800a7b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a7b6:	e002      	b.n	800a7be <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 800a7b8:	23ff      	movs	r3, #255	; 0xff
 800a7ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	bf14      	ite	ne
 800a7c6:	2301      	movne	r3, #1
 800a7c8:	2300      	moveq	r3, #0
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 fc99 	bl	800b104 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 fca3 	bl	800b122 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a7dc:	4b15      	ldr	r3, [pc, #84]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a7ea:	4b12      	ldr	r3, [pc, #72]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a7ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800a7f6:	4b0f      	ldr	r3, [pc, #60]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a7f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800a802:	4b0c      	ldr	r3, [pc, #48]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a804:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d01a      	beq.n	800a848 <RadioSetRxGenericConfig+0x2c8>
 800a812:	2b02      	cmp	r3, #2
 800a814:	dc2c      	bgt.n	800a870 <RadioSetRxGenericConfig+0x2f0>
 800a816:	2b00      	cmp	r3, #0
 800a818:	d002      	beq.n	800a820 <RadioSetRxGenericConfig+0x2a0>
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d005      	beq.n	800a82a <RadioSetRxGenericConfig+0x2aa>
            break;
 800a81e:	e027      	b.n	800a870 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a820:	4b04      	ldr	r3, [pc, #16]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a822:	2200      	movs	r2, #0
 800a824:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800a828:	e023      	b.n	800a872 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a82a:	4b02      	ldr	r3, [pc, #8]	; (800a834 <RadioSetRxGenericConfig+0x2b4>)
 800a82c:	2201      	movs	r2, #1
 800a82e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800a832:	e01e      	b.n	800a872 <RadioSetRxGenericConfig+0x2f2>
 800a834:	20000428 	.word	0x20000428
 800a838:	20000424 	.word	0x20000424
 800a83c:	20000498 	.word	0x20000498
 800a840:	20000460 	.word	0x20000460
 800a844:	20000436 	.word	0x20000436
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a84e:	2b0b      	cmp	r3, #11
 800a850:	d004      	beq.n	800a85c <RadioSetRxGenericConfig+0x2dc>
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a858:	2b0c      	cmp	r3, #12
 800a85a:	d104      	bne.n	800a866 <RadioSetRxGenericConfig+0x2e6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a85c:	4b2d      	ldr	r3, [pc, #180]	; (800a914 <RadioSetRxGenericConfig+0x394>)
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800a864:	e005      	b.n	800a872 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a866:	4b2b      	ldr	r3, [pc, #172]	; (800a914 <RadioSetRxGenericConfig+0x394>)
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800a86e:	e000      	b.n	800a872 <RadioSetRxGenericConfig+0x2f2>
            break;
 800a870:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a872:	4b28      	ldr	r3, [pc, #160]	; (800a914 <RadioSetRxGenericConfig+0x394>)
 800a874:	2201      	movs	r2, #1
 800a876:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800a87c:	4b25      	ldr	r3, [pc, #148]	; (800a914 <RadioSetRxGenericConfig+0x394>)
 800a87e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800a886:	4b23      	ldr	r3, [pc, #140]	; (800a914 <RadioSetRxGenericConfig+0x394>)
 800a888:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800a88a:	4a22      	ldr	r2, [pc, #136]	; (800a914 <RadioSetRxGenericConfig+0x394>)
 800a88c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a890:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800a898:	4b1e      	ldr	r3, [pc, #120]	; (800a914 <RadioSetRxGenericConfig+0x394>)
 800a89a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800a8a4:	4b1b      	ldr	r3, [pc, #108]	; (800a914 <RadioSetRxGenericConfig+0x394>)
 800a8a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800a8aa:	f7ff f9e2 	bl	8009c72 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800a8ae:	2001      	movs	r0, #1
 800a8b0:	f7fe fb74 	bl	8008f9c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a8b4:	4818      	ldr	r0, [pc, #96]	; (800a918 <RadioSetRxGenericConfig+0x398>)
 800a8b6:	f000 fe57 	bl	800b568 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a8ba:	4818      	ldr	r0, [pc, #96]	; (800a91c <RadioSetRxGenericConfig+0x39c>)
 800a8bc:	f000 ff26 	bl	800b70c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800a8c0:	4b14      	ldr	r3, [pc, #80]	; (800a914 <RadioSetRxGenericConfig+0x394>)
 800a8c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d10d      	bne.n	800a8e6 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800a8ca:	f240 7036 	movw	r0, #1846	; 0x736
 800a8ce:	f001 f879 	bl	800b9c4 <SUBGRF_ReadRegister>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	f023 0304 	bic.w	r3, r3, #4
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	4619      	mov	r1, r3
 800a8dc:	f240 7036 	movw	r0, #1846	; 0x736
 800a8e0:	f001 f85c 	bl	800b99c <SUBGRF_WriteRegister>
 800a8e4:	e00c      	b.n	800a900 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800a8e6:	f240 7036 	movw	r0, #1846	; 0x736
 800a8ea:	f001 f86b 	bl	800b9c4 <SUBGRF_ReadRegister>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	f043 0304 	orr.w	r3, r3, #4
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	f240 7036 	movw	r0, #1846	; 0x736
 800a8fc:	f001 f84e 	bl	800b99c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800a900:	4b04      	ldr	r3, [pc, #16]	; (800a914 <RadioSetRxGenericConfig+0x394>)
 800a902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a906:	609a      	str	r2, [r3, #8]
        break;
 800a908:	bf00      	nop
    }
    return status;
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3730      	adds	r7, #48	; 0x30
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	20000428 	.word	0x20000428
 800a918:	20000460 	.word	0x20000460
 800a91c:	20000436 	.word	0x20000436

0800a920 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b08a      	sub	sp, #40	; 0x28
 800a924:	af00      	add	r7, sp, #0
 800a926:	60b9      	str	r1, [r7, #8]
 800a928:	607b      	str	r3, [r7, #4]
 800a92a:	4603      	mov	r3, r0
 800a92c:	73fb      	strb	r3, [r7, #15]
 800a92e:	4613      	mov	r3, r2
 800a930:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 800a932:	2300      	movs	r3, #0
 800a934:	61fb      	str	r3, [r7, #28]
 800a936:	2300      	movs	r3, #0
 800a938:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a93a:	f001 fb06 	bl	800bf4a <RFW_DeInit>
    switch( modem )
 800a93e:	7bfb      	ldrb	r3, [r7, #15]
 800a940:	2b02      	cmp	r3, #2
 800a942:	f000 8144 	beq.w	800abce <RadioSetTxGenericConfig+0x2ae>
 800a946:	2b02      	cmp	r3, #2
 800a948:	f300 8160 	bgt.w	800ac0c <RadioSetTxGenericConfig+0x2ec>
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d003      	beq.n	800a958 <RadioSetTxGenericConfig+0x38>
 800a950:	2b01      	cmp	r3, #1
 800a952:	f000 80b7 	beq.w	800aac4 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 800a956:	e159      	b.n	800ac0c <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d003      	beq.n	800a968 <RadioSetTxGenericConfig+0x48>
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d102      	bne.n	800a96e <RadioSetTxGenericConfig+0x4e>
            return -1;
 800a968:	f04f 33ff 	mov.w	r3, #4294967295
 800a96c:	e163      	b.n	800ac36 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	7d1b      	ldrb	r3, [r3, #20]
 800a972:	2b08      	cmp	r3, #8
 800a974:	d902      	bls.n	800a97c <RadioSetTxGenericConfig+0x5c>
            return -1;
 800a976:	f04f 33ff 	mov.w	r3, #4294967295
 800a97a:	e15c      	b.n	800ac36 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800a97c:	2300      	movs	r3, #0
 800a97e:	627b      	str	r3, [r7, #36]	; 0x24
 800a980:	e00d      	b.n	800a99e <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	699a      	ldr	r2, [r3, #24]
 800a986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a988:	4413      	add	r3, r2
 800a98a:	7819      	ldrb	r1, [r3, #0]
 800a98c:	f107 021c 	add.w	r2, r7, #28
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	4413      	add	r3, r2
 800a994:	460a      	mov	r2, r1
 800a996:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800a998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99a:	3301      	adds	r3, #1
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	7d1b      	ldrb	r3, [r3, #20]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	dbeb      	blt.n	800a982 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a9aa:	4ba5      	ldr	r3, [pc, #660]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	4aa2      	ldr	r2, [pc, #648]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800a9b8:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	781a      	ldrb	r2, [r3, #0]
 800a9be:	4ba0      	ldr	r3, [pc, #640]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800a9c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f001 f9f1 	bl	800bdb0 <SUBGRF_GetFskBandwidthRegValue>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	4b9b      	ldr	r3, [pc, #620]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800a9d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	4a98      	ldr	r2, [pc, #608]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800a9de:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a9e0:	4b97      	ldr	r3, [pc, #604]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	00db      	lsls	r3, r3, #3
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	4b93      	ldr	r3, [pc, #588]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800a9f2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a9f4:	4b92      	ldr	r3, [pc, #584]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800a9f6:	2204      	movs	r2, #4
 800a9f8:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	7d1b      	ldrb	r3, [r3, #20]
 800a9fe:	00db      	lsls	r3, r3, #3
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	4b8f      	ldr	r3, [pc, #572]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800aa04:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800aa06:	4b8e      	ldr	r3, [pc, #568]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d003      	beq.n	800aa1e <RadioSetTxGenericConfig+0xfe>
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	7f9b      	ldrb	r3, [r3, #30]
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d12a      	bne.n	800aa74 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	7fdb      	ldrb	r3, [r3, #31]
 800aa22:	2bf1      	cmp	r3, #241	; 0xf1
 800aa24:	d00a      	beq.n	800aa3c <RadioSetTxGenericConfig+0x11c>
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	7fdb      	ldrb	r3, [r3, #31]
 800aa2a:	2bf2      	cmp	r3, #242	; 0xf2
 800aa2c:	d006      	beq.n	800aa3c <RadioSetTxGenericConfig+0x11c>
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	7fdb      	ldrb	r3, [r3, #31]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d002      	beq.n	800aa3c <RadioSetTxGenericConfig+0x11c>
                return -1;
 800aa36:	f04f 33ff 	mov.w	r3, #4294967295
 800aa3a:	e0fc      	b.n	800ac36 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800aa44:	4b7f      	ldr	r3, [pc, #508]	; (800ac44 <RadioSetTxGenericConfig+0x324>)
 800aa46:	6819      	ldr	r1, [r3, #0]
 800aa48:	f107 0310 	add.w	r3, r7, #16
 800aa4c:	4a7e      	ldr	r2, [pc, #504]	; (800ac48 <RadioSetTxGenericConfig+0x328>)
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f001 fa6e 	bl	800bf30 <RFW_Init>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d002      	beq.n	800aa60 <RadioSetTxGenericConfig+0x140>
              return -1;
 800aa5a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa5e:	e0ea      	b.n	800ac36 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800aa60:	4b77      	ldr	r3, [pc, #476]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800aa66:	4b76      	ldr	r3, [pc, #472]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800aa68:	2201      	movs	r2, #1
 800aa6a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800aa6c:	4b74      	ldr	r3, [pc, #464]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	755a      	strb	r2, [r3, #21]
        {
 800aa72:	e00c      	b.n	800aa8e <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	7fda      	ldrb	r2, [r3, #31]
 800aa78:	4b71      	ldr	r3, [pc, #452]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800aa7a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800aa82:	4b6f      	ldr	r3, [pc, #444]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800aa84:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	7f9a      	ldrb	r2, [r3, #30]
 800aa8a:	4b6d      	ldr	r3, [pc, #436]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800aa8c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800aa8e:	f7ff f8f0 	bl	8009c72 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800aa92:	2000      	movs	r0, #0
 800aa94:	f7fe fa82 	bl	8008f9c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800aa98:	486c      	ldr	r0, [pc, #432]	; (800ac4c <RadioSetTxGenericConfig+0x32c>)
 800aa9a:	f000 fd65 	bl	800b568 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800aa9e:	486c      	ldr	r0, [pc, #432]	; (800ac50 <RadioSetTxGenericConfig+0x330>)
 800aaa0:	f000 fe34 	bl	800b70c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800aaa4:	f107 031c 	add.w	r3, r7, #28
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 f964 	bl	800ad76 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	8b9b      	ldrh	r3, [r3, #28]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 f9ae 	bl	800ae14 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	8c1b      	ldrh	r3, [r3, #32]
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 f989 	bl	800add4 <SUBGRF_SetCrcPolynomial>
        break;
 800aac2:	e0a4      	b.n	800ac0e <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800aac4:	4b5e      	ldr	r3, [pc, #376]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800aad2:	4b5b      	ldr	r3, [pc, #364]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800aad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800aade:	4b58      	ldr	r3, [pc, #352]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800aae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800aaea:	4b55      	ldr	r3, [pc, #340]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800aaec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d010      	beq.n	800ab1c <RadioSetTxGenericConfig+0x1fc>
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	dc22      	bgt.n	800ab44 <RadioSetTxGenericConfig+0x224>
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d002      	beq.n	800ab08 <RadioSetTxGenericConfig+0x1e8>
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d005      	beq.n	800ab12 <RadioSetTxGenericConfig+0x1f2>
            break;
 800ab06:	e01d      	b.n	800ab44 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ab08:	4b4d      	ldr	r3, [pc, #308]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ab10:	e019      	b.n	800ab46 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ab12:	4b4b      	ldr	r3, [pc, #300]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ab1a:	e014      	b.n	800ab46 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab22:	2b0b      	cmp	r3, #11
 800ab24:	d004      	beq.n	800ab30 <RadioSetTxGenericConfig+0x210>
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab2c:	2b0c      	cmp	r3, #12
 800ab2e:	d104      	bne.n	800ab3a <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ab30:	4b43      	ldr	r3, [pc, #268]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ab38:	e005      	b.n	800ab46 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ab3a:	4b41      	ldr	r3, [pc, #260]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ab42:	e000      	b.n	800ab46 <RadioSetTxGenericConfig+0x226>
            break;
 800ab44:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800ab46:	4b3e      	ldr	r3, [pc, #248]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800ab48:	2201      	movs	r2, #1
 800ab4a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab50:	4b3b      	ldr	r3, [pc, #236]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800ab52:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800ab5a:	4b39      	ldr	r3, [pc, #228]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800ab5c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ab64:	4b36      	ldr	r3, [pc, #216]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800ab66:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ab70:	4b33      	ldr	r3, [pc, #204]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800ab72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800ab76:	f7ff f87c 	bl	8009c72 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800ab7a:	2001      	movs	r0, #1
 800ab7c:	f7fe fa0e 	bl	8008f9c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ab80:	4832      	ldr	r0, [pc, #200]	; (800ac4c <RadioSetTxGenericConfig+0x32c>)
 800ab82:	f000 fcf1 	bl	800b568 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ab86:	4832      	ldr	r0, [pc, #200]	; (800ac50 <RadioSetTxGenericConfig+0x330>)
 800ab88:	f000 fdc0 	bl	800b70c <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800ab8c:	4b2c      	ldr	r3, [pc, #176]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800ab8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab92:	2b06      	cmp	r3, #6
 800ab94:	d10d      	bne.n	800abb2 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800ab96:	f640 0089 	movw	r0, #2185	; 0x889
 800ab9a:	f000 ff13 	bl	800b9c4 <SUBGRF_ReadRegister>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	f023 0304 	bic.w	r3, r3, #4
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	4619      	mov	r1, r3
 800aba8:	f640 0089 	movw	r0, #2185	; 0x889
 800abac:	f000 fef6 	bl	800b99c <SUBGRF_WriteRegister>
        break;
 800abb0:	e02d      	b.n	800ac0e <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800abb2:	f640 0089 	movw	r0, #2185	; 0x889
 800abb6:	f000 ff05 	bl	800b9c4 <SUBGRF_ReadRegister>
 800abba:	4603      	mov	r3, r0
 800abbc:	f043 0304 	orr.w	r3, r3, #4
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	4619      	mov	r1, r3
 800abc4:	f640 0089 	movw	r0, #2185	; 0x889
 800abc8:	f000 fee8 	bl	800b99c <SUBGRF_WriteRegister>
        break;
 800abcc:	e01f      	b.n	800ac0e <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d004      	beq.n	800abe0 <RadioSetTxGenericConfig+0x2c0>
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abde:	d902      	bls.n	800abe6 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 800abe0:	f04f 33ff 	mov.w	r3, #4294967295
 800abe4:	e027      	b.n	800ac36 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 800abe6:	2002      	movs	r0, #2
 800abe8:	f7fe f9d8 	bl	8008f9c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800abec:	4b14      	ldr	r3, [pc, #80]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800abee:	2202      	movs	r2, #2
 800abf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf8:	4a11      	ldr	r2, [pc, #68]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800abfa:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800abfc:	4b10      	ldr	r3, [pc, #64]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800abfe:	2216      	movs	r2, #22
 800ac00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ac04:	4811      	ldr	r0, [pc, #68]	; (800ac4c <RadioSetTxGenericConfig+0x32c>)
 800ac06:	f000 fcaf 	bl	800b568 <SUBGRF_SetModulationParams>
        break;
 800ac0a:	e000      	b.n	800ac0e <RadioSetTxGenericConfig+0x2ee>
        break;
 800ac0c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800ac0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 ffde 	bl	800bbd4 <SUBGRF_SetRfTxPower>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	4b08      	ldr	r3, [pc, #32]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800ac1e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800ac22:	4b07      	ldr	r3, [pc, #28]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800ac24:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f001 f9a2 	bl	800bf72 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800ac2e:	4a04      	ldr	r2, [pc, #16]	; (800ac40 <RadioSetTxGenericConfig+0x320>)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6053      	str	r3, [r2, #4]
    return 0;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3728      	adds	r7, #40	; 0x28
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	20000428 	.word	0x20000428
 800ac44:	20000424 	.word	0x20000424
 800ac48:	20000480 	.word	0x20000480
 800ac4c:	20000460 	.word	0x20000460
 800ac50:	20000436 	.word	0x20000436

0800ac54 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d002      	beq.n	800ac68 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800ac62:	4a1a      	ldr	r2, [pc, #104]	; (800accc <SUBGRF_Init+0x78>)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800ac68:	f7f6 fa9c 	bl	80011a4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800ac6c:	2002      	movs	r0, #2
 800ac6e:	f001 f87d 	bl	800bd6c <Radio_SMPS_Set>

    ImageCalibrated = false;
 800ac72:	4b17      	ldr	r3, [pc, #92]	; (800acd0 <SUBGRF_Init+0x7c>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800ac78:	2000      	movs	r0, #0
 800ac7a:	f000 f977 	bl	800af6c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800ac7e:	f7f7 fb82 	bl	8002386 <RBI_IsTCXO>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d10e      	bne.n	800aca6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800ac88:	2140      	movs	r1, #64	; 0x40
 800ac8a:	2001      	movs	r0, #1
 800ac8c:	f000 fb78 	bl	800b380 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800ac90:	2100      	movs	r1, #0
 800ac92:	f640 1011 	movw	r0, #2321	; 0x911
 800ac96:	f000 fe81 	bl	800b99c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800ac9a:	237f      	movs	r3, #127	; 0x7f
 800ac9c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800ac9e:	7b38      	ldrb	r0, [r7, #12]
 800aca0:	f000 fa85 	bl	800b1ae <SUBGRF_Calibrate>
 800aca4:	e009      	b.n	800acba <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800aca6:	2120      	movs	r1, #32
 800aca8:	f640 1011 	movw	r0, #2321	; 0x911
 800acac:	f000 fe76 	bl	800b99c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800acb0:	2120      	movs	r1, #32
 800acb2:	f640 1012 	movw	r0, #2322	; 0x912
 800acb6:	f000 fe71 	bl	800b99c <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 800acba:	f7f7 fb41 	bl	8002340 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800acbe:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <SUBGRF_Init+0x80>)
 800acc0:	2201      	movs	r2, #1
 800acc2:	701a      	strb	r2, [r3, #0]
}
 800acc4:	bf00      	nop
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	200004bc 	.word	0x200004bc
 800acd0:	200004b8 	.word	0x200004b8
 800acd4:	200004b0 	.word	0x200004b0

0800acd8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800acd8:	b480      	push	{r7}
 800acda:	af00      	add	r7, sp, #0
    return OperatingMode;
 800acdc:	4b02      	ldr	r3, [pc, #8]	; (800ace8 <SUBGRF_GetOperatingMode+0x10>)
 800acde:	781b      	ldrb	r3, [r3, #0]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bc80      	pop	{r7}
 800ace6:	4770      	bx	lr
 800ace8:	200004b0 	.word	0x200004b0

0800acec <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	461a      	mov	r2, r3
 800acfc:	6879      	ldr	r1, [r7, #4]
 800acfe:	2000      	movs	r0, #0
 800ad00:	f000 feb8 	bl	800ba74 <SUBGRF_WriteBuffer>
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b086      	sub	sp, #24
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	4613      	mov	r3, r2
 800ad18:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800ad1e:	f107 0317 	add.w	r3, r7, #23
 800ad22:	4619      	mov	r1, r3
 800ad24:	68b8      	ldr	r0, [r7, #8]
 800ad26:	f000 fdbb 	bl	800b8a0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	79fa      	ldrb	r2, [r7, #7]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d201      	bcs.n	800ad38 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800ad34:	2301      	movs	r3, #1
 800ad36:	e007      	b.n	800ad48 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800ad38:	7df8      	ldrb	r0, [r7, #23]
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	68f9      	ldr	r1, [r7, #12]
 800ad42:	f000 feb9 	bl	800bab8 <SUBGRF_ReadBuffer>

    return 0;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3718      	adds	r7, #24
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	607a      	str	r2, [r7, #4]
 800ad5c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800ad5e:	7afb      	ldrb	r3, [r7, #11]
 800ad60:	4619      	mov	r1, r3
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f7ff ffc2 	bl	800acec <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f91b 	bl	800afa4 <SUBGRF_SetTx>
}
 800ad6e:	bf00      	nop
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b082      	sub	sp, #8
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800ad7e:	2208      	movs	r2, #8
 800ad80:	6879      	ldr	r1, [r7, #4]
 800ad82:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800ad86:	f000 fe31 	bl	800b9ec <SUBGRF_WriteRegisters>
    return 0;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800ad9e:	88fb      	ldrh	r3, [r7, #6]
 800ada0:	0a1b      	lsrs	r3, r3, #8
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800ada8:	88fb      	ldrh	r3, [r7, #6]
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800adae:	f000 fb6b 	bl	800b488 <SUBGRF_GetPacketType>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d108      	bne.n	800adca <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800adb8:	f107 030c 	add.w	r3, r7, #12
 800adbc:	2202      	movs	r2, #2
 800adbe:	4619      	mov	r1, r3
 800adc0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800adc4:	f000 fe12 	bl	800b9ec <SUBGRF_WriteRegisters>
            break;
 800adc8:	e000      	b.n	800adcc <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800adca:	bf00      	nop
    }
}
 800adcc:	bf00      	nop
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	4603      	mov	r3, r0
 800addc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800adde:	88fb      	ldrh	r3, [r7, #6]
 800ade0:	0a1b      	lsrs	r3, r3, #8
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800ade8:	88fb      	ldrh	r3, [r7, #6]
 800adea:	b2db      	uxtb	r3, r3
 800adec:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800adee:	f000 fb4b 	bl	800b488 <SUBGRF_GetPacketType>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d108      	bne.n	800ae0a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800adf8:	f107 030c 	add.w	r3, r7, #12
 800adfc:	2202      	movs	r2, #2
 800adfe:	4619      	mov	r1, r3
 800ae00:	f240 60be 	movw	r0, #1726	; 0x6be
 800ae04:	f000 fdf2 	bl	800b9ec <SUBGRF_WriteRegisters>
            break;
 800ae08:	e000      	b.n	800ae0c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800ae0a:	bf00      	nop
    }
}
 800ae0c:	bf00      	nop
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800ae22:	f000 fb31 	bl	800b488 <SUBGRF_GetPacketType>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d121      	bne.n	800ae70 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800ae2c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800ae30:	f000 fdc8 	bl	800b9c4 <SUBGRF_ReadRegister>
 800ae34:	4603      	mov	r3, r0
 800ae36:	f023 0301 	bic.w	r3, r3, #1
 800ae3a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800ae3c:	88fb      	ldrh	r3, [r7, #6]
 800ae3e:	0a1b      	lsrs	r3, r3, #8
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	b25b      	sxtb	r3, r3
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	b25a      	sxtb	r2, r3
 800ae4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	b25b      	sxtb	r3, r3
 800ae52:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
 800ae56:	4619      	mov	r1, r3
 800ae58:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800ae5c:	f000 fd9e 	bl	800b99c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800ae60:	88fb      	ldrh	r3, [r7, #6]
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	4619      	mov	r1, r3
 800ae66:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800ae6a:	f000 fd97 	bl	800b99c <SUBGRF_WriteRegister>
            break;
 800ae6e:	e000      	b.n	800ae72 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800ae70:	bf00      	nop
    }
}
 800ae72:	bf00      	nop
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800ae80:	2300      	movs	r3, #0
 800ae82:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800ae8c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800ae90:	f000 fd98 	bl	800b9c4 <SUBGRF_ReadRegister>
 800ae94:	4603      	mov	r3, r0
 800ae96:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800ae98:	79fb      	ldrb	r3, [r7, #7]
 800ae9a:	f023 0301 	bic.w	r3, r3, #1
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	4619      	mov	r1, r3
 800aea2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800aea6:	f000 fd79 	bl	800b99c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800aeaa:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800aeae:	f000 fd89 	bl	800b9c4 <SUBGRF_ReadRegister>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800aeb6:	79bb      	ldrb	r3, [r7, #6]
 800aeb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	4619      	mov	r1, r3
 800aec0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800aec4:	f000 fd6a 	bl	800b99c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800aec8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800aecc:	f000 f88a 	bl	800afe4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800aed0:	463b      	mov	r3, r7
 800aed2:	2204      	movs	r2, #4
 800aed4:	4619      	mov	r1, r3
 800aed6:	f640 0019 	movw	r0, #2073	; 0x819
 800aeda:	f000 fda9 	bl	800ba30 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800aede:	2000      	movs	r0, #0
 800aee0:	f000 f844 	bl	800af6c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800aee4:	79fb      	ldrb	r3, [r7, #7]
 800aee6:	4619      	mov	r1, r3
 800aee8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800aeec:	f000 fd56 	bl	800b99c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800aef0:	79bb      	ldrb	r3, [r7, #6]
 800aef2:	4619      	mov	r1, r3
 800aef4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800aef8:	f000 fd50 	bl	800b99c <SUBGRF_WriteRegister>

    return number;
 800aefc:	683b      	ldr	r3, [r7, #0]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
	...

0800af08 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800af10:	2000      	movs	r0, #0
 800af12:	f7f7 fa20 	bl	8002356 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800af16:	2002      	movs	r0, #2
 800af18:	f000 ff28 	bl	800bd6c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800af1c:	793b      	ldrb	r3, [r7, #4]
 800af1e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800af22:	b2db      	uxtb	r3, r3
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800af28:	793b      	ldrb	r3, [r7, #4]
 800af2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800af32:	b25b      	sxtb	r3, r3
 800af34:	4313      	orrs	r3, r2
 800af36:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800af38:	793b      	ldrb	r3, [r7, #4]
 800af3a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800af42:	4313      	orrs	r3, r2
 800af44:	b25b      	sxtb	r3, r3
 800af46:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800af48:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800af4a:	f107 030f 	add.w	r3, r7, #15
 800af4e:	2201      	movs	r2, #1
 800af50:	4619      	mov	r1, r3
 800af52:	2084      	movs	r0, #132	; 0x84
 800af54:	f000 fdd2 	bl	800bafc <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800af58:	4b03      	ldr	r3, [pc, #12]	; (800af68 <SUBGRF_SetSleep+0x60>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	701a      	strb	r2, [r3, #0]
}
 800af5e:	bf00      	nop
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	200004b0 	.word	0x200004b0

0800af6c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	4603      	mov	r3, r0
 800af74:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800af76:	1dfb      	adds	r3, r7, #7
 800af78:	2201      	movs	r2, #1
 800af7a:	4619      	mov	r1, r3
 800af7c:	2080      	movs	r0, #128	; 0x80
 800af7e:	f000 fdbd 	bl	800bafc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800af82:	79fb      	ldrb	r3, [r7, #7]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d103      	bne.n	800af90 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800af88:	4b05      	ldr	r3, [pc, #20]	; (800afa0 <SUBGRF_SetStandby+0x34>)
 800af8a:	2201      	movs	r2, #1
 800af8c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800af8e:	e002      	b.n	800af96 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800af90:	4b03      	ldr	r3, [pc, #12]	; (800afa0 <SUBGRF_SetStandby+0x34>)
 800af92:	2202      	movs	r2, #2
 800af94:	701a      	strb	r2, [r3, #0]
}
 800af96:	bf00      	nop
 800af98:	3708      	adds	r7, #8
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	200004b0 	.word	0x200004b0

0800afa4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800afac:	4b0c      	ldr	r3, [pc, #48]	; (800afe0 <SUBGRF_SetTx+0x3c>)
 800afae:	2204      	movs	r2, #4
 800afb0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	0c1b      	lsrs	r3, r3, #16
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	0a1b      	lsrs	r3, r3, #8
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800afc8:	f107 030c 	add.w	r3, r7, #12
 800afcc:	2203      	movs	r2, #3
 800afce:	4619      	mov	r1, r3
 800afd0:	2083      	movs	r0, #131	; 0x83
 800afd2:	f000 fd93 	bl	800bafc <SUBGRF_WriteCommand>
}
 800afd6:	bf00      	nop
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	200004b0 	.word	0x200004b0

0800afe4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800afec:	4b0c      	ldr	r3, [pc, #48]	; (800b020 <SUBGRF_SetRx+0x3c>)
 800afee:	2205      	movs	r2, #5
 800aff0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	0c1b      	lsrs	r3, r3, #16
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	0a1b      	lsrs	r3, r3, #8
 800affe:	b2db      	uxtb	r3, r3
 800b000:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	b2db      	uxtb	r3, r3
 800b006:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800b008:	f107 030c 	add.w	r3, r7, #12
 800b00c:	2203      	movs	r2, #3
 800b00e:	4619      	mov	r1, r3
 800b010:	2082      	movs	r0, #130	; 0x82
 800b012:	f000 fd73 	bl	800bafc <SUBGRF_WriteCommand>
}
 800b016:	bf00      	nop
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	200004b0 	.word	0x200004b0

0800b024 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800b02c:	4b0e      	ldr	r3, [pc, #56]	; (800b068 <SUBGRF_SetRxBoosted+0x44>)
 800b02e:	2205      	movs	r2, #5
 800b030:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800b032:	2197      	movs	r1, #151	; 0x97
 800b034:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800b038:	f000 fcb0 	bl	800b99c <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	0c1b      	lsrs	r3, r3, #16
 800b040:	b2db      	uxtb	r3, r3
 800b042:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	0a1b      	lsrs	r3, r3, #8
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800b052:	f107 030c 	add.w	r3, r7, #12
 800b056:	2203      	movs	r2, #3
 800b058:	4619      	mov	r1, r3
 800b05a:	2082      	movs	r0, #130	; 0x82
 800b05c:	f000 fd4e 	bl	800bafc <SUBGRF_WriteCommand>
}
 800b060:	bf00      	nop
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	200004b0 	.word	0x200004b0

0800b06c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	0c1b      	lsrs	r3, r3, #16
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	0a1b      	lsrs	r3, r3, #8
 800b082:	b2db      	uxtb	r3, r3
 800b084:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	0c1b      	lsrs	r3, r3, #16
 800b090:	b2db      	uxtb	r3, r3
 800b092:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	0a1b      	lsrs	r3, r3, #8
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800b0a2:	f107 0308 	add.w	r3, r7, #8
 800b0a6:	2206      	movs	r2, #6
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	2094      	movs	r0, #148	; 0x94
 800b0ac:	f000 fd26 	bl	800bafc <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800b0b0:	4b03      	ldr	r3, [pc, #12]	; (800b0c0 <SUBGRF_SetRxDutyCycle+0x54>)
 800b0b2:	2206      	movs	r2, #6
 800b0b4:	701a      	strb	r2, [r3, #0]
}
 800b0b6:	bf00      	nop
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	200004b0 	.word	0x200004b0

0800b0c4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	20c5      	movs	r0, #197	; 0xc5
 800b0ce:	f000 fd15 	bl	800bafc <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800b0d2:	4b02      	ldr	r3, [pc, #8]	; (800b0dc <SUBGRF_SetCad+0x18>)
 800b0d4:	2207      	movs	r2, #7
 800b0d6:	701a      	strb	r2, [r3, #0]
}
 800b0d8:	bf00      	nop
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	200004b0 	.word	0x200004b0

0800b0e0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	20d1      	movs	r0, #209	; 0xd1
 800b0ea:	f000 fd07 	bl	800bafc <SUBGRF_WriteCommand>
}
 800b0ee:	bf00      	nop
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	20d2      	movs	r0, #210	; 0xd2
 800b0fc:	f000 fcfe 	bl	800bafc <SUBGRF_WriteCommand>
}
 800b100:	bf00      	nop
 800b102:	bd80      	pop	{r7, pc}

0800b104 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	4603      	mov	r3, r0
 800b10c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800b10e:	1dfb      	adds	r3, r7, #7
 800b110:	2201      	movs	r2, #1
 800b112:	4619      	mov	r1, r3
 800b114:	209f      	movs	r0, #159	; 0x9f
 800b116:	f000 fcf1 	bl	800bafc <SUBGRF_WriteCommand>
}
 800b11a:	bf00      	nop
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b084      	sub	sp, #16
 800b126:	af00      	add	r7, sp, #0
 800b128:	4603      	mov	r3, r0
 800b12a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800b12c:	1dfb      	adds	r3, r7, #7
 800b12e:	2201      	movs	r2, #1
 800b130:	4619      	mov	r1, r3
 800b132:	20a0      	movs	r0, #160	; 0xa0
 800b134:	f000 fce2 	bl	800bafc <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800b138:	79fb      	ldrb	r3, [r7, #7]
 800b13a:	2b3f      	cmp	r3, #63	; 0x3f
 800b13c:	d91c      	bls.n	800b178 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800b13e:	79fb      	ldrb	r3, [r7, #7]
 800b140:	085b      	lsrs	r3, r3, #1
 800b142:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800b144:	2300      	movs	r3, #0
 800b146:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800b14c:	e005      	b.n	800b15a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
 800b150:	089b      	lsrs	r3, r3, #2
 800b152:	73fb      	strb	r3, [r7, #15]
            exp++;
 800b154:	7bbb      	ldrb	r3, [r7, #14]
 800b156:	3301      	adds	r3, #1
 800b158:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800b15a:	7bfb      	ldrb	r3, [r7, #15]
 800b15c:	2b1f      	cmp	r3, #31
 800b15e:	d8f6      	bhi.n	800b14e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	00db      	lsls	r3, r3, #3
 800b164:	b2da      	uxtb	r2, r3
 800b166:	7bbb      	ldrb	r3, [r7, #14]
 800b168:	4413      	add	r3, r2
 800b16a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800b16c:	7b7b      	ldrb	r3, [r7, #13]
 800b16e:	4619      	mov	r1, r3
 800b170:	f240 7006 	movw	r0, #1798	; 0x706
 800b174:	f000 fc12 	bl	800b99c <SUBGRF_WriteRegister>
    }
}
 800b178:	bf00      	nop
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800b186:	f7f7 f909 	bl	800239c <RBI_IsDCDC>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d102      	bne.n	800b196 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800b190:	2301      	movs	r3, #1
 800b192:	71fb      	strb	r3, [r7, #7]
 800b194:	e001      	b.n	800b19a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800b196:	2300      	movs	r3, #0
 800b198:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800b19a:	1dfb      	adds	r3, r7, #7
 800b19c:	2201      	movs	r2, #1
 800b19e:	4619      	mov	r1, r3
 800b1a0:	2096      	movs	r0, #150	; 0x96
 800b1a2:	f000 fcab 	bl	800bafc <SUBGRF_WriteCommand>
}
 800b1a6:	bf00      	nop
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b084      	sub	sp, #16
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b1b6:	793b      	ldrb	r3, [r7, #4]
 800b1b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	019b      	lsls	r3, r3, #6
 800b1c0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800b1c2:	793b      	ldrb	r3, [r7, #4]
 800b1c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b1cc:	b25b      	sxtb	r3, r3
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800b1d2:	793b      	ldrb	r3, [r7, #4]
 800b1d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800b1dc:	b25b      	sxtb	r3, r3
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800b1e2:	793b      	ldrb	r3, [r7, #4]
 800b1e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800b1ec:	b25b      	sxtb	r3, r3
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800b1f2:	793b      	ldrb	r3, [r7, #4]
 800b1f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800b1fc:	b25b      	sxtb	r3, r3
 800b1fe:	4313      	orrs	r3, r2
 800b200:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800b202:	793b      	ldrb	r3, [r7, #4]
 800b204:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800b20c:	b25b      	sxtb	r3, r3
 800b20e:	4313      	orrs	r3, r2
 800b210:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800b212:	793b      	ldrb	r3, [r7, #4]
 800b214:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800b21c:	4313      	orrs	r3, r2
 800b21e:	b25b      	sxtb	r3, r3
 800b220:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b222:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800b224:	f107 030f 	add.w	r3, r7, #15
 800b228:	2201      	movs	r2, #1
 800b22a:	4619      	mov	r1, r3
 800b22c:	2089      	movs	r0, #137	; 0x89
 800b22e:	f000 fc65 	bl	800bafc <SUBGRF_WriteCommand>
}
 800b232:	bf00      	nop
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
	...

0800b23c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a1b      	ldr	r2, [pc, #108]	; (800b2b4 <SUBGRF_CalibrateImage+0x78>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d904      	bls.n	800b256 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800b24c:	23e1      	movs	r3, #225	; 0xe1
 800b24e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800b250:	23e9      	movs	r3, #233	; 0xe9
 800b252:	737b      	strb	r3, [r7, #13]
 800b254:	e022      	b.n	800b29c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a17      	ldr	r2, [pc, #92]	; (800b2b8 <SUBGRF_CalibrateImage+0x7c>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d904      	bls.n	800b268 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800b25e:	23d7      	movs	r3, #215	; 0xd7
 800b260:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800b262:	23db      	movs	r3, #219	; 0xdb
 800b264:	737b      	strb	r3, [r7, #13]
 800b266:	e019      	b.n	800b29c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a14      	ldr	r2, [pc, #80]	; (800b2bc <SUBGRF_CalibrateImage+0x80>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d904      	bls.n	800b27a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800b270:	23c1      	movs	r3, #193	; 0xc1
 800b272:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800b274:	23c5      	movs	r3, #197	; 0xc5
 800b276:	737b      	strb	r3, [r7, #13]
 800b278:	e010      	b.n	800b29c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a10      	ldr	r2, [pc, #64]	; (800b2c0 <SUBGRF_CalibrateImage+0x84>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d904      	bls.n	800b28c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800b282:	2375      	movs	r3, #117	; 0x75
 800b284:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800b286:	2381      	movs	r3, #129	; 0x81
 800b288:	737b      	strb	r3, [r7, #13]
 800b28a:	e007      	b.n	800b29c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a0d      	ldr	r2, [pc, #52]	; (800b2c4 <SUBGRF_CalibrateImage+0x88>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d903      	bls.n	800b29c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 800b294:	236b      	movs	r3, #107	; 0x6b
 800b296:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800b298:	236f      	movs	r3, #111	; 0x6f
 800b29a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800b29c:	f107 030c 	add.w	r3, r7, #12
 800b2a0:	2202      	movs	r2, #2
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	2098      	movs	r0, #152	; 0x98
 800b2a6:	f000 fc29 	bl	800bafc <SUBGRF_WriteCommand>
}
 800b2aa:	bf00      	nop
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	35a4e900 	.word	0x35a4e900
 800b2b8:	32a9f880 	.word	0x32a9f880
 800b2bc:	2de54480 	.word	0x2de54480
 800b2c0:	1b6b0b00 	.word	0x1b6b0b00
 800b2c4:	1954fc40 	.word	0x1954fc40

0800b2c8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800b2c8:	b590      	push	{r4, r7, lr}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	4608      	mov	r0, r1
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	4623      	mov	r3, r4
 800b2d8:	71fb      	strb	r3, [r7, #7]
 800b2da:	4603      	mov	r3, r0
 800b2dc:	71bb      	strb	r3, [r7, #6]
 800b2de:	460b      	mov	r3, r1
 800b2e0:	717b      	strb	r3, [r7, #5]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800b2e6:	79fb      	ldrb	r3, [r7, #7]
 800b2e8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800b2ea:	79bb      	ldrb	r3, [r7, #6]
 800b2ec:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800b2ee:	797b      	ldrb	r3, [r7, #5]
 800b2f0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800b2f2:	793b      	ldrb	r3, [r7, #4]
 800b2f4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800b2f6:	f107 030c 	add.w	r3, r7, #12
 800b2fa:	2204      	movs	r2, #4
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	2095      	movs	r0, #149	; 0x95
 800b300:	f000 fbfc 	bl	800bafc <SUBGRF_WriteCommand>
}
 800b304:	bf00      	nop
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd90      	pop	{r4, r7, pc}

0800b30c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800b30c:	b590      	push	{r4, r7, lr}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	4604      	mov	r4, r0
 800b314:	4608      	mov	r0, r1
 800b316:	4611      	mov	r1, r2
 800b318:	461a      	mov	r2, r3
 800b31a:	4623      	mov	r3, r4
 800b31c:	80fb      	strh	r3, [r7, #6]
 800b31e:	4603      	mov	r3, r0
 800b320:	80bb      	strh	r3, [r7, #4]
 800b322:	460b      	mov	r3, r1
 800b324:	807b      	strh	r3, [r7, #2]
 800b326:	4613      	mov	r3, r2
 800b328:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800b32a:	88fb      	ldrh	r3, [r7, #6]
 800b32c:	0a1b      	lsrs	r3, r3, #8
 800b32e:	b29b      	uxth	r3, r3
 800b330:	b2db      	uxtb	r3, r3
 800b332:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800b334:	88fb      	ldrh	r3, [r7, #6]
 800b336:	b2db      	uxtb	r3, r3
 800b338:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800b33a:	88bb      	ldrh	r3, [r7, #4]
 800b33c:	0a1b      	lsrs	r3, r3, #8
 800b33e:	b29b      	uxth	r3, r3
 800b340:	b2db      	uxtb	r3, r3
 800b342:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800b344:	88bb      	ldrh	r3, [r7, #4]
 800b346:	b2db      	uxtb	r3, r3
 800b348:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800b34a:	887b      	ldrh	r3, [r7, #2]
 800b34c:	0a1b      	lsrs	r3, r3, #8
 800b34e:	b29b      	uxth	r3, r3
 800b350:	b2db      	uxtb	r3, r3
 800b352:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800b354:	887b      	ldrh	r3, [r7, #2]
 800b356:	b2db      	uxtb	r3, r3
 800b358:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800b35a:	883b      	ldrh	r3, [r7, #0]
 800b35c:	0a1b      	lsrs	r3, r3, #8
 800b35e:	b29b      	uxth	r3, r3
 800b360:	b2db      	uxtb	r3, r3
 800b362:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800b364:	883b      	ldrh	r3, [r7, #0]
 800b366:	b2db      	uxtb	r3, r3
 800b368:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800b36a:	f107 0308 	add.w	r3, r7, #8
 800b36e:	2208      	movs	r2, #8
 800b370:	4619      	mov	r1, r3
 800b372:	2008      	movs	r0, #8
 800b374:	f000 fbc2 	bl	800bafc <SUBGRF_WriteCommand>
}
 800b378:	bf00      	nop
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd90      	pop	{r4, r7, pc}

0800b380 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	6039      	str	r1, [r7, #0]
 800b38a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800b38c:	79fb      	ldrb	r3, [r7, #7]
 800b38e:	f003 0307 	and.w	r3, r3, #7
 800b392:	b2db      	uxtb	r3, r3
 800b394:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	0c1b      	lsrs	r3, r3, #16
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	0a1b      	lsrs	r3, r3, #8
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800b3ac:	f107 030c 	add.w	r3, r7, #12
 800b3b0:	2204      	movs	r2, #4
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	2097      	movs	r0, #151	; 0x97
 800b3b6:	f000 fba1 	bl	800bafc <SUBGRF_WriteCommand>
}
 800b3ba:	bf00      	nop
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
	...

0800b3c4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800b3c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b3c8:	b084      	sub	sp, #16
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800b3d2:	4b1d      	ldr	r3, [pc, #116]	; (800b448 <SUBGRF_SetRfFrequency+0x84>)
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	f083 0301 	eor.w	r3, r3, #1
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d005      	beq.n	800b3ec <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f7ff ff2b 	bl	800b23c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800b3e6:	4b18      	ldr	r3, [pc, #96]	; (800b448 <SUBGRF_SetRfFrequency+0x84>)
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	461c      	mov	r4, r3
 800b3f2:	4615      	mov	r5, r2
 800b3f4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800b3f8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800b3fc:	4a13      	ldr	r2, [pc, #76]	; (800b44c <SUBGRF_SetRfFrequency+0x88>)
 800b3fe:	f04f 0300 	mov.w	r3, #0
 800b402:	4640      	mov	r0, r8
 800b404:	4649      	mov	r1, r9
 800b406:	f7f4 ff13 	bl	8000230 <__aeabi_uldivmod>
 800b40a:	4602      	mov	r2, r0
 800b40c:	460b      	mov	r3, r1
 800b40e:	4613      	mov	r3, r2
 800b410:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	0e1b      	lsrs	r3, r3, #24
 800b416:	b2db      	uxtb	r3, r3
 800b418:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	0c1b      	lsrs	r3, r3, #16
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	0a1b      	lsrs	r3, r3, #8
 800b426:	b2db      	uxtb	r3, r3
 800b428:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800b430:	f107 0308 	add.w	r3, r7, #8
 800b434:	2204      	movs	r2, #4
 800b436:	4619      	mov	r1, r3
 800b438:	2086      	movs	r0, #134	; 0x86
 800b43a:	f000 fb5f 	bl	800bafc <SUBGRF_WriteCommand>
}
 800b43e:	bf00      	nop
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b448:	200004b8 	.word	0x200004b8
 800b44c:	01e84800 	.word	0x01e84800

0800b450 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	4603      	mov	r3, r0
 800b458:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800b45a:	79fa      	ldrb	r2, [r7, #7]
 800b45c:	4b09      	ldr	r3, [pc, #36]	; (800b484 <SUBGRF_SetPacketType+0x34>)
 800b45e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800b460:	79fb      	ldrb	r3, [r7, #7]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d104      	bne.n	800b470 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800b466:	2100      	movs	r1, #0
 800b468:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800b46c:	f000 fa96 	bl	800b99c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800b470:	1dfb      	adds	r3, r7, #7
 800b472:	2201      	movs	r2, #1
 800b474:	4619      	mov	r1, r3
 800b476:	208a      	movs	r0, #138	; 0x8a
 800b478:	f000 fb40 	bl	800bafc <SUBGRF_WriteCommand>
}
 800b47c:	bf00      	nop
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	200004b1 	.word	0x200004b1

0800b488 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800b488:	b480      	push	{r7}
 800b48a:	af00      	add	r7, sp, #0
    return PacketType;
 800b48c:	4b02      	ldr	r3, [pc, #8]	; (800b498 <SUBGRF_GetPacketType+0x10>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
}
 800b490:	4618      	mov	r0, r3
 800b492:	46bd      	mov	sp, r7
 800b494:	bc80      	pop	{r7}
 800b496:	4770      	bx	lr
 800b498:	200004b1 	.word	0x200004b1

0800b49c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	71fb      	strb	r3, [r7, #7]
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	71bb      	strb	r3, [r7, #6]
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 800b4ae:	79fb      	ldrb	r3, [r7, #7]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d124      	bne.n	800b4fe <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 800b4b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b4b8:	2b0f      	cmp	r3, #15
 800b4ba:	d106      	bne.n	800b4ca <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800b4bc:	2301      	movs	r3, #1
 800b4be:	2201      	movs	r2, #1
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	2006      	movs	r0, #6
 800b4c4:	f7ff ff00 	bl	800b2c8 <SUBGRF_SetPaConfig>
 800b4c8:	e005      	b.n	800b4d6 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	2004      	movs	r0, #4
 800b4d2:	f7ff fef9 	bl	800b2c8 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 800b4d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b4da:	2b0d      	cmp	r3, #13
 800b4dc:	dd02      	ble.n	800b4e4 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 800b4de:	230e      	movs	r3, #14
 800b4e0:	71bb      	strb	r3, [r7, #6]
 800b4e2:	e006      	b.n	800b4f2 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 800b4e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b4e8:	f113 0f11 	cmn.w	r3, #17
 800b4ec:	da01      	bge.n	800b4f2 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 800b4ee:	23ef      	movs	r3, #239	; 0xef
 800b4f0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 800b4f2:	2118      	movs	r1, #24
 800b4f4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800b4f8:	f000 fa50 	bl	800b99c <SUBGRF_WriteRegister>
 800b4fc:	e025      	b.n	800b54a <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 800b4fe:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800b502:	f000 fa5f 	bl	800b9c4 <SUBGRF_ReadRegister>
 800b506:	4603      	mov	r3, r0
 800b508:	f043 031e 	orr.w	r3, r3, #30
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	4619      	mov	r1, r3
 800b510:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800b514:	f000 fa42 	bl	800b99c <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800b518:	2301      	movs	r3, #1
 800b51a:	2200      	movs	r2, #0
 800b51c:	2107      	movs	r1, #7
 800b51e:	2004      	movs	r0, #4
 800b520:	f7ff fed2 	bl	800b2c8 <SUBGRF_SetPaConfig>
        if( power > 22 )
 800b524:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b528:	2b16      	cmp	r3, #22
 800b52a:	dd02      	ble.n	800b532 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 800b52c:	2316      	movs	r3, #22
 800b52e:	71bb      	strb	r3, [r7, #6]
 800b530:	e006      	b.n	800b540 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 800b532:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b536:	f113 0f09 	cmn.w	r3, #9
 800b53a:	da01      	bge.n	800b540 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 800b53c:	23f7      	movs	r3, #247	; 0xf7
 800b53e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 800b540:	2138      	movs	r1, #56	; 0x38
 800b542:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800b546:	f000 fa29 	bl	800b99c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800b54a:	79bb      	ldrb	r3, [r7, #6]
 800b54c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 800b54e:	797b      	ldrb	r3, [r7, #5]
 800b550:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800b552:	f107 030c 	add.w	r3, r7, #12
 800b556:	2202      	movs	r2, #2
 800b558:	4619      	mov	r1, r3
 800b55a:	208e      	movs	r0, #142	; 0x8e
 800b55c:	f000 face 	bl	800bafc <SUBGRF_WriteCommand>
}
 800b560:	bf00      	nop
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800b568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b56c:	b086      	sub	sp, #24
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800b572:	2300      	movs	r3, #0
 800b574:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b576:	4a61      	ldr	r2, [pc, #388]	; (800b6fc <SUBGRF_SetModulationParams+0x194>)
 800b578:	f107 0308 	add.w	r3, r7, #8
 800b57c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b580:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	781a      	ldrb	r2, [r3, #0]
 800b588:	4b5d      	ldr	r3, [pc, #372]	; (800b700 <SUBGRF_SetModulationParams+0x198>)
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d004      	beq.n	800b59a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	4618      	mov	r0, r3
 800b596:	f7ff ff5b 	bl	800b450 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	f200 80a5 	bhi.w	800b6ee <SUBGRF_SetModulationParams+0x186>
 800b5a4:	a201      	add	r2, pc, #4	; (adr r2, 800b5ac <SUBGRF_SetModulationParams+0x44>)
 800b5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5aa:	bf00      	nop
 800b5ac:	0800b5bd 	.word	0x0800b5bd
 800b5b0:	0800b67d 	.word	0x0800b67d
 800b5b4:	0800b63f 	.word	0x0800b63f
 800b5b8:	0800b6ab 	.word	0x0800b6ab
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800b5bc:	2308      	movs	r3, #8
 800b5be:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	4a4f      	ldr	r2, [pc, #316]	; (800b704 <SUBGRF_SetModulationParams+0x19c>)
 800b5c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ca:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	0c1b      	lsrs	r3, r3, #16
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	0a1b      	lsrs	r3, r3, #8
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	7b1b      	ldrb	r3, [r3, #12]
 800b5e6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	7b5b      	ldrb	r3, [r3, #13]
 800b5ec:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	461c      	mov	r4, r3
 800b5f6:	4615      	mov	r5, r2
 800b5f8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800b5fc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800b600:	4a41      	ldr	r2, [pc, #260]	; (800b708 <SUBGRF_SetModulationParams+0x1a0>)
 800b602:	f04f 0300 	mov.w	r3, #0
 800b606:	4640      	mov	r0, r8
 800b608:	4649      	mov	r1, r9
 800b60a:	f7f4 fe11 	bl	8000230 <__aeabi_uldivmod>
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	4613      	mov	r3, r2
 800b614:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	0c1b      	lsrs	r3, r3, #16
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	0a1b      	lsrs	r3, r3, #8
 800b622:	b2db      	uxtb	r3, r3
 800b624:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b62c:	7cfb      	ldrb	r3, [r7, #19]
 800b62e:	b29a      	uxth	r2, r3
 800b630:	f107 0308 	add.w	r3, r7, #8
 800b634:	4619      	mov	r1, r3
 800b636:	208b      	movs	r0, #139	; 0x8b
 800b638:	f000 fa60 	bl	800bafc <SUBGRF_WriteCommand>
        break;
 800b63c:	e058      	b.n	800b6f0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800b63e:	2304      	movs	r3, #4
 800b640:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	4a2f      	ldr	r2, [pc, #188]	; (800b704 <SUBGRF_SetModulationParams+0x19c>)
 800b648:	fbb2 f3f3 	udiv	r3, r2, r3
 800b64c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	0c1b      	lsrs	r3, r3, #16
 800b652:	b2db      	uxtb	r3, r3
 800b654:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	0a1b      	lsrs	r3, r3, #8
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	b2db      	uxtb	r3, r3
 800b662:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	7d1b      	ldrb	r3, [r3, #20]
 800b668:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b66a:	7cfb      	ldrb	r3, [r7, #19]
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	f107 0308 	add.w	r3, r7, #8
 800b672:	4619      	mov	r1, r3
 800b674:	208b      	movs	r0, #139	; 0x8b
 800b676:	f000 fa41 	bl	800bafc <SUBGRF_WriteCommand>
        break;
 800b67a:	e039      	b.n	800b6f0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800b67c:	2304      	movs	r3, #4
 800b67e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	7e1b      	ldrb	r3, [r3, #24]
 800b684:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	7e5b      	ldrb	r3, [r3, #25]
 800b68a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	7e9b      	ldrb	r3, [r3, #26]
 800b690:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	7edb      	ldrb	r3, [r3, #27]
 800b696:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b698:	7cfb      	ldrb	r3, [r7, #19]
 800b69a:	b29a      	uxth	r2, r3
 800b69c:	f107 0308 	add.w	r3, r7, #8
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	208b      	movs	r0, #139	; 0x8b
 800b6a4:	f000 fa2a 	bl	800bafc <SUBGRF_WriteCommand>

        break;
 800b6a8:	e022      	b.n	800b6f0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800b6aa:	2305      	movs	r3, #5
 800b6ac:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	4a14      	ldr	r2, [pc, #80]	; (800b704 <SUBGRF_SetModulationParams+0x19c>)
 800b6b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6b8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	0c1b      	lsrs	r3, r3, #16
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	0a1b      	lsrs	r3, r3, #8
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	7b1b      	ldrb	r3, [r3, #12]
 800b6d4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	7b5b      	ldrb	r3, [r3, #13]
 800b6da:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b6dc:	7cfb      	ldrb	r3, [r7, #19]
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	f107 0308 	add.w	r3, r7, #8
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	208b      	movs	r0, #139	; 0x8b
 800b6e8:	f000 fa08 	bl	800bafc <SUBGRF_WriteCommand>
        break;
 800b6ec:	e000      	b.n	800b6f0 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800b6ee:	bf00      	nop
    }
}
 800b6f0:	bf00      	nop
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b6fa:	bf00      	nop
 800b6fc:	0800e7a0 	.word	0x0800e7a0
 800b700:	200004b1 	.word	0x200004b1
 800b704:	3d090000 	.word	0x3d090000
 800b708:	01e84800 	.word	0x01e84800

0800b70c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800b714:	2300      	movs	r3, #0
 800b716:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b718:	4a48      	ldr	r2, [pc, #288]	; (800b83c <SUBGRF_SetPacketParams+0x130>)
 800b71a:	f107 030c 	add.w	r3, r7, #12
 800b71e:	ca07      	ldmia	r2, {r0, r1, r2}
 800b720:	c303      	stmia	r3!, {r0, r1}
 800b722:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	781a      	ldrb	r2, [r3, #0]
 800b728:	4b45      	ldr	r3, [pc, #276]	; (800b840 <SUBGRF_SetPacketParams+0x134>)
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d004      	beq.n	800b73a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	4618      	mov	r0, r3
 800b736:	f7ff fe8b 	bl	800b450 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	2b03      	cmp	r3, #3
 800b740:	d878      	bhi.n	800b834 <SUBGRF_SetPacketParams+0x128>
 800b742:	a201      	add	r2, pc, #4	; (adr r2, 800b748 <SUBGRF_SetPacketParams+0x3c>)
 800b744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b748:	0800b759 	.word	0x0800b759
 800b74c:	0800b7e9 	.word	0x0800b7e9
 800b750:	0800b7dd 	.word	0x0800b7dd
 800b754:	0800b759 	.word	0x0800b759
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	7a5b      	ldrb	r3, [r3, #9]
 800b75c:	2bf1      	cmp	r3, #241	; 0xf1
 800b75e:	d10a      	bne.n	800b776 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800b760:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b764:	f7ff fb16 	bl	800ad94 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800b768:	f248 0005 	movw	r0, #32773	; 0x8005
 800b76c:	f7ff fb32 	bl	800add4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800b770:	2302      	movs	r3, #2
 800b772:	75bb      	strb	r3, [r7, #22]
 800b774:	e011      	b.n	800b79a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	7a5b      	ldrb	r3, [r3, #9]
 800b77a:	2bf2      	cmp	r3, #242	; 0xf2
 800b77c:	d10a      	bne.n	800b794 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800b77e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800b782:	f7ff fb07 	bl	800ad94 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800b786:	f241 0021 	movw	r0, #4129	; 0x1021
 800b78a:	f7ff fb23 	bl	800add4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800b78e:	2306      	movs	r3, #6
 800b790:	75bb      	strb	r3, [r7, #22]
 800b792:	e002      	b.n	800b79a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	7a5b      	ldrb	r3, [r3, #9]
 800b798:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800b79a:	2309      	movs	r3, #9
 800b79c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	885b      	ldrh	r3, [r3, #2]
 800b7a2:	0a1b      	lsrs	r3, r3, #8
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	885b      	ldrh	r3, [r3, #2]
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	791b      	ldrb	r3, [r3, #4]
 800b7b6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	795b      	ldrb	r3, [r3, #5]
 800b7bc:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	799b      	ldrb	r3, [r3, #6]
 800b7c2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	79db      	ldrb	r3, [r3, #7]
 800b7c8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	7a1b      	ldrb	r3, [r3, #8]
 800b7ce:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800b7d0:	7dbb      	ldrb	r3, [r7, #22]
 800b7d2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	7a9b      	ldrb	r3, [r3, #10]
 800b7d8:	753b      	strb	r3, [r7, #20]
        break;
 800b7da:	e022      	b.n	800b822 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	7b1b      	ldrb	r3, [r3, #12]
 800b7e4:	733b      	strb	r3, [r7, #12]
        break;
 800b7e6:	e01c      	b.n	800b822 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800b7e8:	2306      	movs	r3, #6
 800b7ea:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	89db      	ldrh	r3, [r3, #14]
 800b7f0:	0a1b      	lsrs	r3, r3, #8
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	89db      	ldrh	r3, [r3, #14]
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	7c1a      	ldrb	r2, [r3, #16]
 800b804:	4b0f      	ldr	r3, [pc, #60]	; (800b844 <SUBGRF_SetPacketParams+0x138>)
 800b806:	4611      	mov	r1, r2
 800b808:	7019      	strb	r1, [r3, #0]
 800b80a:	4613      	mov	r3, r2
 800b80c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	7c5b      	ldrb	r3, [r3, #17]
 800b812:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	7c9b      	ldrb	r3, [r3, #18]
 800b818:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	7cdb      	ldrb	r3, [r3, #19]
 800b81e:	747b      	strb	r3, [r7, #17]
        break;
 800b820:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800b822:	7dfb      	ldrb	r3, [r7, #23]
 800b824:	b29a      	uxth	r2, r3
 800b826:	f107 030c 	add.w	r3, r7, #12
 800b82a:	4619      	mov	r1, r3
 800b82c:	208c      	movs	r0, #140	; 0x8c
 800b82e:	f000 f965 	bl	800bafc <SUBGRF_WriteCommand>
 800b832:	e000      	b.n	800b836 <SUBGRF_SetPacketParams+0x12a>
        return;
 800b834:	bf00      	nop
}
 800b836:	3718      	adds	r7, #24
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	0800e7a8 	.word	0x0800e7a8
 800b840:	200004b1 	.word	0x200004b1
 800b844:	200004b2 	.word	0x200004b2

0800b848 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	4603      	mov	r3, r0
 800b850:	460a      	mov	r2, r1
 800b852:	71fb      	strb	r3, [r7, #7]
 800b854:	4613      	mov	r3, r2
 800b856:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800b858:	79fb      	ldrb	r3, [r7, #7]
 800b85a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800b85c:	79bb      	ldrb	r3, [r7, #6]
 800b85e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800b860:	f107 030c 	add.w	r3, r7, #12
 800b864:	2202      	movs	r2, #2
 800b866:	4619      	mov	r1, r3
 800b868:	208f      	movs	r0, #143	; 0x8f
 800b86a:	f000 f947 	bl	800bafc <SUBGRF_WriteCommand>
}
 800b86e:	bf00      	nop
 800b870:	3710      	adds	r7, #16
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b082      	sub	sp, #8
 800b87a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800b880:	1d3b      	adds	r3, r7, #4
 800b882:	2201      	movs	r2, #1
 800b884:	4619      	mov	r1, r3
 800b886:	2015      	movs	r0, #21
 800b888:	f000 f95a 	bl	800bb40 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800b88c:	793b      	ldrb	r3, [r7, #4]
 800b88e:	425b      	negs	r3, r3
 800b890:	105b      	asrs	r3, r3, #1
 800b892:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800b894:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3708      	adds	r7, #8
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800b8aa:	f107 030c 	add.w	r3, r7, #12
 800b8ae:	2202      	movs	r2, #2
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	2013      	movs	r0, #19
 800b8b4:	f000 f944 	bl	800bb40 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800b8b8:	f7ff fde6 	bl	800b488 <SUBGRF_GetPacketType>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d10d      	bne.n	800b8de <SUBGRF_GetRxBufferStatus+0x3e>
 800b8c2:	4b0c      	ldr	r3, [pc, #48]	; (800b8f4 <SUBGRF_GetRxBufferStatus+0x54>)
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d108      	bne.n	800b8de <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800b8cc:	f240 7002 	movw	r0, #1794	; 0x702
 800b8d0:	f000 f878 	bl	800b9c4 <SUBGRF_ReadRegister>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	701a      	strb	r2, [r3, #0]
 800b8dc:	e002      	b.n	800b8e4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800b8de:	7b3a      	ldrb	r2, [r7, #12]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800b8e4:	7b7a      	ldrb	r2, [r7, #13]
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	701a      	strb	r2, [r3, #0]
}
 800b8ea:	bf00      	nop
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	200004b2 	.word	0x200004b2

0800b8f8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800b900:	f107 030c 	add.w	r3, r7, #12
 800b904:	2203      	movs	r2, #3
 800b906:	4619      	mov	r1, r3
 800b908:	2014      	movs	r0, #20
 800b90a:	f000 f919 	bl	800bb40 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800b90e:	f7ff fdbb 	bl	800b488 <SUBGRF_GetPacketType>
 800b912:	4603      	mov	r3, r0
 800b914:	461a      	mov	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d002      	beq.n	800b928 <SUBGRF_GetPacketStatus+0x30>
 800b922:	2b01      	cmp	r3, #1
 800b924:	d013      	beq.n	800b94e <SUBGRF_GetPacketStatus+0x56>
 800b926:	e02a      	b.n	800b97e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800b928:	7b3a      	ldrb	r2, [r7, #12]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800b92e:	7b7b      	ldrb	r3, [r7, #13]
 800b930:	425b      	negs	r3, r3
 800b932:	105b      	asrs	r3, r3, #1
 800b934:	b25a      	sxtb	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800b93a:	7bbb      	ldrb	r3, [r7, #14]
 800b93c:	425b      	negs	r3, r3
 800b93e:	105b      	asrs	r3, r3, #1
 800b940:	b25a      	sxtb	r2, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	609a      	str	r2, [r3, #8]
            break;
 800b94c:	e020      	b.n	800b990 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800b94e:	7b3b      	ldrb	r3, [r7, #12]
 800b950:	425b      	negs	r3, r3
 800b952:	105b      	asrs	r3, r3, #1
 800b954:	b25a      	sxtb	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800b95a:	7b7b      	ldrb	r3, [r7, #13]
 800b95c:	b25b      	sxtb	r3, r3
 800b95e:	3302      	adds	r3, #2
 800b960:	109b      	asrs	r3, r3, #2
 800b962:	b25a      	sxtb	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800b968:	7bbb      	ldrb	r3, [r7, #14]
 800b96a:	425b      	negs	r3, r3
 800b96c:	105b      	asrs	r3, r3, #1
 800b96e:	b25a      	sxtb	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800b974:	4b08      	ldr	r3, [pc, #32]	; (800b998 <SUBGRF_GetPacketStatus+0xa0>)
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	611a      	str	r2, [r3, #16]
            break;
 800b97c:	e008      	b.n	800b990 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800b97e:	2214      	movs	r2, #20
 800b980:	2100      	movs	r1, #0
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fbd4 	bl	800c130 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	220f      	movs	r2, #15
 800b98c:	701a      	strb	r2, [r3, #0]
            break;
 800b98e:	bf00      	nop
    }
}
 800b990:	bf00      	nop
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	200004b4 	.word	0x200004b4

0800b99c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	460a      	mov	r2, r1
 800b9a6:	80fb      	strh	r3, [r7, #6]
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b9ac:	1d7a      	adds	r2, r7, #5
 800b9ae:	88f9      	ldrh	r1, [r7, #6]
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	4803      	ldr	r0, [pc, #12]	; (800b9c0 <SUBGRF_WriteRegister+0x24>)
 800b9b4:	f7fa fd62 	bl	800647c <HAL_SUBGHZ_WriteRegisters>
}
 800b9b8:	bf00      	nop
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	2000020c 	.word	0x2000020c

0800b9c4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800b9ce:	f107 020f 	add.w	r2, r7, #15
 800b9d2:	88f9      	ldrh	r1, [r7, #6]
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	4804      	ldr	r0, [pc, #16]	; (800b9e8 <SUBGRF_ReadRegister+0x24>)
 800b9d8:	f7fa fdaf 	bl	800653a <HAL_SUBGHZ_ReadRegisters>
    return data;
 800b9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	2000020c 	.word	0x2000020c

0800b9ec <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	6039      	str	r1, [r7, #0]
 800b9f6:	80fb      	strh	r3, [r7, #6]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9fc:	f3ef 8310 	mrs	r3, PRIMASK
 800ba00:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba02:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ba04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba06:	b672      	cpsid	i
}
 800ba08:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800ba0a:	88bb      	ldrh	r3, [r7, #4]
 800ba0c:	88f9      	ldrh	r1, [r7, #6]
 800ba0e:	683a      	ldr	r2, [r7, #0]
 800ba10:	4806      	ldr	r0, [pc, #24]	; (800ba2c <SUBGRF_WriteRegisters+0x40>)
 800ba12:	f7fa fd33 	bl	800647c <HAL_SUBGHZ_WriteRegisters>
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	f383 8810 	msr	PRIMASK, r3
}
 800ba20:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ba22:	bf00      	nop
 800ba24:	3718      	adds	r7, #24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	2000020c 	.word	0x2000020c

0800ba30 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	4603      	mov	r3, r0
 800ba38:	6039      	str	r1, [r7, #0]
 800ba3a:	80fb      	strh	r3, [r7, #6]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba40:	f3ef 8310 	mrs	r3, PRIMASK
 800ba44:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba46:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ba48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba4a:	b672      	cpsid	i
}
 800ba4c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800ba4e:	88bb      	ldrh	r3, [r7, #4]
 800ba50:	88f9      	ldrh	r1, [r7, #6]
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	4806      	ldr	r0, [pc, #24]	; (800ba70 <SUBGRF_ReadRegisters+0x40>)
 800ba56:	f7fa fd70 	bl	800653a <HAL_SUBGHZ_ReadRegisters>
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	f383 8810 	msr	PRIMASK, r3
}
 800ba64:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ba66:	bf00      	nop
 800ba68:	3718      	adds	r7, #24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	2000020c 	.word	0x2000020c

0800ba74 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	6039      	str	r1, [r7, #0]
 800ba7e:	71fb      	strb	r3, [r7, #7]
 800ba80:	4613      	mov	r3, r2
 800ba82:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba84:	f3ef 8310 	mrs	r3, PRIMASK
 800ba88:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ba8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba8e:	b672      	cpsid	i
}
 800ba90:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800ba92:	79bb      	ldrb	r3, [r7, #6]
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	79f9      	ldrb	r1, [r7, #7]
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	4806      	ldr	r0, [pc, #24]	; (800bab4 <SUBGRF_WriteBuffer+0x40>)
 800ba9c:	f7fa fe61 	bl	8006762 <HAL_SUBGHZ_WriteBuffer>
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	f383 8810 	msr	PRIMASK, r3
}
 800baaa:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800baac:	bf00      	nop
 800baae:	3718      	adds	r7, #24
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	2000020c 	.word	0x2000020c

0800bab8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af00      	add	r7, sp, #0
 800babe:	4603      	mov	r3, r0
 800bac0:	6039      	str	r1, [r7, #0]
 800bac2:	71fb      	strb	r3, [r7, #7]
 800bac4:	4613      	mov	r3, r2
 800bac6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bac8:	f3ef 8310 	mrs	r3, PRIMASK
 800bacc:	60fb      	str	r3, [r7, #12]
  return(result);
 800bace:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800bad0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bad2:	b672      	cpsid	i
}
 800bad4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800bad6:	79bb      	ldrb	r3, [r7, #6]
 800bad8:	b29b      	uxth	r3, r3
 800bada:	79f9      	ldrb	r1, [r7, #7]
 800badc:	683a      	ldr	r2, [r7, #0]
 800bade:	4806      	ldr	r0, [pc, #24]	; (800baf8 <SUBGRF_ReadBuffer+0x40>)
 800bae0:	f7fa fe92 	bl	8006808 <HAL_SUBGHZ_ReadBuffer>
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	f383 8810 	msr	PRIMASK, r3
}
 800baee:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800baf0:	bf00      	nop
 800baf2:	3718      	adds	r7, #24
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	2000020c 	.word	0x2000020c

0800bafc <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b086      	sub	sp, #24
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	4603      	mov	r3, r0
 800bb04:	6039      	str	r1, [r7, #0]
 800bb06:	71fb      	strb	r3, [r7, #7]
 800bb08:	4613      	mov	r3, r2
 800bb0a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb0c:	f3ef 8310 	mrs	r3, PRIMASK
 800bb10:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb12:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800bb14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb16:	b672      	cpsid	i
}
 800bb18:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800bb1a:	88bb      	ldrh	r3, [r7, #4]
 800bb1c:	79f9      	ldrb	r1, [r7, #7]
 800bb1e:	683a      	ldr	r2, [r7, #0]
 800bb20:	4806      	ldr	r0, [pc, #24]	; (800bb3c <SUBGRF_WriteCommand+0x40>)
 800bb22:	f7fa fd6b 	bl	80065fc <HAL_SUBGHZ_ExecSetCmd>
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	f383 8810 	msr	PRIMASK, r3
}
 800bb30:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800bb32:	bf00      	nop
 800bb34:	3718      	adds	r7, #24
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	2000020c 	.word	0x2000020c

0800bb40 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	4603      	mov	r3, r0
 800bb48:	6039      	str	r1, [r7, #0]
 800bb4a:	71fb      	strb	r3, [r7, #7]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb50:	f3ef 8310 	mrs	r3, PRIMASK
 800bb54:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb56:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800bb58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb5a:	b672      	cpsid	i
}
 800bb5c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800bb5e:	88bb      	ldrh	r3, [r7, #4]
 800bb60:	79f9      	ldrb	r1, [r7, #7]
 800bb62:	683a      	ldr	r2, [r7, #0]
 800bb64:	4806      	ldr	r0, [pc, #24]	; (800bb80 <SUBGRF_ReadCommand+0x40>)
 800bb66:	f7fa fda8 	bl	80066ba <HAL_SUBGHZ_ExecGetCmd>
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	f383 8810 	msr	PRIMASK, r3
}
 800bb74:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800bb76:	bf00      	nop
 800bb78:	3718      	adds	r7, #24
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	2000020c 	.word	0x2000020c

0800bb84 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	460a      	mov	r2, r1
 800bb8e:	71fb      	strb	r3, [r7, #7]
 800bb90:	4613      	mov	r3, r2
 800bb92:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800bb94:	2301      	movs	r3, #1
 800bb96:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800bb98:	79bb      	ldrb	r3, [r7, #6]
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d10d      	bne.n	800bbba <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800bb9e:	79fb      	ldrb	r3, [r7, #7]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d104      	bne.n	800bbae <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800bba4:	2302      	movs	r3, #2
 800bba6:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800bba8:	2004      	movs	r0, #4
 800bbaa:	f000 f8df 	bl	800bd6c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800bbae:	79fb      	ldrb	r3, [r7, #7]
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d107      	bne.n	800bbc4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	73fb      	strb	r3, [r7, #15]
 800bbb8:	e004      	b.n	800bbc4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800bbba:	79bb      	ldrb	r3, [r7, #6]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d101      	bne.n	800bbc4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800bbc4:	7bfb      	ldrb	r3, [r7, #15]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7f6 fbc5 	bl	8002356 <RBI_ConfigRFSwitch>
}
 800bbcc:	bf00      	nop
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800bbe2:	f7f6 fbc5 	bl	8002370 <RBI_GetTxConfig>
 800bbe6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d016      	beq.n	800bc1c <SUBGRF_SetRfTxPower+0x48>
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	dc16      	bgt.n	800bc22 <SUBGRF_SetRfTxPower+0x4e>
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d003      	beq.n	800bc02 <SUBGRF_SetRfTxPower+0x2e>
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d00a      	beq.n	800bc16 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800bc00:	e00f      	b.n	800bc22 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800bc02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc06:	2b0f      	cmp	r3, #15
 800bc08:	dd02      	ble.n	800bc10 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800bc0a:	2302      	movs	r3, #2
 800bc0c:	73fb      	strb	r3, [r7, #15]
            break;
 800bc0e:	e009      	b.n	800bc24 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800bc10:	2301      	movs	r3, #1
 800bc12:	73fb      	strb	r3, [r7, #15]
            break;
 800bc14:	e006      	b.n	800bc24 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800bc16:	2301      	movs	r3, #1
 800bc18:	73fb      	strb	r3, [r7, #15]
            break;
 800bc1a:	e003      	b.n	800bc24 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800bc1c:	2302      	movs	r3, #2
 800bc1e:	73fb      	strb	r3, [r7, #15]
            break;
 800bc20:	e000      	b.n	800bc24 <SUBGRF_SetRfTxPower+0x50>
            break;
 800bc22:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800bc24:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7ff fc35 	bl	800b49c <SUBGRF_SetTxParams>

    return paSelect;
 800bc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800bc40:	2301      	movs	r3, #1
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bc80      	pop	{r7}
 800bc48:	4770      	bx	lr
	...

0800bc4c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800bc54:	4b03      	ldr	r3, [pc, #12]	; (800bc64 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2001      	movs	r0, #1
 800bc5a:	4798      	blx	r3
}
 800bc5c:	bf00      	nop
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	200004bc 	.word	0x200004bc

0800bc68 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800bc70:	4b03      	ldr	r3, [pc, #12]	; (800bc80 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2002      	movs	r0, #2
 800bc76:	4798      	blx	r3
}
 800bc78:	bf00      	nop
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	200004bc 	.word	0x200004bc

0800bc84 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800bc8c:	4b03      	ldr	r3, [pc, #12]	; (800bc9c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2040      	movs	r0, #64	; 0x40
 800bc92:	4798      	blx	r3
}
 800bc94:	bf00      	nop
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	200004bc 	.word	0x200004bc

0800bca0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800bcac:	78fb      	ldrb	r3, [r7, #3]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d002      	beq.n	800bcb8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d005      	beq.n	800bcc2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800bcb6:	e00a      	b.n	800bcce <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800bcb8:	4b07      	ldr	r3, [pc, #28]	; (800bcd8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2080      	movs	r0, #128	; 0x80
 800bcbe:	4798      	blx	r3
            break;
 800bcc0:	e005      	b.n	800bcce <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800bcc2:	4b05      	ldr	r3, [pc, #20]	; (800bcd8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bcca:	4798      	blx	r3
            break;
 800bccc:	bf00      	nop
    }
}
 800bcce:	bf00      	nop
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	200004bc 	.word	0x200004bc

0800bcdc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800bce4:	4b04      	ldr	r3, [pc, #16]	; (800bcf8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bcec:	4798      	blx	r3
}
 800bcee:	bf00      	nop
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	200004bc 	.word	0x200004bc

0800bcfc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800bd04:	4b03      	ldr	r3, [pc, #12]	; (800bd14 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2020      	movs	r0, #32
 800bd0a:	4798      	blx	r3
}
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	200004bc 	.word	0x200004bc

0800bd18 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800bd20:	4b03      	ldr	r3, [pc, #12]	; (800bd30 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2004      	movs	r0, #4
 800bd26:	4798      	blx	r3
}
 800bd28:	bf00      	nop
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	200004bc 	.word	0x200004bc

0800bd34 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800bd3c:	4b03      	ldr	r3, [pc, #12]	; (800bd4c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2008      	movs	r0, #8
 800bd42:	4798      	blx	r3
}
 800bd44:	bf00      	nop
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	200004bc 	.word	0x200004bc

0800bd50 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800bd58:	4b03      	ldr	r3, [pc, #12]	; (800bd68 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2010      	movs	r0, #16
 800bd5e:	4798      	blx	r3
}
 800bd60:	bf00      	nop
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	200004bc 	.word	0x200004bc

0800bd6c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800bd76:	f7f6 fb11 	bl	800239c <RBI_IsDCDC>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d112      	bne.n	800bda6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800bd80:	f640 1023 	movw	r0, #2339	; 0x923
 800bd84:	f7ff fe1e 	bl	800b9c4 <SUBGRF_ReadRegister>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800bd8c:	7bfb      	ldrb	r3, [r7, #15]
 800bd8e:	f023 0306 	bic.w	r3, r3, #6
 800bd92:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800bd94:	7bfa      	ldrb	r2, [r7, #15]
 800bd96:	79fb      	ldrb	r3, [r7, #7]
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	f640 1023 	movw	r0, #2339	; 0x923
 800bda2:	f7ff fdfb 	bl	800b99c <SUBGRF_WriteRegister>
  }
}
 800bda6:	bf00      	nop
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
	...

0800bdb0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d101      	bne.n	800bdc2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800bdbe:	231f      	movs	r3, #31
 800bdc0:	e016      	b.n	800bdf0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	73fb      	strb	r3, [r7, #15]
 800bdc6:	e00f      	b.n	800bde8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800bdc8:	7bfb      	ldrb	r3, [r7, #15]
 800bdca:	4a0c      	ldr	r2, [pc, #48]	; (800bdfc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800bdcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d205      	bcs.n	800bde2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800bdd6:	7bfb      	ldrb	r3, [r7, #15]
 800bdd8:	4a08      	ldr	r2, [pc, #32]	; (800bdfc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800bdda:	00db      	lsls	r3, r3, #3
 800bddc:	4413      	add	r3, r2
 800bdde:	791b      	ldrb	r3, [r3, #4]
 800bde0:	e006      	b.n	800bdf0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
 800bde4:	3301      	adds	r3, #1
 800bde6:	73fb      	strb	r3, [r7, #15]
 800bde8:	7bfb      	ldrb	r3, [r7, #15]
 800bdea:	2b15      	cmp	r3, #21
 800bdec:	d9ec      	bls.n	800bdc8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800bdee:	e7fe      	b.n	800bdee <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bc80      	pop	{r7}
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	0800e9cc 	.word	0x0800e9cc

0800be00 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b08a      	sub	sp, #40	; 0x28
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800be0a:	4b35      	ldr	r3, [pc, #212]	; (800bee0 <SUBGRF_GetCFO+0xe0>)
 800be0c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 800be0e:	f640 0007 	movw	r0, #2055	; 0x807
 800be12:	f7ff fdd7 	bl	800b9c4 <SUBGRF_ReadRegister>
 800be16:	4603      	mov	r3, r0
 800be18:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800be1a:	7ffb      	ldrb	r3, [r7, #31]
 800be1c:	08db      	lsrs	r3, r3, #3
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	f003 0303 	and.w	r3, r3, #3
 800be24:	3328      	adds	r3, #40	; 0x28
 800be26:	443b      	add	r3, r7
 800be28:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800be2c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800be2e:	7ffb      	ldrb	r3, [r7, #31]
 800be30:	f003 0307 	and.w	r3, r3, #7
 800be34:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 800be36:	7fba      	ldrb	r2, [r7, #30]
 800be38:	7f7b      	ldrb	r3, [r7, #29]
 800be3a:	3b01      	subs	r3, #1
 800be3c:	fa02 f303 	lsl.w	r3, r2, r3
 800be40:	461a      	mov	r2, r3
 800be42:	4b28      	ldr	r3, [pc, #160]	; (800bee4 <SUBGRF_GetCFO+0xe4>)
 800be44:	fbb3 f3f2 	udiv	r3, r3, r2
 800be48:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800be4a:	69ba      	ldr	r2, [r7, #24]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be52:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800be54:	2301      	movs	r3, #1
 800be56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800be5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be5e:	697a      	ldr	r2, [r7, #20]
 800be60:	fb02 f303 	mul.w	r3, r2, r3
 800be64:	2b07      	cmp	r3, #7
 800be66:	d802      	bhi.n	800be6e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800be68:	2302      	movs	r3, #2
 800be6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800be6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be72:	697a      	ldr	r2, [r7, #20]
 800be74:	fb02 f303 	mul.w	r3, r2, r3
 800be78:	2b03      	cmp	r3, #3
 800be7a:	d802      	bhi.n	800be82 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800be7c:	2304      	movs	r3, #4
 800be7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800be82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	fb02 f303 	mul.w	r3, r2, r3
 800be8c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 800be8e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800be92:	f7ff fd97 	bl	800b9c4 <SUBGRF_ReadRegister>
 800be96:	4603      	mov	r3, r0
 800be98:	021b      	lsls	r3, r3, #8
 800be9a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800be9e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 800bea0:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800bea4:	f7ff fd8e 	bl	800b9c4 <SUBGRF_ReadRegister>
 800bea8:	4603      	mov	r3, r0
 800beaa:	461a      	mov	r2, r3
 800beac:	6a3b      	ldr	r3, [r7, #32]
 800beae:	4313      	orrs	r3, r2
 800beb0:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800beb2:	6a3b      	ldr	r3, [r7, #32]
 800beb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d005      	beq.n	800bec8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800bebc:	6a3b      	ldr	r3, [r7, #32]
 800bebe:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bec2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bec6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	095b      	lsrs	r3, r3, #5
 800becc:	6a3a      	ldr	r2, [r7, #32]
 800bece:	fb02 f303 	mul.w	r3, r2, r3
 800bed2:	11da      	asrs	r2, r3, #7
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	601a      	str	r2, [r3, #0]
}
 800bed8:	bf00      	nop
 800beda:	3728      	adds	r7, #40	; 0x28
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	0c0a0804 	.word	0x0c0a0804
 800bee4:	01e84800 	.word	0x01e84800

0800bee8 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800bee8:	b480      	push	{r7}
 800beea:	b087      	sub	sp, #28
 800beec:	af00      	add	r7, sp, #0
 800beee:	4603      	mov	r3, r0
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
 800bef4:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800bef6:	2300      	movs	r3, #0
 800bef8:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800befa:	f04f 33ff 	mov.w	r3, #4294967295
 800befe:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800bf00:	697b      	ldr	r3, [r7, #20]
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	371c      	adds	r7, #28
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bc80      	pop	{r7}
 800bf0a:	4770      	bx	lr

0800bf0c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b087      	sub	sp, #28
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	4603      	mov	r3, r0
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
 800bf18:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 800bf1e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf22:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800bf24:	697b      	ldr	r3, [r7, #20]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	371c      	adds	r7, #28
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bc80      	pop	{r7}
 800bf2e:	4770      	bx	lr

0800bf30 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 800bf3c:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bc80      	pop	{r7}
 800bf48:	4770      	bx	lr

0800bf4a <RFW_DeInit>:

void RFW_DeInit( void)
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800bf4e:	bf00      	nop
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bc80      	pop	{r7}
 800bf54:	4770      	bx	lr

0800bf56 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 800bf56:	b480      	push	{r7}
 800bf58:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800bf5a:	2300      	movs	r3, #0
#endif
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bc80      	pop	{r7}
 800bf62:	4770      	bx	lr

0800bf64 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 800bf64:	b480      	push	{r7}
 800bf66:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 800bf68:	2300      	movs	r3, #0
#endif
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bc80      	pop	{r7}
 800bf70:	4770      	bx	lr

0800bf72 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 800bf72:	b480      	push	{r7}
 800bf74:	b083      	sub	sp, #12
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	4603      	mov	r3, r0
 800bf7a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800bf7c:	bf00      	nop
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bc80      	pop	{r7}
 800bf84:	4770      	bx	lr

0800bf86 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 800bf86:	b480      	push	{r7}
 800bf88:	b087      	sub	sp, #28
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	60f8      	str	r0, [r7, #12]
 800bf8e:	460b      	mov	r3, r1
 800bf90:	607a      	str	r2, [r7, #4]
 800bf92:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 800bf94:	f04f 33ff 	mov.w	r3, #4294967295
 800bf98:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 800bf9a:	697b      	ldr	r3, [r7, #20]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	371c      	adds	r7, #28
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bc80      	pop	{r7}
 800bfa4:	4770      	bx	lr

0800bfa6 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800bfa6:	b480      	push	{r7}
 800bfa8:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800bfaa:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bc80      	pop	{r7}
 800bfb4:	4770      	bx	lr

0800bfb6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800bfb6:	b480      	push	{r7}
 800bfb8:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800bfba:	bf00      	nop
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bc80      	pop	{r7}
 800bfc0:	4770      	bx	lr

0800bfc2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800bfc2:	b480      	push	{r7}
 800bfc4:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800bfc6:	bf00      	nop
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bc80      	pop	{r7}
 800bfcc:	4770      	bx	lr

0800bfce <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b083      	sub	sp, #12
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800bfd8:	bf00      	nop
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bc80      	pop	{r7}
 800bfe0:	4770      	bx	lr
	...

0800bfe4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800bfe8:	4b04      	ldr	r3, [pc, #16]	; (800bffc <UTIL_LPM_Init+0x18>)
 800bfea:	2200      	movs	r2, #0
 800bfec:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800bfee:	4b04      	ldr	r3, [pc, #16]	; (800c000 <UTIL_LPM_Init+0x1c>)
 800bff0:	2200      	movs	r2, #0
 800bff2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800bff4:	bf00      	nop
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bc80      	pop	{r7}
 800bffa:	4770      	bx	lr
 800bffc:	200004c0 	.word	0x200004c0
 800c000:	200004c4 	.word	0x200004c4

0800c004 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c004:	b480      	push	{r7}
 800c006:	b087      	sub	sp, #28
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	460b      	mov	r3, r1
 800c00e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c010:	f3ef 8310 	mrs	r3, PRIMASK
 800c014:	613b      	str	r3, [r7, #16]
  return(result);
 800c016:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c018:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c01a:	b672      	cpsid	i
}
 800c01c:	bf00      	nop
  
  switch( state )
 800c01e:	78fb      	ldrb	r3, [r7, #3]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d008      	beq.n	800c036 <UTIL_LPM_SetStopMode+0x32>
 800c024:	2b01      	cmp	r3, #1
 800c026:	d10e      	bne.n	800c046 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800c028:	4b0d      	ldr	r3, [pc, #52]	; (800c060 <UTIL_LPM_SetStopMode+0x5c>)
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4313      	orrs	r3, r2
 800c030:	4a0b      	ldr	r2, [pc, #44]	; (800c060 <UTIL_LPM_SetStopMode+0x5c>)
 800c032:	6013      	str	r3, [r2, #0]
      break;
 800c034:	e008      	b.n	800c048 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	43da      	mvns	r2, r3
 800c03a:	4b09      	ldr	r3, [pc, #36]	; (800c060 <UTIL_LPM_SetStopMode+0x5c>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4013      	ands	r3, r2
 800c040:	4a07      	ldr	r2, [pc, #28]	; (800c060 <UTIL_LPM_SetStopMode+0x5c>)
 800c042:	6013      	str	r3, [r2, #0]
      break;
 800c044:	e000      	b.n	800c048 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800c046:	bf00      	nop
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f383 8810 	msr	PRIMASK, r3
}
 800c052:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c054:	bf00      	nop
 800c056:	371c      	adds	r7, #28
 800c058:	46bd      	mov	sp, r7
 800c05a:	bc80      	pop	{r7}
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop
 800c060:	200004c0 	.word	0x200004c0

0800c064 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c064:	b480      	push	{r7}
 800c066:	b087      	sub	sp, #28
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	460b      	mov	r3, r1
 800c06e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c070:	f3ef 8310 	mrs	r3, PRIMASK
 800c074:	613b      	str	r3, [r7, #16]
  return(result);
 800c076:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c078:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c07a:	b672      	cpsid	i
}
 800c07c:	bf00      	nop
  
  switch(state)
 800c07e:	78fb      	ldrb	r3, [r7, #3]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d008      	beq.n	800c096 <UTIL_LPM_SetOffMode+0x32>
 800c084:	2b01      	cmp	r3, #1
 800c086:	d10e      	bne.n	800c0a6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c088:	4b0d      	ldr	r3, [pc, #52]	; (800c0c0 <UTIL_LPM_SetOffMode+0x5c>)
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	4313      	orrs	r3, r2
 800c090:	4a0b      	ldr	r2, [pc, #44]	; (800c0c0 <UTIL_LPM_SetOffMode+0x5c>)
 800c092:	6013      	str	r3, [r2, #0]
      break;
 800c094:	e008      	b.n	800c0a8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	43da      	mvns	r2, r3
 800c09a:	4b09      	ldr	r3, [pc, #36]	; (800c0c0 <UTIL_LPM_SetOffMode+0x5c>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4013      	ands	r3, r2
 800c0a0:	4a07      	ldr	r2, [pc, #28]	; (800c0c0 <UTIL_LPM_SetOffMode+0x5c>)
 800c0a2:	6013      	str	r3, [r2, #0]
      break;
 800c0a4:	e000      	b.n	800c0a8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c0a6:	bf00      	nop
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f383 8810 	msr	PRIMASK, r3
}
 800c0b2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c0b4:	bf00      	nop
 800c0b6:	371c      	adds	r7, #28
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bc80      	pop	{r7}
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	200004c4 	.word	0x200004c4

0800c0c4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0ca:	f3ef 8310 	mrs	r3, PRIMASK
 800c0ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0d0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800c0d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0d4:	b672      	cpsid	i
}
 800c0d6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800c0d8:	4b12      	ldr	r3, [pc, #72]	; (800c124 <UTIL_LPM_EnterLowPower+0x60>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d006      	beq.n	800c0ee <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800c0e0:	4b11      	ldr	r3, [pc, #68]	; (800c128 <UTIL_LPM_EnterLowPower+0x64>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800c0e6:	4b10      	ldr	r3, [pc, #64]	; (800c128 <UTIL_LPM_EnterLowPower+0x64>)
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	4798      	blx	r3
 800c0ec:	e010      	b.n	800c110 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800c0ee:	4b0f      	ldr	r3, [pc, #60]	; (800c12c <UTIL_LPM_EnterLowPower+0x68>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d006      	beq.n	800c104 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800c0f6:	4b0c      	ldr	r3, [pc, #48]	; (800c128 <UTIL_LPM_EnterLowPower+0x64>)
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800c0fc:	4b0a      	ldr	r3, [pc, #40]	; (800c128 <UTIL_LPM_EnterLowPower+0x64>)
 800c0fe:	68db      	ldr	r3, [r3, #12]
 800c100:	4798      	blx	r3
 800c102:	e005      	b.n	800c110 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800c104:	4b08      	ldr	r3, [pc, #32]	; (800c128 <UTIL_LPM_EnterLowPower+0x64>)
 800c106:	691b      	ldr	r3, [r3, #16]
 800c108:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800c10a:	4b07      	ldr	r3, [pc, #28]	; (800c128 <UTIL_LPM_EnterLowPower+0x64>)
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	4798      	blx	r3
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f383 8810 	msr	PRIMASK, r3
}
 800c11a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800c11c:	bf00      	nop
 800c11e:	3710      	adds	r7, #16
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	200004c0 	.word	0x200004c0
 800c128:	0800e81c 	.word	0x0800e81c
 800c12c:	200004c4 	.word	0x200004c4

0800c130 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	460b      	mov	r3, r1
 800c13a:	70fb      	strb	r3, [r7, #3]
 800c13c:	4613      	mov	r3, r2
 800c13e:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800c144:	e004      	b.n	800c150 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	1c5a      	adds	r2, r3, #1
 800c14a:	60fa      	str	r2, [r7, #12]
 800c14c:	78fa      	ldrb	r2, [r7, #3]
 800c14e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800c150:	883b      	ldrh	r3, [r7, #0]
 800c152:	1e5a      	subs	r2, r3, #1
 800c154:	803a      	strh	r2, [r7, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1f5      	bne.n	800c146 <UTIL_MEM_set_8+0x16>
  }
}
 800c15a:	bf00      	nop
 800c15c:	bf00      	nop
 800c15e:	3714      	adds	r7, #20
 800c160:	46bd      	mov	sp, r7
 800c162:	bc80      	pop	{r7}
 800c164:	4770      	bx	lr

0800c166 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800c166:	b082      	sub	sp, #8
 800c168:	b480      	push	{r7}
 800c16a:	b087      	sub	sp, #28
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	1d38      	adds	r0, r7, #4
 800c172:	e880 0006 	stmia.w	r0, {r1, r2}
 800c176:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800c178:	2300      	movs	r3, #0
 800c17a:	613b      	str	r3, [r7, #16]
 800c17c:	2300      	movs	r3, #0
 800c17e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c184:	4413      	add	r3, r2
 800c186:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c188:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800c192:	b29b      	uxth	r3, r3
 800c194:	4413      	add	r3, r2
 800c196:	b29b      	uxth	r3, r3
 800c198:	b21b      	sxth	r3, r3
 800c19a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800c19c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c1a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1a4:	db0a      	blt.n	800c1bc <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800c1ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	b21b      	sxth	r3, r3
 800c1ba:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	461a      	mov	r2, r3
 800c1c0:	f107 0310 	add.w	r3, r7, #16
 800c1c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c1c8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	371c      	adds	r7, #28
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bc80      	pop	{r7}
 800c1d4:	b002      	add	sp, #8
 800c1d6:	4770      	bx	lr

0800c1d8 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b08a      	sub	sp, #40	; 0x28
 800c1dc:	af02      	add	r7, sp, #8
 800c1de:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	61bb      	str	r3, [r7, #24]
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	613b      	str	r3, [r7, #16]
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c1f0:	4b14      	ldr	r3, [pc, #80]	; (800c244 <SysTimeGet+0x6c>)
 800c1f2:	691b      	ldr	r3, [r3, #16]
 800c1f4:	f107 0218 	add.w	r2, r7, #24
 800c1f8:	3204      	adds	r2, #4
 800c1fa:	4610      	mov	r0, r2
 800c1fc:	4798      	blx	r3
 800c1fe:	4603      	mov	r3, r0
 800c200:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800c202:	4b10      	ldr	r3, [pc, #64]	; (800c244 <SysTimeGet+0x6c>)
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	4798      	blx	r3
 800c208:	4603      	mov	r3, r0
 800c20a:	b21b      	sxth	r3, r3
 800c20c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800c20e:	4b0d      	ldr	r3, [pc, #52]	; (800c244 <SysTimeGet+0x6c>)
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	4798      	blx	r3
 800c214:	4603      	mov	r3, r0
 800c216:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800c218:	f107 0010 	add.w	r0, r7, #16
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	9300      	str	r3, [sp, #0]
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	f107 0208 	add.w	r2, r7, #8
 800c226:	ca06      	ldmia	r2, {r1, r2}
 800c228:	f7ff ff9d 	bl	800c166 <SysTimeAdd>

  return sysTime;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	461a      	mov	r2, r3
 800c230:	f107 0310 	add.w	r3, r7, #16
 800c234:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c238:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	3720      	adds	r7, #32
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}
 800c244:	0800e900 	.word	0x0800e900

0800c248 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  int i = 0;
 800c250:	2300      	movs	r3, #0
 800c252:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800c254:	e00e      	b.n	800c274 <ee_skip_atoi+0x2c>
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	4613      	mov	r3, r2
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	4413      	add	r3, r2
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	4618      	mov	r0, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	1c59      	adds	r1, r3, #1
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	6011      	str	r1, [r2, #0]
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	4403      	add	r3, r0
 800c270:	3b30      	subs	r3, #48	; 0x30
 800c272:	60fb      	str	r3, [r7, #12]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	2b2f      	cmp	r3, #47	; 0x2f
 800c27c:	d904      	bls.n	800c288 <ee_skip_atoi+0x40>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b39      	cmp	r3, #57	; 0x39
 800c286:	d9e6      	bls.n	800c256 <ee_skip_atoi+0xe>
  return i;
 800c288:	68fb      	ldr	r3, [r7, #12]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3714      	adds	r7, #20
 800c28e:	46bd      	mov	sp, r7
 800c290:	bc80      	pop	{r7}
 800c292:	4770      	bx	lr

0800c294 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800c294:	b480      	push	{r7}
 800c296:	b099      	sub	sp, #100	; 0x64
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
 800c2a0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800c2a2:	4b71      	ldr	r3, [pc, #452]	; (800c468 <ee_number+0x1d4>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800c2a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d002      	beq.n	800c2b8 <ee_number+0x24>
 800c2b2:	4b6e      	ldr	r3, [pc, #440]	; (800c46c <ee_number+0x1d8>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	dd02      	ble.n	800c2c4 <ee_number+0x30>
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	2b24      	cmp	r3, #36	; 0x24
 800c2c2:	dd01      	ble.n	800c2c8 <ee_number+0x34>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	e0ca      	b.n	800c45e <ee_number+0x1ca>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 800c2c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2ca:	f003 0301 	and.w	r3, r3, #1
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d001      	beq.n	800c2d6 <ee_number+0x42>
 800c2d2:	2330      	movs	r3, #48	; 0x30
 800c2d4:	e000      	b.n	800c2d8 <ee_number+0x44>
 800c2d6:	2320      	movs	r3, #32
 800c2d8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 800c2e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2e4:	f003 0302 	and.w	r3, r3, #2
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00b      	beq.n	800c304 <ee_number+0x70>
  {
    if (num < 0)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	da08      	bge.n	800c304 <ee_number+0x70>
    {
      sign = '-';
 800c2f2:	232d      	movs	r3, #45	; 0x2d
 800c2f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	425b      	negs	r3, r3
 800c2fc:	607b      	str	r3, [r7, #4]
      size--;
 800c2fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c300:	3b01      	subs	r3, #1
 800c302:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 800c304:	2300      	movs	r3, #0
 800c306:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d11e      	bne.n	800c34c <ee_number+0xb8>
    tmp[i++] = '0';
 800c30e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c310:	1c5a      	adds	r2, r3, #1
 800c312:	657a      	str	r2, [r7, #84]	; 0x54
 800c314:	3360      	adds	r3, #96	; 0x60
 800c316:	443b      	add	r3, r7
 800c318:	2230      	movs	r2, #48	; 0x30
 800c31a:	f803 2c50 	strb.w	r2, [r3, #-80]
 800c31e:	e018      	b.n	800c352 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	683a      	ldr	r2, [r7, #0]
 800c324:	fbb3 f1f2 	udiv	r1, r3, r2
 800c328:	fb01 f202 	mul.w	r2, r1, r2
 800c32c:	1a9b      	subs	r3, r3, r2
 800c32e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c330:	441a      	add	r2, r3
 800c332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c334:	1c59      	adds	r1, r3, #1
 800c336:	6579      	str	r1, [r7, #84]	; 0x54
 800c338:	7812      	ldrb	r2, [r2, #0]
 800c33a:	3360      	adds	r3, #96	; 0x60
 800c33c:	443b      	add	r3, r7
 800c33e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	fbb2 f3f3 	udiv	r3, r2, r3
 800c34a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1e6      	bne.n	800c320 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800c352:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c356:	429a      	cmp	r2, r3
 800c358:	dd01      	ble.n	800c35e <ee_number+0xca>
 800c35a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c35c:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 800c35e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c362:	1ad3      	subs	r3, r2, r3
 800c364:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800c366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c368:	f003 0301 	and.w	r3, r3, #1
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d112      	bne.n	800c396 <ee_number+0x102>
 800c370:	e00c      	b.n	800c38c <ee_number+0xf8>
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	1c5a      	adds	r2, r3, #1
 800c376:	60fa      	str	r2, [r7, #12]
 800c378:	2220      	movs	r2, #32
 800c37a:	701a      	strb	r2, [r3, #0]
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	3b01      	subs	r3, #1
 800c380:	60bb      	str	r3, [r7, #8]
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d101      	bne.n	800c38c <ee_number+0xf8>
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	e068      	b.n	800c45e <ee_number+0x1ca>
 800c38c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c38e:	1e5a      	subs	r2, r3, #1
 800c390:	66ba      	str	r2, [r7, #104]	; 0x68
 800c392:	2b00      	cmp	r3, #0
 800c394:	dced      	bgt.n	800c372 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800c396:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d01b      	beq.n	800c3d6 <ee_number+0x142>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	1c5a      	adds	r2, r3, #1
 800c3a2:	60fa      	str	r2, [r7, #12]
 800c3a4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c3a8:	701a      	strb	r2, [r3, #0]
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	60bb      	str	r3, [r7, #8]
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d10f      	bne.n	800c3d6 <ee_number+0x142>
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	e051      	b.n	800c45e <ee_number+0x1ca>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	1c5a      	adds	r2, r3, #1
 800c3be:	60fa      	str	r2, [r7, #12]
 800c3c0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800c3c4:	701a      	strb	r2, [r3, #0]
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	60bb      	str	r3, [r7, #8]
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d101      	bne.n	800c3d6 <ee_number+0x142>
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	e043      	b.n	800c45e <ee_number+0x1ca>
 800c3d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3d8:	1e5a      	subs	r2, r3, #1
 800c3da:	66ba      	str	r2, [r7, #104]	; 0x68
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dcec      	bgt.n	800c3ba <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800c3e0:	e00c      	b.n	800c3fc <ee_number+0x168>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	1c5a      	adds	r2, r3, #1
 800c3e6:	60fa      	str	r2, [r7, #12]
 800c3e8:	2230      	movs	r2, #48	; 0x30
 800c3ea:	701a      	strb	r2, [r3, #0]
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	3b01      	subs	r3, #1
 800c3f0:	60bb      	str	r3, [r7, #8]
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <ee_number+0x168>
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	e030      	b.n	800c45e <ee_number+0x1ca>
 800c3fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3fe:	1e5a      	subs	r2, r3, #1
 800c400:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c402:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c404:	429a      	cmp	r2, r3
 800c406:	dbec      	blt.n	800c3e2 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800c408:	e010      	b.n	800c42c <ee_number+0x198>
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	1c5a      	adds	r2, r3, #1
 800c40e:	60fa      	str	r2, [r7, #12]
 800c410:	f107 0110 	add.w	r1, r7, #16
 800c414:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c416:	440a      	add	r2, r1
 800c418:	7812      	ldrb	r2, [r2, #0]
 800c41a:	701a      	strb	r2, [r3, #0]
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	3b01      	subs	r3, #1
 800c420:	60bb      	str	r3, [r7, #8]
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d101      	bne.n	800c42c <ee_number+0x198>
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	e018      	b.n	800c45e <ee_number+0x1ca>
 800c42c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c42e:	1e5a      	subs	r2, r3, #1
 800c430:	657a      	str	r2, [r7, #84]	; 0x54
 800c432:	2b00      	cmp	r3, #0
 800c434:	dce9      	bgt.n	800c40a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800c436:	e00c      	b.n	800c452 <ee_number+0x1be>
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	1c5a      	adds	r2, r3, #1
 800c43c:	60fa      	str	r2, [r7, #12]
 800c43e:	2220      	movs	r2, #32
 800c440:	701a      	strb	r2, [r3, #0]
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	3b01      	subs	r3, #1
 800c446:	60bb      	str	r3, [r7, #8]
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d101      	bne.n	800c452 <ee_number+0x1be>
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	e005      	b.n	800c45e <ee_number+0x1ca>
 800c452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c454:	1e5a      	subs	r2, r3, #1
 800c456:	66ba      	str	r2, [r7, #104]	; 0x68
 800c458:	2b00      	cmp	r3, #0
 800c45a:	dced      	bgt.n	800c438 <ee_number+0x1a4>

  return str;
 800c45c:	68fb      	ldr	r3, [r7, #12]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3764      	adds	r7, #100	; 0x64
 800c462:	46bd      	mov	sp, r7
 800c464:	bc80      	pop	{r7}
 800c466:	4770      	bx	lr
 800c468:	2000001c 	.word	0x2000001c
 800c46c:	20000020 	.word	0x20000020

0800c470 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b092      	sub	sp, #72	; 0x48
 800c474:	af04      	add	r7, sp, #16
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
 800c47c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	2b00      	cmp	r3, #0
 800c482:	dc01      	bgt.n	800c488 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800c484:	2300      	movs	r3, #0
 800c486:	e142      	b.n	800c70e <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c48c:	e12a      	b.n	800c6e4 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 800c48e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	1ad2      	subs	r2, r2, r3
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	3b01      	subs	r3, #1
 800c498:	429a      	cmp	r2, r3
 800c49a:	f280 8131 	bge.w	800c700 <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	2b25      	cmp	r3, #37	; 0x25
 800c4a4:	d006      	beq.n	800c4b4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4aa:	1c59      	adds	r1, r3, #1
 800c4ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c4ae:	7812      	ldrb	r2, [r2, #0]
 800c4b0:	701a      	strb	r2, [r3, #0]
      continue;
 800c4b2:	e114      	b.n	800c6de <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	2b30      	cmp	r3, #48	; 0x30
 800c4c4:	d103      	bne.n	800c4ce <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800c4c6:	6a3b      	ldr	r3, [r7, #32]
 800c4c8:	f043 0301 	orr.w	r3, r3, #1
 800c4cc:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 800c4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c4d2:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	2b2f      	cmp	r3, #47	; 0x2f
 800c4da:	d908      	bls.n	800c4ee <tiny_vsnprintf_like+0x7e>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	2b39      	cmp	r3, #57	; 0x39
 800c4e2:	d804      	bhi.n	800c4ee <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800c4e4:	1d3b      	adds	r3, r7, #4
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7ff feae 	bl	800c248 <ee_skip_atoi>
 800c4ec:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 800c4ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f2:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 800c4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f8:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 800c4fa:	230a      	movs	r3, #10
 800c4fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	3b58      	subs	r3, #88	; 0x58
 800c504:	2b20      	cmp	r3, #32
 800c506:	f200 8094 	bhi.w	800c632 <tiny_vsnprintf_like+0x1c2>
 800c50a:	a201      	add	r2, pc, #4	; (adr r2, 800c510 <tiny_vsnprintf_like+0xa0>)
 800c50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c510:	0800c61b 	.word	0x0800c61b
 800c514:	0800c633 	.word	0x0800c633
 800c518:	0800c633 	.word	0x0800c633
 800c51c:	0800c633 	.word	0x0800c633
 800c520:	0800c633 	.word	0x0800c633
 800c524:	0800c633 	.word	0x0800c633
 800c528:	0800c633 	.word	0x0800c633
 800c52c:	0800c633 	.word	0x0800c633
 800c530:	0800c633 	.word	0x0800c633
 800c534:	0800c633 	.word	0x0800c633
 800c538:	0800c633 	.word	0x0800c633
 800c53c:	0800c59f 	.word	0x0800c59f
 800c540:	0800c629 	.word	0x0800c629
 800c544:	0800c633 	.word	0x0800c633
 800c548:	0800c633 	.word	0x0800c633
 800c54c:	0800c633 	.word	0x0800c633
 800c550:	0800c633 	.word	0x0800c633
 800c554:	0800c629 	.word	0x0800c629
 800c558:	0800c633 	.word	0x0800c633
 800c55c:	0800c633 	.word	0x0800c633
 800c560:	0800c633 	.word	0x0800c633
 800c564:	0800c633 	.word	0x0800c633
 800c568:	0800c633 	.word	0x0800c633
 800c56c:	0800c633 	.word	0x0800c633
 800c570:	0800c633 	.word	0x0800c633
 800c574:	0800c633 	.word	0x0800c633
 800c578:	0800c633 	.word	0x0800c633
 800c57c:	0800c5bf 	.word	0x0800c5bf
 800c580:	0800c633 	.word	0x0800c633
 800c584:	0800c67f 	.word	0x0800c67f
 800c588:	0800c633 	.word	0x0800c633
 800c58c:	0800c633 	.word	0x0800c633
 800c590:	0800c623 	.word	0x0800c623
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800c594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c596:	1c5a      	adds	r2, r3, #1
 800c598:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c59a:	2220      	movs	r2, #32
 800c59c:	701a      	strb	r2, [r3, #0]
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	61fb      	str	r3, [r7, #28]
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	dcf4      	bgt.n	800c594 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	1d1a      	adds	r2, r3, #4
 800c5ae:	603a      	str	r2, [r7, #0]
 800c5b0:	6819      	ldr	r1, [r3, #0]
 800c5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b4:	1c5a      	adds	r2, r3, #1
 800c5b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c5b8:	b2ca      	uxtb	r2, r1
 800c5ba:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800c5bc:	e08f      	b.n	800c6de <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	1d1a      	adds	r2, r3, #4
 800c5c2:	603a      	str	r2, [r7, #0]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d101      	bne.n	800c5d2 <tiny_vsnprintf_like+0x162>
 800c5ce:	4b52      	ldr	r3, [pc, #328]	; (800c718 <tiny_vsnprintf_like+0x2a8>)
 800c5d0:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800c5d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5d4:	f7f3 fdd4 	bl	8000180 <strlen>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800c5dc:	e004      	b.n	800c5e8 <tiny_vsnprintf_like+0x178>
 800c5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e0:	1c5a      	adds	r2, r3, #1
 800c5e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c5e4:	2220      	movs	r2, #32
 800c5e6:	701a      	strb	r2, [r3, #0]
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	1e5a      	subs	r2, r3, #1
 800c5ec:	61fa      	str	r2, [r7, #28]
 800c5ee:	693a      	ldr	r2, [r7, #16]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	dbf4      	blt.n	800c5de <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5f8:	e00a      	b.n	800c610 <tiny_vsnprintf_like+0x1a0>
 800c5fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5fc:	1c53      	adds	r3, r2, #1
 800c5fe:	627b      	str	r3, [r7, #36]	; 0x24
 800c600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c602:	1c59      	adds	r1, r3, #1
 800c604:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c606:	7812      	ldrb	r2, [r2, #0]
 800c608:	701a      	strb	r2, [r3, #0]
 800c60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60c:	3301      	adds	r3, #1
 800c60e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	429a      	cmp	r2, r3
 800c616:	dbf0      	blt.n	800c5fa <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800c618:	e061      	b.n	800c6de <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 800c61a:	6a3b      	ldr	r3, [r7, #32]
 800c61c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c620:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800c622:	2310      	movs	r3, #16
 800c624:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800c626:	e02d      	b.n	800c684 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	f043 0302 	orr.w	r3, r3, #2
 800c62e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800c630:	e025      	b.n	800c67e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	2b25      	cmp	r3, #37	; 0x25
 800c638:	d004      	beq.n	800c644 <tiny_vsnprintf_like+0x1d4>
 800c63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63c:	1c5a      	adds	r2, r3, #1
 800c63e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c640:	2225      	movs	r2, #37	; 0x25
 800c642:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800c644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	1ad2      	subs	r2, r2, r3
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	3b01      	subs	r3, #1
 800c64e:	429a      	cmp	r2, r3
 800c650:	da17      	bge.n	800c682 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d006      	beq.n	800c668 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65e:	1c59      	adds	r1, r3, #1
 800c660:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c662:	7812      	ldrb	r2, [r2, #0]
 800c664:	701a      	strb	r2, [r3, #0]
 800c666:	e002      	b.n	800c66e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	3b01      	subs	r3, #1
 800c66c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800c66e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	1ad2      	subs	r2, r2, r3
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	3b01      	subs	r3, #1
 800c678:	429a      	cmp	r2, r3
 800c67a:	db2f      	blt.n	800c6dc <tiny_vsnprintf_like+0x26c>
 800c67c:	e002      	b.n	800c684 <tiny_vsnprintf_like+0x214>
        break;
 800c67e:	bf00      	nop
 800c680:	e000      	b.n	800c684 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 800c682:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	2b6c      	cmp	r3, #108	; 0x6c
 800c688:	d105      	bne.n	800c696 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	1d1a      	adds	r2, r3, #4
 800c68e:	603a      	str	r2, [r7, #0]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	637b      	str	r3, [r7, #52]	; 0x34
 800c694:	e00f      	b.n	800c6b6 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 800c696:	6a3b      	ldr	r3, [r7, #32]
 800c698:	f003 0302 	and.w	r3, r3, #2
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d005      	beq.n	800c6ac <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	1d1a      	adds	r2, r3, #4
 800c6a4:	603a      	str	r2, [r7, #0]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	637b      	str	r3, [r7, #52]	; 0x34
 800c6aa:	e004      	b.n	800c6b6 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	1d1a      	adds	r2, r3, #4
 800c6b0:	603a      	str	r2, [r7, #0]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	1e5a      	subs	r2, r3, #1
 800c6ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	1acb      	subs	r3, r1, r3
 800c6c0:	1ad1      	subs	r1, r2, r3
 800c6c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	9302      	str	r3, [sp, #8]
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	9301      	str	r3, [sp, #4]
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6d4:	f7ff fdde 	bl	800c294 <ee_number>
 800c6d8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c6da:	e000      	b.n	800c6de <tiny_vsnprintf_like+0x26e>
        continue;
 800c6dc:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	607b      	str	r3, [r7, #4]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	f47f aed0 	bne.w	800c48e <tiny_vsnprintf_like+0x1e>
 800c6ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	1ad2      	subs	r2, r2, r3
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	f6bf aec8 	bge.w	800c48e <tiny_vsnprintf_like+0x1e>
 800c6fe:	e000      	b.n	800c702 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 800c700:	bf00      	nop
  }

  *str = '\0';
 800c702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c704:	2200      	movs	r2, #0
 800c706:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800c708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	1ad3      	subs	r3, r2, r3
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3738      	adds	r7, #56	; 0x38
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	0800e804 	.word	0x0800e804

0800c71c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b08c      	sub	sp, #48	; 0x30
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c724:	4b67      	ldr	r3, [pc, #412]	; (800c8c4 <UTIL_SEQ_Run+0x1a8>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c72a:	4b66      	ldr	r3, [pc, #408]	; (800c8c4 <UTIL_SEQ_Run+0x1a8>)
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4013      	ands	r3, r2
 800c732:	4a64      	ldr	r2, [pc, #400]	; (800c8c4 <UTIL_SEQ_Run+0x1a8>)
 800c734:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800c736:	e083      	b.n	800c840 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 800c738:	2300      	movs	r3, #0
 800c73a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800c73c:	e002      	b.n	800c744 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800c73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c740:	3301      	adds	r3, #1
 800c742:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800c744:	4a60      	ldr	r2, [pc, #384]	; (800c8c8 <UTIL_SEQ_Run+0x1ac>)
 800c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c748:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c74c:	4b5f      	ldr	r3, [pc, #380]	; (800c8cc <UTIL_SEQ_Run+0x1b0>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	401a      	ands	r2, r3
 800c752:	4b5c      	ldr	r3, [pc, #368]	; (800c8c4 <UTIL_SEQ_Run+0x1a8>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4013      	ands	r3, r2
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d0f0      	beq.n	800c73e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800c75c:	4a5a      	ldr	r2, [pc, #360]	; (800c8c8 <UTIL_SEQ_Run+0x1ac>)
 800c75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c760:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c764:	4b59      	ldr	r3, [pc, #356]	; (800c8cc <UTIL_SEQ_Run+0x1b0>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	401a      	ands	r2, r3
 800c76a:	4b56      	ldr	r3, [pc, #344]	; (800c8c4 <UTIL_SEQ_Run+0x1a8>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4013      	ands	r3, r2
 800c770:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c772:	4a55      	ldr	r2, [pc, #340]	; (800c8c8 <UTIL_SEQ_Run+0x1ac>)
 800c774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c776:	00db      	lsls	r3, r3, #3
 800c778:	4413      	add	r3, r2
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77e:	4013      	ands	r3, r2
 800c780:	2b00      	cmp	r3, #0
 800c782:	d106      	bne.n	800c792 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c784:	4a50      	ldr	r2, [pc, #320]	; (800c8c8 <UTIL_SEQ_Run+0x1ac>)
 800c786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c788:	00db      	lsls	r3, r3, #3
 800c78a:	4413      	add	r3, r2
 800c78c:	f04f 32ff 	mov.w	r2, #4294967295
 800c790:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c792:	4a4d      	ldr	r2, [pc, #308]	; (800c8c8 <UTIL_SEQ_Run+0x1ac>)
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	00db      	lsls	r3, r3, #3
 800c798:	4413      	add	r3, r2
 800c79a:	685a      	ldr	r2, [r3, #4]
 800c79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79e:	4013      	ands	r3, r2
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f000 f8f9 	bl	800c998 <SEQ_BitPosition>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	4b49      	ldr	r3, [pc, #292]	; (800c8d0 <UTIL_SEQ_Run+0x1b4>)
 800c7ac:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c7ae:	4a46      	ldr	r2, [pc, #280]	; (800c8c8 <UTIL_SEQ_Run+0x1ac>)
 800c7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b2:	00db      	lsls	r3, r3, #3
 800c7b4:	4413      	add	r3, r2
 800c7b6:	685a      	ldr	r2, [r3, #4]
 800c7b8:	4b45      	ldr	r3, [pc, #276]	; (800c8d0 <UTIL_SEQ_Run+0x1b4>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	2101      	movs	r1, #1
 800c7be:	fa01 f303 	lsl.w	r3, r1, r3
 800c7c2:	43db      	mvns	r3, r3
 800c7c4:	401a      	ands	r2, r3
 800c7c6:	4940      	ldr	r1, [pc, #256]	; (800c8c8 <UTIL_SEQ_Run+0x1ac>)
 800c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ca:	00db      	lsls	r3, r3, #3
 800c7cc:	440b      	add	r3, r1
 800c7ce:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7d0:	f3ef 8310 	mrs	r3, PRIMASK
 800c7d4:	61bb      	str	r3, [r7, #24]
  return(result);
 800c7d6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c7d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c7da:	b672      	cpsid	i
}
 800c7dc:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c7de:	4b3c      	ldr	r3, [pc, #240]	; (800c8d0 <UTIL_SEQ_Run+0x1b4>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c7e8:	43da      	mvns	r2, r3
 800c7ea:	4b3a      	ldr	r3, [pc, #232]	; (800c8d4 <UTIL_SEQ_Run+0x1b8>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4013      	ands	r3, r2
 800c7f0:	4a38      	ldr	r2, [pc, #224]	; (800c8d4 <UTIL_SEQ_Run+0x1b8>)
 800c7f2:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c7f4:	2302      	movs	r3, #2
 800c7f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7f8:	e013      	b.n	800c822 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	4a32      	ldr	r2, [pc, #200]	; (800c8c8 <UTIL_SEQ_Run+0x1ac>)
 800c800:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c804:	4b32      	ldr	r3, [pc, #200]	; (800c8d0 <UTIL_SEQ_Run+0x1b4>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2201      	movs	r2, #1
 800c80a:	fa02 f303 	lsl.w	r3, r2, r3
 800c80e:	43da      	mvns	r2, r3
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	3b01      	subs	r3, #1
 800c814:	400a      	ands	r2, r1
 800c816:	492c      	ldr	r1, [pc, #176]	; (800c8c8 <UTIL_SEQ_Run+0x1ac>)
 800c818:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81e:	3b01      	subs	r3, #1
 800c820:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1e8      	bne.n	800c7fa <UTIL_SEQ_Run+0xde>
 800c828:	6a3b      	ldr	r3, [r7, #32]
 800c82a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f383 8810 	msr	PRIMASK, r3
}
 800c832:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c834:	4b26      	ldr	r3, [pc, #152]	; (800c8d0 <UTIL_SEQ_Run+0x1b4>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a27      	ldr	r2, [pc, #156]	; (800c8d8 <UTIL_SEQ_Run+0x1bc>)
 800c83a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c83e:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800c840:	4b24      	ldr	r3, [pc, #144]	; (800c8d4 <UTIL_SEQ_Run+0x1b8>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	4b21      	ldr	r3, [pc, #132]	; (800c8cc <UTIL_SEQ_Run+0x1b0>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	401a      	ands	r2, r3
 800c84a:	4b1e      	ldr	r3, [pc, #120]	; (800c8c4 <UTIL_SEQ_Run+0x1a8>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4013      	ands	r3, r2
 800c850:	2b00      	cmp	r3, #0
 800c852:	d007      	beq.n	800c864 <UTIL_SEQ_Run+0x148>
 800c854:	4b21      	ldr	r3, [pc, #132]	; (800c8dc <UTIL_SEQ_Run+0x1c0>)
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	4b21      	ldr	r3, [pc, #132]	; (800c8e0 <UTIL_SEQ_Run+0x1c4>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4013      	ands	r3, r2
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f43f af6a 	beq.w	800c738 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c864:	4b1a      	ldr	r3, [pc, #104]	; (800c8d0 <UTIL_SEQ_Run+0x1b4>)
 800c866:	f04f 32ff 	mov.w	r2, #4294967295
 800c86a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c86c:	f000 f888 	bl	800c980 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c870:	f3ef 8310 	mrs	r3, PRIMASK
 800c874:	613b      	str	r3, [r7, #16]
  return(result);
 800c876:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c878:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c87a:	b672      	cpsid	i
}
 800c87c:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800c87e:	4b15      	ldr	r3, [pc, #84]	; (800c8d4 <UTIL_SEQ_Run+0x1b8>)
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	4b12      	ldr	r3, [pc, #72]	; (800c8cc <UTIL_SEQ_Run+0x1b0>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	401a      	ands	r2, r3
 800c888:	4b0e      	ldr	r3, [pc, #56]	; (800c8c4 <UTIL_SEQ_Run+0x1a8>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4013      	ands	r3, r2
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d108      	bne.n	800c8a4 <UTIL_SEQ_Run+0x188>
 800c892:	4b12      	ldr	r3, [pc, #72]	; (800c8dc <UTIL_SEQ_Run+0x1c0>)
 800c894:	681a      	ldr	r2, [r3, #0]
 800c896:	4b12      	ldr	r3, [pc, #72]	; (800c8e0 <UTIL_SEQ_Run+0x1c4>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4013      	ands	r3, r2
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d101      	bne.n	800c8a4 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 800c8a0:	f7f5 f876 	bl	8001990 <UTIL_SEQ_Idle>
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f383 8810 	msr	PRIMASK, r3
}
 800c8ae:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800c8b0:	f000 f86c 	bl	800c98c <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c8b4:	4a03      	ldr	r2, [pc, #12]	; (800c8c4 <UTIL_SEQ_Run+0x1a8>)
 800c8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b8:	6013      	str	r3, [r2, #0]

  return;
 800c8ba:	bf00      	nop
}
 800c8bc:	3730      	adds	r7, #48	; 0x30
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	20000028 	.word	0x20000028
 800c8c8:	20000558 	.word	0x20000558
 800c8cc:	20000024 	.word	0x20000024
 800c8d0:	200004d4 	.word	0x200004d4
 800c8d4:	200004c8 	.word	0x200004c8
 800c8d8:	200004d8 	.word	0x200004d8
 800c8dc:	200004cc 	.word	0x200004cc
 800c8e0:	200004d0 	.word	0x200004d0

0800c8e4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b088      	sub	sp, #32
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8f0:	f3ef 8310 	mrs	r3, PRIMASK
 800c8f4:	617b      	str	r3, [r7, #20]
  return(result);
 800c8f6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c8f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8fa:	b672      	cpsid	i
}
 800c8fc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f000 f84a 	bl	800c998 <SEQ_BitPosition>
 800c904:	4603      	mov	r3, r0
 800c906:	4619      	mov	r1, r3
 800c908:	4a06      	ldr	r2, [pc, #24]	; (800c924 <UTIL_SEQ_RegTask+0x40>)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	f383 8810 	msr	PRIMASK, r3
}
 800c91a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c91c:	bf00      	nop
}
 800c91e:	3720      	adds	r7, #32
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	200004d8 	.word	0x200004d8

0800c928 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c928:	b480      	push	{r7}
 800c92a:	b087      	sub	sp, #28
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c932:	f3ef 8310 	mrs	r3, PRIMASK
 800c936:	60fb      	str	r3, [r7, #12]
  return(result);
 800c938:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c93a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c93c:	b672      	cpsid	i
}
 800c93e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c940:	4b0d      	ldr	r3, [pc, #52]	; (800c978 <UTIL_SEQ_SetTask+0x50>)
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4313      	orrs	r3, r2
 800c948:	4a0b      	ldr	r2, [pc, #44]	; (800c978 <UTIL_SEQ_SetTask+0x50>)
 800c94a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c94c:	4a0b      	ldr	r2, [pc, #44]	; (800c97c <UTIL_SEQ_SetTask+0x54>)
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	431a      	orrs	r2, r3
 800c958:	4908      	ldr	r1, [pc, #32]	; (800c97c <UTIL_SEQ_SetTask+0x54>)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	f383 8810 	msr	PRIMASK, r3
}
 800c96a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c96c:	bf00      	nop
}
 800c96e:	371c      	adds	r7, #28
 800c970:	46bd      	mov	sp, r7
 800c972:	bc80      	pop	{r7}
 800c974:	4770      	bx	lr
 800c976:	bf00      	nop
 800c978:	200004c8 	.word	0x200004c8
 800c97c:	20000558 	.word	0x20000558

0800c980 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c980:	b480      	push	{r7}
 800c982:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c984:	bf00      	nop
}
 800c986:	46bd      	mov	sp, r7
 800c988:	bc80      	pop	{r7}
 800c98a:	4770      	bx	lr

0800c98c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c98c:	b480      	push	{r7}
 800c98e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c990:	bf00      	nop
}
 800c992:	46bd      	mov	sp, r7
 800c994:	bc80      	pop	{r7}
 800c996:	4770      	bx	lr

0800c998 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c998:	b480      	push	{r7}
 800c99a:	b085      	sub	sp, #20
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	0c1b      	lsrs	r3, r3, #16
 800c9a8:	041b      	lsls	r3, r3, #16
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d104      	bne.n	800c9b8 <SEQ_BitPosition+0x20>
 800c9ae:	2310      	movs	r3, #16
 800c9b0:	73fb      	strb	r3, [r7, #15]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	041b      	lsls	r3, r3, #16
 800c9b6:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d105      	bne.n	800c9ce <SEQ_BitPosition+0x36>
 800c9c2:	7bfb      	ldrb	r3, [r7, #15]
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	73fb      	strb	r3, [r7, #15]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	021b      	lsls	r3, r3, #8
 800c9cc:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d105      	bne.n	800c9e4 <SEQ_BitPosition+0x4c>
 800c9d8:	7bfb      	ldrb	r3, [r7, #15]
 800c9da:	3304      	adds	r3, #4
 800c9dc:	73fb      	strb	r3, [r7, #15]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	011b      	lsls	r3, r3, #4
 800c9e2:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	0f1b      	lsrs	r3, r3, #28
 800c9e8:	4a06      	ldr	r2, [pc, #24]	; (800ca04 <SEQ_BitPosition+0x6c>)
 800c9ea:	5cd2      	ldrb	r2, [r2, r3]
 800c9ec:	7bfb      	ldrb	r3, [r7, #15]
 800c9ee:	4413      	add	r3, r2
 800c9f0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c9f2:	7bfb      	ldrb	r3, [r7, #15]
 800c9f4:	f1c3 031f 	rsb	r3, r3, #31
 800c9f8:	b2db      	uxtb	r3, r3
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3714      	adds	r7, #20
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bc80      	pop	{r7}
 800ca02:	4770      	bx	lr
 800ca04:	0800ea7c 	.word	0x0800ea7c

0800ca08 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800ca0c:	4b04      	ldr	r3, [pc, #16]	; (800ca20 <UTIL_TIMER_Init+0x18>)
 800ca0e:	2200      	movs	r2, #0
 800ca10:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800ca12:	4b04      	ldr	r3, [pc, #16]	; (800ca24 <UTIL_TIMER_Init+0x1c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4798      	blx	r3
 800ca18:	4603      	mov	r3, r0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	20000568 	.word	0x20000568
 800ca24:	0800e8d4 	.word	0x0800e8d4

0800ca28 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	603b      	str	r3, [r7, #0]
 800ca34:	4613      	mov	r3, r2
 800ca36:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d023      	beq.n	800ca86 <UTIL_TIMER_Create+0x5e>
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d020      	beq.n	800ca86 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2200      	movs	r2, #0
 800ca48:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800ca4a:	4b11      	ldr	r3, [pc, #68]	; (800ca90 <UTIL_TIMER_Create+0x68>)
 800ca4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4e:	68b8      	ldr	r0, [r7, #8]
 800ca50:	4798      	blx	r3
 800ca52:	4602      	mov	r2, r0
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2200      	movs	r2, #0
 800ca68:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	683a      	ldr	r2, [r7, #0]
 800ca6e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	69ba      	ldr	r2, [r7, #24]
 800ca74:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	79fa      	ldrb	r2, [r7, #7]
 800ca7a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	e000      	b.n	800ca88 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800ca86:	2301      	movs	r3, #1
  }
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3710      	adds	r7, #16
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}
 800ca90:	0800e8d4 	.word	0x0800e8d4

0800ca94 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b08a      	sub	sp, #40	; 0x28
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d056      	beq.n	800cb56 <UTIL_TIMER_Start+0xc2>
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 f9a9 	bl	800ce00 <TimerExists>
 800caae:	4603      	mov	r3, r0
 800cab0:	f083 0301 	eor.w	r3, r3, #1
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d04d      	beq.n	800cb56 <UTIL_TIMER_Start+0xc2>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	7a5b      	ldrb	r3, [r3, #9]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d149      	bne.n	800cb56 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cac2:	f3ef 8310 	mrs	r3, PRIMASK
 800cac6:	613b      	str	r3, [r7, #16]
  return(result);
 800cac8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800caca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cacc:	b672      	cpsid	i
}
 800cace:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800cad6:	4b24      	ldr	r3, [pc, #144]	; (800cb68 <UTIL_TIMER_Start+0xd4>)
 800cad8:	6a1b      	ldr	r3, [r3, #32]
 800cada:	4798      	blx	r3
 800cadc:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800cade:	6a3a      	ldr	r2, [r7, #32]
 800cae0:	69bb      	ldr	r3, [r7, #24]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d201      	bcs.n	800caea <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a3a      	ldr	r2, [r7, #32]
 800caee:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2201      	movs	r2, #1
 800cafa:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2200      	movs	r2, #0
 800cb00:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800cb02:	4b1a      	ldr	r3, [pc, #104]	; (800cb6c <UTIL_TIMER_Start+0xd8>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d106      	bne.n	800cb18 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800cb0a:	4b17      	ldr	r3, [pc, #92]	; (800cb68 <UTIL_TIMER_Start+0xd4>)
 800cb0c:	691b      	ldr	r3, [r3, #16]
 800cb0e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f000 f9eb 	bl	800ceec <TimerInsertNewHeadTimer>
 800cb16:	e017      	b.n	800cb48 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800cb18:	4b13      	ldr	r3, [pc, #76]	; (800cb68 <UTIL_TIMER_Start+0xd4>)
 800cb1a:	699b      	ldr	r3, [r3, #24]
 800cb1c:	4798      	blx	r3
 800cb1e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	441a      	add	r2, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	4b0e      	ldr	r3, [pc, #56]	; (800cb6c <UTIL_TIMER_Start+0xd8>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d203      	bcs.n	800cb42 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f9d6 	bl	800ceec <TimerInsertNewHeadTimer>
 800cb40:	e002      	b.n	800cb48 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 f9a2 	bl	800ce8c <TimerInsertTimer>
 800cb48:	69fb      	ldr	r3, [r7, #28]
 800cb4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f383 8810 	msr	PRIMASK, r3
}
 800cb52:	bf00      	nop
  {
 800cb54:	e002      	b.n	800cb5c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800cb56:	2301      	movs	r3, #1
 800cb58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800cb5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3728      	adds	r7, #40	; 0x28
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	0800e8d4 	.word	0x0800e8d4
 800cb6c:	20000568 	.word	0x20000568

0800cb70 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b088      	sub	sp, #32
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d05b      	beq.n	800cc3a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb82:	f3ef 8310 	mrs	r3, PRIMASK
 800cb86:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb88:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800cb8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb8c:	b672      	cpsid	i
}
 800cb8e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800cb90:	4b2d      	ldr	r3, [pc, #180]	; (800cc48 <UTIL_TIMER_Stop+0xd8>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800cb96:	4b2c      	ldr	r3, [pc, #176]	; (800cc48 <UTIL_TIMER_Stop+0xd8>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800cba2:	4b29      	ldr	r3, [pc, #164]	; (800cc48 <UTIL_TIMER_Stop+0xd8>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d041      	beq.n	800cc2e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800cbb0:	4b25      	ldr	r3, [pc, #148]	; (800cc48 <UTIL_TIMER_Stop+0xd8>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d134      	bne.n	800cc24 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800cbba:	4b23      	ldr	r3, [pc, #140]	; (800cc48 <UTIL_TIMER_Stop+0xd8>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800cbc2:	4b21      	ldr	r3, [pc, #132]	; (800cc48 <UTIL_TIMER_Stop+0xd8>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	695b      	ldr	r3, [r3, #20]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d00a      	beq.n	800cbe2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800cbcc:	4b1e      	ldr	r3, [pc, #120]	; (800cc48 <UTIL_TIMER_Stop+0xd8>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	695b      	ldr	r3, [r3, #20]
 800cbd2:	4a1d      	ldr	r2, [pc, #116]	; (800cc48 <UTIL_TIMER_Stop+0xd8>)
 800cbd4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800cbd6:	4b1c      	ldr	r3, [pc, #112]	; (800cc48 <UTIL_TIMER_Stop+0xd8>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f000 f92c 	bl	800ce38 <TimerSetTimeout>
 800cbe0:	e023      	b.n	800cc2a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800cbe2:	4b1a      	ldr	r3, [pc, #104]	; (800cc4c <UTIL_TIMER_Stop+0xdc>)
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	4798      	blx	r3
            TimerListHead = NULL;
 800cbe8:	4b17      	ldr	r3, [pc, #92]	; (800cc48 <UTIL_TIMER_Stop+0xd8>)
 800cbea:	2200      	movs	r2, #0
 800cbec:	601a      	str	r2, [r3, #0]
 800cbee:	e01c      	b.n	800cc2a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800cbf0:	697a      	ldr	r2, [r7, #20]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d110      	bne.n	800cc1a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	695b      	ldr	r3, [r3, #20]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d006      	beq.n	800cc0e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	695b      	ldr	r3, [r3, #20]
 800cc04:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	697a      	ldr	r2, [r7, #20]
 800cc0a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800cc0c:	e00d      	b.n	800cc2a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	697a      	ldr	r2, [r7, #20]
 800cc16:	615a      	str	r2, [r3, #20]
            break;
 800cc18:	e007      	b.n	800cc2a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	695b      	ldr	r3, [r3, #20]
 800cc22:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d1e2      	bne.n	800cbf0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	77fb      	strb	r3, [r7, #31]
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	f383 8810 	msr	PRIMASK, r3
}
 800cc38:	e001      	b.n	800cc3e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800cc3e:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3720      	adds	r7, #32
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	20000568 	.word	0x20000568
 800cc4c:	0800e8d4 	.word	0x0800e8d4

0800cc50 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d102      	bne.n	800cc6a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800cc64:	2301      	movs	r3, #1
 800cc66:	73fb      	strb	r3, [r7, #15]
 800cc68:	e014      	b.n	800cc94 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800cc6a:	4b0d      	ldr	r3, [pc, #52]	; (800cca0 <UTIL_TIMER_SetPeriod+0x50>)
 800cc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc6e:	6838      	ldr	r0, [r7, #0]
 800cc70:	4798      	blx	r3
 800cc72:	4602      	mov	r2, r0
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 f8c1 	bl	800ce00 <TimerExists>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d007      	beq.n	800cc94 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7ff ff73 	bl	800cb70 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f7ff ff02 	bl	800ca94 <UTIL_TIMER_Start>
 800cc90:	4603      	mov	r3, r0
 800cc92:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800cc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3710      	adds	r7, #16
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	0800e8d4 	.word	0x0800e8d4

0800cca4 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800cca4:	b590      	push	{r4, r7, lr}
 800cca6:	b089      	sub	sp, #36	; 0x24
 800cca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccaa:	f3ef 8310 	mrs	r3, PRIMASK
 800ccae:	60bb      	str	r3, [r7, #8]
  return(result);
 800ccb0:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800ccb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800ccb4:	b672      	cpsid	i
}
 800ccb6:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800ccb8:	4b38      	ldr	r3, [pc, #224]	; (800cd9c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800ccba:	695b      	ldr	r3, [r3, #20]
 800ccbc:	4798      	blx	r3
 800ccbe:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800ccc0:	4b36      	ldr	r3, [pc, #216]	; (800cd9c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800ccc2:	691b      	ldr	r3, [r3, #16]
 800ccc4:	4798      	blx	r3
 800ccc6:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800ccc8:	693a      	ldr	r2, [r7, #16]
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	1ad3      	subs	r3, r2, r3
 800ccce:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800ccd0:	4b33      	ldr	r3, [pc, #204]	; (800cda0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d037      	beq.n	800cd48 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800ccd8:	4b31      	ldr	r3, [pc, #196]	; (800cda0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d206      	bcs.n	800ccf6 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	1ad2      	subs	r2, r2, r3
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	601a      	str	r2, [r3, #0]
 800ccf4:	e002      	b.n	800ccfc <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	695b      	ldr	r3, [r3, #20]
 800cd00:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1ea      	bne.n	800ccde <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800cd08:	e01e      	b.n	800cd48 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800cd0a:	4b25      	ldr	r3, [pc, #148]	; (800cda0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800cd10:	4b23      	ldr	r3, [pc, #140]	; (800cda0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	695b      	ldr	r3, [r3, #20]
 800cd16:	4a22      	ldr	r2, [pc, #136]	; (800cda0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800cd18:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	2200      	movs	r2, #0
 800cd24:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800cd26:	69fb      	ldr	r3, [r7, #28]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	69fa      	ldr	r2, [r7, #28]
 800cd2c:	6912      	ldr	r2, [r2, #16]
 800cd2e:	4610      	mov	r0, r2
 800cd30:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	7adb      	ldrb	r3, [r3, #11]
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d106      	bne.n	800cd48 <UTIL_TIMER_IRQ_Handler+0xa4>
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	7a9b      	ldrb	r3, [r3, #10]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d102      	bne.n	800cd48 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800cd42:	69f8      	ldr	r0, [r7, #28]
 800cd44:	f7ff fea6 	bl	800ca94 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800cd48:	4b15      	ldr	r3, [pc, #84]	; (800cda0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00d      	beq.n	800cd6c <UTIL_TIMER_IRQ_Handler+0xc8>
 800cd50:	4b13      	ldr	r3, [pc, #76]	; (800cda0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d0d7      	beq.n	800cd0a <UTIL_TIMER_IRQ_Handler+0x66>
 800cd5a:	4b11      	ldr	r3, [pc, #68]	; (800cda0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	681c      	ldr	r4, [r3, #0]
 800cd60:	4b0e      	ldr	r3, [pc, #56]	; (800cd9c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800cd62:	699b      	ldr	r3, [r3, #24]
 800cd64:	4798      	blx	r3
 800cd66:	4603      	mov	r3, r0
 800cd68:	429c      	cmp	r4, r3
 800cd6a:	d3ce      	bcc.n	800cd0a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800cd6c:	4b0c      	ldr	r3, [pc, #48]	; (800cda0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d009      	beq.n	800cd88 <UTIL_TIMER_IRQ_Handler+0xe4>
 800cd74:	4b0a      	ldr	r3, [pc, #40]	; (800cda0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	7a1b      	ldrb	r3, [r3, #8]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d104      	bne.n	800cd88 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800cd7e:	4b08      	ldr	r3, [pc, #32]	; (800cda0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 f858 	bl	800ce38 <TimerSetTimeout>
 800cd88:	69bb      	ldr	r3, [r7, #24]
 800cd8a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f383 8810 	msr	PRIMASK, r3
}
 800cd92:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800cd94:	bf00      	nop
 800cd96:	3724      	adds	r7, #36	; 0x24
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd90      	pop	{r4, r7, pc}
 800cd9c:	0800e8d4 	.word	0x0800e8d4
 800cda0:	20000568 	.word	0x20000568

0800cda4 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800cdaa:	4b06      	ldr	r3, [pc, #24]	; (800cdc4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800cdac:	69db      	ldr	r3, [r3, #28]
 800cdae:	4798      	blx	r3
 800cdb0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800cdb2:	4b04      	ldr	r3, [pc, #16]	; (800cdc4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800cdb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	4798      	blx	r3
 800cdba:	4603      	mov	r3, r0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3708      	adds	r7, #8
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	0800e8d4 	.word	0x0800e8d4

0800cdc8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800cdd0:	4b0a      	ldr	r3, [pc, #40]	; (800cdfc <UTIL_TIMER_GetElapsedTime+0x34>)
 800cdd2:	69db      	ldr	r3, [r3, #28]
 800cdd4:	4798      	blx	r3
 800cdd6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800cdd8:	4b08      	ldr	r3, [pc, #32]	; (800cdfc <UTIL_TIMER_GetElapsedTime+0x34>)
 800cdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	4798      	blx	r3
 800cde0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800cde2:	4b06      	ldr	r3, [pc, #24]	; (800cdfc <UTIL_TIMER_GetElapsedTime+0x34>)
 800cde4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cde6:	68f9      	ldr	r1, [r7, #12]
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	1a8a      	subs	r2, r1, r2
 800cdec:	4610      	mov	r0, r2
 800cdee:	4798      	blx	r3
 800cdf0:	4603      	mov	r3, r0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	0800e8d4 	.word	0x0800e8d4

0800ce00 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ce08:	4b0a      	ldr	r3, [pc, #40]	; (800ce34 <TimerExists+0x34>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800ce0e:	e008      	b.n	800ce22 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800ce10:	68fa      	ldr	r2, [r7, #12]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d101      	bne.n	800ce1c <TimerExists+0x1c>
    {
      return true;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	e006      	b.n	800ce2a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	695b      	ldr	r3, [r3, #20]
 800ce20:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1f3      	bne.n	800ce10 <TimerExists+0x10>
  }
  return false;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3714      	adds	r7, #20
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bc80      	pop	{r7}
 800ce32:	4770      	bx	lr
 800ce34:	20000568 	.word	0x20000568

0800ce38 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800ce38:	b590      	push	{r4, r7, lr}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800ce40:	4b11      	ldr	r3, [pc, #68]	; (800ce88 <TimerSetTimeout+0x50>)
 800ce42:	6a1b      	ldr	r3, [r3, #32]
 800ce44:	4798      	blx	r3
 800ce46:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681c      	ldr	r4, [r3, #0]
 800ce52:	4b0d      	ldr	r3, [pc, #52]	; (800ce88 <TimerSetTimeout+0x50>)
 800ce54:	699b      	ldr	r3, [r3, #24]
 800ce56:	4798      	blx	r3
 800ce58:	4602      	mov	r2, r0
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	429c      	cmp	r4, r3
 800ce60:	d207      	bcs.n	800ce72 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800ce62:	4b09      	ldr	r3, [pc, #36]	; (800ce88 <TimerSetTimeout+0x50>)
 800ce64:	699b      	ldr	r3, [r3, #24]
 800ce66:	4798      	blx	r3
 800ce68:	4602      	mov	r2, r0
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	441a      	add	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800ce72:	4b05      	ldr	r3, [pc, #20]	; (800ce88 <TimerSetTimeout+0x50>)
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	6812      	ldr	r2, [r2, #0]
 800ce7a:	4610      	mov	r0, r2
 800ce7c:	4798      	blx	r3
}
 800ce7e:	bf00      	nop
 800ce80:	3714      	adds	r7, #20
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd90      	pop	{r4, r7, pc}
 800ce86:	bf00      	nop
 800ce88:	0800e8d4 	.word	0x0800e8d4

0800ce8c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b085      	sub	sp, #20
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ce94:	4b14      	ldr	r3, [pc, #80]	; (800cee8 <TimerInsertTimer+0x5c>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800ce9a:	4b13      	ldr	r3, [pc, #76]	; (800cee8 <TimerInsertTimer+0x5c>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	695b      	ldr	r3, [r3, #20]
 800cea0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800cea2:	e012      	b.n	800ceca <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d905      	bls.n	800cebc <TimerInsertTimer+0x30>
    {
        cur = next;
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	695b      	ldr	r3, [r3, #20]
 800ceb8:	60bb      	str	r3, [r7, #8]
 800ceba:	e006      	b.n	800ceca <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	615a      	str	r2, [r3, #20]
        return;
 800cec8:	e009      	b.n	800cede <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	695b      	ldr	r3, [r3, #20]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d1e8      	bne.n	800cea4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	615a      	str	r2, [r3, #20]
}
 800cede:	3714      	adds	r7, #20
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bc80      	pop	{r7}
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop
 800cee8:	20000568 	.word	0x20000568

0800ceec <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800cef4:	4b0b      	ldr	r3, [pc, #44]	; (800cf24 <TimerInsertNewHeadTimer+0x38>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d002      	beq.n	800cf06 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2200      	movs	r2, #0
 800cf04:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800cf0c:	4a05      	ldr	r2, [pc, #20]	; (800cf24 <TimerInsertNewHeadTimer+0x38>)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800cf12:	4b04      	ldr	r3, [pc, #16]	; (800cf24 <TimerInsertNewHeadTimer+0x38>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7ff ff8e 	bl	800ce38 <TimerSetTimeout>
}
 800cf1c:	bf00      	nop
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	20000568 	.word	0x20000568

0800cf28 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800cf2c:	2218      	movs	r2, #24
 800cf2e:	2100      	movs	r1, #0
 800cf30:	4807      	ldr	r0, [pc, #28]	; (800cf50 <UTIL_ADV_TRACE_Init+0x28>)
 800cf32:	f7ff f8fd 	bl	800c130 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800cf36:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	4805      	ldr	r0, [pc, #20]	; (800cf54 <UTIL_ADV_TRACE_Init+0x2c>)
 800cf3e:	f7ff f8f7 	bl	800c130 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800cf42:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <UTIL_ADV_TRACE_Init+0x30>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4805      	ldr	r0, [pc, #20]	; (800cf5c <UTIL_ADV_TRACE_Init+0x34>)
 800cf48:	4798      	blx	r3
 800cf4a:	4603      	mov	r3, r0
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	2000056c 	.word	0x2000056c
 800cf54:	20000584 	.word	0x20000584
 800cf58:	0800e80c 	.word	0x0800e80c
 800cf5c:	0800d1a5 	.word	0x0800d1a5

0800cf60 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800cf60:	b408      	push	{r3}
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b08d      	sub	sp, #52	; 0x34
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	60f8      	str	r0, [r7, #12]
 800cf6a:	60b9      	str	r1, [r7, #8]
 800cf6c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800cf72:	2300      	movs	r3, #0
 800cf74:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800cf76:	4b37      	ldr	r3, [pc, #220]	; (800d054 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800cf78:	7a1b      	ldrb	r3, [r3, #8]
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d902      	bls.n	800cf88 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800cf82:	f06f 0304 	mvn.w	r3, #4
 800cf86:	e05e      	b.n	800d046 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800cf88:	4b32      	ldr	r3, [pc, #200]	; (800d054 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800cf8a:	68da      	ldr	r2, [r3, #12]
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	4013      	ands	r3, r2
 800cf90:	68ba      	ldr	r2, [r7, #8]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d002      	beq.n	800cf9c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800cf96:	f06f 0305 	mvn.w	r3, #5
 800cf9a:	e054      	b.n	800d046 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800cf9c:	4b2d      	ldr	r3, [pc, #180]	; (800d054 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00a      	beq.n	800cfba <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d007      	beq.n	800cfba <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800cfaa:	4b2a      	ldr	r3, [pc, #168]	; (800d054 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	f107 0116 	add.w	r1, r7, #22
 800cfb2:	f107 0218 	add.w	r2, r7, #24
 800cfb6:	4610      	mov	r0, r2
 800cfb8:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800cfba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cfbe:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800cfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cfc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cfc8:	4823      	ldr	r0, [pc, #140]	; (800d058 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800cfca:	f7ff fa51 	bl	800c470 <tiny_vsnprintf_like>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 800cfd2:	f000 f9f1 	bl	800d3b8 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800cfd6:	8afa      	ldrh	r2, [r7, #22]
 800cfd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cfda:	4413      	add	r3, r2
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	f107 0214 	add.w	r2, r7, #20
 800cfe2:	4611      	mov	r1, r2
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f000 f969 	bl	800d2bc <TRACE_AllocateBufer>
 800cfea:	4603      	mov	r3, r0
 800cfec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff0:	d025      	beq.n	800d03e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800cff2:	2300      	movs	r3, #0
 800cff4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cff6:	e00e      	b.n	800d016 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cff8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cffa:	8aba      	ldrh	r2, [r7, #20]
 800cffc:	3330      	adds	r3, #48	; 0x30
 800cffe:	443b      	add	r3, r7
 800d000:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800d004:	4b15      	ldr	r3, [pc, #84]	; (800d05c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800d006:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800d008:	8abb      	ldrh	r3, [r7, #20]
 800d00a:	3301      	adds	r3, #1
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800d010:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d012:	3301      	adds	r3, #1
 800d014:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d016:	8afb      	ldrh	r3, [r7, #22]
 800d018:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d3ec      	bcc.n	800cff8 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800d01e:	8abb      	ldrh	r3, [r7, #20]
 800d020:	461a      	mov	r2, r3
 800d022:	4b0e      	ldr	r3, [pc, #56]	; (800d05c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800d024:	18d0      	adds	r0, r2, r3
 800d026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d02a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d02e:	f7ff fa1f 	bl	800c470 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800d032:	f000 f9df 	bl	800d3f4 <TRACE_UnLock>

    return TRACE_Send();
 800d036:	f000 f831 	bl	800d09c <TRACE_Send>
 800d03a:	4603      	mov	r3, r0
 800d03c:	e003      	b.n	800d046 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800d03e:	f000 f9d9 	bl	800d3f4 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800d042:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800d046:	4618      	mov	r0, r3
 800d048:	3734      	adds	r7, #52	; 0x34
 800d04a:	46bd      	mov	sp, r7
 800d04c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d050:	b001      	add	sp, #4
 800d052:	4770      	bx	lr
 800d054:	2000056c 	.word	0x2000056c
 800d058:	20000784 	.word	0x20000784
 800d05c:	20000584 	.word	0x20000584

0800d060 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800d068:	4a03      	ldr	r2, [pc, #12]	; (800d078 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6053      	str	r3, [r2, #4]
}
 800d06e:	bf00      	nop
 800d070:	370c      	adds	r7, #12
 800d072:	46bd      	mov	sp, r7
 800d074:	bc80      	pop	{r7}
 800d076:	4770      	bx	lr
 800d078:	2000056c 	.word	0x2000056c

0800d07c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	4603      	mov	r3, r0
 800d084:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800d086:	4a04      	ldr	r2, [pc, #16]	; (800d098 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800d088:	79fb      	ldrb	r3, [r7, #7]
 800d08a:	7213      	strb	r3, [r2, #8]
}
 800d08c:	bf00      	nop
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	bc80      	pop	{r7}
 800d094:	4770      	bx	lr
 800d096:	bf00      	nop
 800d098:	2000056c 	.word	0x2000056c

0800d09c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b088      	sub	sp, #32
 800d0a0:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0aa:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ae:	613b      	str	r3, [r7, #16]
  return(result);
 800d0b0:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800d0b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d0b4:	b672      	cpsid	i
}
 800d0b6:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800d0b8:	f000 f9ba 	bl	800d430 <TRACE_IsLocked>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d15d      	bne.n	800d17e <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800d0c2:	f000 f979 	bl	800d3b8 <TRACE_Lock>
	    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send overrun(%d)--\n", ADV_TRACE_Ctx.TraceSentSize);
	    return UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
	}
#endif

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800d0c6:	4b34      	ldr	r3, [pc, #208]	; (800d198 <TRACE_Send+0xfc>)
 800d0c8:	8a1a      	ldrh	r2, [r3, #16]
 800d0ca:	4b33      	ldr	r3, [pc, #204]	; (800d198 <TRACE_Send+0xfc>)
 800d0cc:	8a5b      	ldrh	r3, [r3, #18]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d04d      	beq.n	800d16e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800d0d2:	4b31      	ldr	r3, [pc, #196]	; (800d198 <TRACE_Send+0xfc>)
 800d0d4:	789b      	ldrb	r3, [r3, #2]
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d117      	bne.n	800d10a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800d0da:	4b2f      	ldr	r3, [pc, #188]	; (800d198 <TRACE_Send+0xfc>)
 800d0dc:	881a      	ldrh	r2, [r3, #0]
 800d0de:	4b2e      	ldr	r3, [pc, #184]	; (800d198 <TRACE_Send+0xfc>)
 800d0e0:	8a1b      	ldrh	r3, [r3, #16]
 800d0e2:	1ad3      	subs	r3, r2, r3
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	4b2c      	ldr	r3, [pc, #176]	; (800d198 <TRACE_Send+0xfc>)
 800d0e8:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800d0ea:	4b2b      	ldr	r3, [pc, #172]	; (800d198 <TRACE_Send+0xfc>)
 800d0ec:	2202      	movs	r2, #2
 800d0ee:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800d0f0:	4b29      	ldr	r3, [pc, #164]	; (800d198 <TRACE_Send+0xfc>)
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800d0f6:	4b28      	ldr	r3, [pc, #160]	; (800d198 <TRACE_Send+0xfc>)
 800d0f8:	8a9b      	ldrh	r3, [r3, #20]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d105      	bne.n	800d10a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800d0fe:	4b26      	ldr	r3, [pc, #152]	; (800d198 <TRACE_Send+0xfc>)
 800d100:	2200      	movs	r2, #0
 800d102:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800d104:	4b24      	ldr	r3, [pc, #144]	; (800d198 <TRACE_Send+0xfc>)
 800d106:	2200      	movs	r2, #0
 800d108:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800d10a:	4b23      	ldr	r3, [pc, #140]	; (800d198 <TRACE_Send+0xfc>)
 800d10c:	789b      	ldrb	r3, [r3, #2]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d115      	bne.n	800d13e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800d112:	4b21      	ldr	r3, [pc, #132]	; (800d198 <TRACE_Send+0xfc>)
 800d114:	8a5a      	ldrh	r2, [r3, #18]
 800d116:	4b20      	ldr	r3, [pc, #128]	; (800d198 <TRACE_Send+0xfc>)
 800d118:	8a1b      	ldrh	r3, [r3, #16]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d908      	bls.n	800d130 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800d11e:	4b1e      	ldr	r3, [pc, #120]	; (800d198 <TRACE_Send+0xfc>)
 800d120:	8a5a      	ldrh	r2, [r3, #18]
 800d122:	4b1d      	ldr	r3, [pc, #116]	; (800d198 <TRACE_Send+0xfc>)
 800d124:	8a1b      	ldrh	r3, [r3, #16]
 800d126:	1ad3      	subs	r3, r2, r3
 800d128:	b29a      	uxth	r2, r3
 800d12a:	4b1b      	ldr	r3, [pc, #108]	; (800d198 <TRACE_Send+0xfc>)
 800d12c:	829a      	strh	r2, [r3, #20]
 800d12e:	e006      	b.n	800d13e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800d130:	4b19      	ldr	r3, [pc, #100]	; (800d198 <TRACE_Send+0xfc>)
 800d132:	8a1b      	ldrh	r3, [r3, #16]
 800d134:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d138:	b29a      	uxth	r2, r3
 800d13a:	4b17      	ldr	r3, [pc, #92]	; (800d198 <TRACE_Send+0xfc>)
 800d13c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800d13e:	4b16      	ldr	r3, [pc, #88]	; (800d198 <TRACE_Send+0xfc>)
 800d140:	8a1b      	ldrh	r3, [r3, #16]
 800d142:	461a      	mov	r2, r3
 800d144:	4b15      	ldr	r3, [pc, #84]	; (800d19c <TRACE_Send+0x100>)
 800d146:	4413      	add	r3, r2
 800d148:	61bb      	str	r3, [r7, #24]
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f383 8810 	msr	PRIMASK, r3
}
 800d154:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800d156:	f7f4 fcd9 	bl	8001b0c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800d15a:	4b11      	ldr	r3, [pc, #68]	; (800d1a0 <TRACE_Send+0x104>)
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	4a0e      	ldr	r2, [pc, #56]	; (800d198 <TRACE_Send+0xfc>)
 800d160:	8a92      	ldrh	r2, [r2, #20]
 800d162:	4611      	mov	r1, r2
 800d164:	69b8      	ldr	r0, [r7, #24]
 800d166:	4798      	blx	r3
 800d168:	4603      	mov	r3, r0
 800d16a:	77fb      	strb	r3, [r7, #31]
 800d16c:	e00d      	b.n	800d18a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800d16e:	f000 f941 	bl	800d3f4 <TRACE_UnLock>
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	f383 8810 	msr	PRIMASK, r3
}
 800d17c:	e005      	b.n	800d18a <TRACE_Send+0xee>
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f383 8810 	msr	PRIMASK, r3
}
 800d188:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800d18a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3720      	adds	r7, #32
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	2000056c 	.word	0x2000056c
 800d19c:	20000584 	.word	0x20000584
 800d1a0:	0800e80c 	.word	0x0800e80c

0800d1a4 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b088      	sub	sp, #32
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1b0:	f3ef 8310 	mrs	r3, PRIMASK
 800d1b4:	617b      	str	r3, [r7, #20]
  return(result);
 800d1b6:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800d1b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800d1ba:	b672      	cpsid	i
}
 800d1bc:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800d1be:	4b3c      	ldr	r3, [pc, #240]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d1c0:	789b      	ldrb	r3, [r3, #2]
 800d1c2:	2b02      	cmp	r3, #2
 800d1c4:	d106      	bne.n	800d1d4 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800d1c6:	4b3a      	ldr	r3, [pc, #232]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800d1cc:	4b38      	ldr	r3, [pc, #224]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	821a      	strh	r2, [r3, #16]
 800d1d2:	e00a      	b.n	800d1ea <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800d1d4:	4b36      	ldr	r3, [pc, #216]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d1d6:	8a1a      	ldrh	r2, [r3, #16]
 800d1d8:	4b35      	ldr	r3, [pc, #212]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d1da:	8a9b      	ldrh	r3, [r3, #20]
 800d1dc:	4413      	add	r3, r2
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	4b32      	ldr	r3, [pc, #200]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d1e8:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800d1ea:	4b31      	ldr	r3, [pc, #196]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d1ec:	8a1a      	ldrh	r2, [r3, #16]
 800d1ee:	4b30      	ldr	r3, [pc, #192]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d1f0:	8a5b      	ldrh	r3, [r3, #18]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d04d      	beq.n	800d292 <TRACE_TxCpltCallback+0xee>
 800d1f6:	4b2e      	ldr	r3, [pc, #184]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d1f8:	8adb      	ldrh	r3, [r3, #22]
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d149      	bne.n	800d292 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800d1fe:	4b2c      	ldr	r3, [pc, #176]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d200:	789b      	ldrb	r3, [r3, #2]
 800d202:	2b01      	cmp	r3, #1
 800d204:	d117      	bne.n	800d236 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800d206:	4b2a      	ldr	r3, [pc, #168]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d208:	881a      	ldrh	r2, [r3, #0]
 800d20a:	4b29      	ldr	r3, [pc, #164]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d20c:	8a1b      	ldrh	r3, [r3, #16]
 800d20e:	1ad3      	subs	r3, r2, r3
 800d210:	b29a      	uxth	r2, r3
 800d212:	4b27      	ldr	r3, [pc, #156]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d214:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800d216:	4b26      	ldr	r3, [pc, #152]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d218:	2202      	movs	r2, #2
 800d21a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800d21c:	4b24      	ldr	r3, [pc, #144]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d21e:	2200      	movs	r2, #0
 800d220:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800d222:	4b23      	ldr	r3, [pc, #140]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d224:	8a9b      	ldrh	r3, [r3, #20]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d105      	bne.n	800d236 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800d22a:	4b21      	ldr	r3, [pc, #132]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d22c:	2200      	movs	r2, #0
 800d22e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800d230:	4b1f      	ldr	r3, [pc, #124]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d232:	2200      	movs	r2, #0
 800d234:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800d236:	4b1e      	ldr	r3, [pc, #120]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d238:	789b      	ldrb	r3, [r3, #2]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d115      	bne.n	800d26a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800d23e:	4b1c      	ldr	r3, [pc, #112]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d240:	8a5a      	ldrh	r2, [r3, #18]
 800d242:	4b1b      	ldr	r3, [pc, #108]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d244:	8a1b      	ldrh	r3, [r3, #16]
 800d246:	429a      	cmp	r2, r3
 800d248:	d908      	bls.n	800d25c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800d24a:	4b19      	ldr	r3, [pc, #100]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d24c:	8a5a      	ldrh	r2, [r3, #18]
 800d24e:	4b18      	ldr	r3, [pc, #96]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d250:	8a1b      	ldrh	r3, [r3, #16]
 800d252:	1ad3      	subs	r3, r2, r3
 800d254:	b29a      	uxth	r2, r3
 800d256:	4b16      	ldr	r3, [pc, #88]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d258:	829a      	strh	r2, [r3, #20]
 800d25a:	e006      	b.n	800d26a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800d25c:	4b14      	ldr	r3, [pc, #80]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d25e:	8a1b      	ldrh	r3, [r3, #16]
 800d260:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d264:	b29a      	uxth	r2, r3
 800d266:	4b12      	ldr	r3, [pc, #72]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d268:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800d26a:	4b11      	ldr	r3, [pc, #68]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d26c:	8a1b      	ldrh	r3, [r3, #16]
 800d26e:	461a      	mov	r2, r3
 800d270:	4b10      	ldr	r3, [pc, #64]	; (800d2b4 <TRACE_TxCpltCallback+0x110>)
 800d272:	4413      	add	r3, r2
 800d274:	61fb      	str	r3, [r7, #28]
 800d276:	69bb      	ldr	r3, [r7, #24]
 800d278:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	f383 8810 	msr	PRIMASK, r3
}
 800d280:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800d282:	4b0d      	ldr	r3, [pc, #52]	; (800d2b8 <TRACE_TxCpltCallback+0x114>)
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	4a0a      	ldr	r2, [pc, #40]	; (800d2b0 <TRACE_TxCpltCallback+0x10c>)
 800d288:	8a92      	ldrh	r2, [r2, #20]
 800d28a:	4611      	mov	r1, r2
 800d28c:	69f8      	ldr	r0, [r7, #28]
 800d28e:	4798      	blx	r3
 800d290:	e00a      	b.n	800d2a8 <TRACE_TxCpltCallback+0x104>
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f383 8810 	msr	PRIMASK, r3
}
 800d29c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800d29e:	f7f4 fc3d 	bl	8001b1c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800d2a2:	f000 f8a7 	bl	800d3f4 <TRACE_UnLock>
  }
}
 800d2a6:	bf00      	nop
 800d2a8:	bf00      	nop
 800d2aa:	3720      	adds	r7, #32
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	2000056c 	.word	0x2000056c
 800d2b4:	20000584 	.word	0x20000584
 800d2b8:	0800e80c 	.word	0x0800e80c

0800d2bc <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b087      	sub	sp, #28
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	6039      	str	r1, [r7, #0]
 800d2c6:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800d2c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2cc:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2ce:	f3ef 8310 	mrs	r3, PRIMASK
 800d2d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800d2d4:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800d2d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d2d8:	b672      	cpsid	i
}
 800d2da:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800d2dc:	4b35      	ldr	r3, [pc, #212]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d2de:	8a5a      	ldrh	r2, [r3, #18]
 800d2e0:	4b34      	ldr	r3, [pc, #208]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d2e2:	8a1b      	ldrh	r3, [r3, #16]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d11b      	bne.n	800d320 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800d2e8:	4b32      	ldr	r3, [pc, #200]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d2ea:	8a5b      	ldrh	r3, [r3, #18]
 800d2ec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d2f0:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800d2f2:	88fa      	ldrh	r2, [r7, #6]
 800d2f4:	8afb      	ldrh	r3, [r7, #22]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d33a      	bcc.n	800d370 <TRACE_AllocateBufer+0xb4>
 800d2fa:	4b2e      	ldr	r3, [pc, #184]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d2fc:	8a1b      	ldrh	r3, [r3, #16]
 800d2fe:	88fa      	ldrh	r2, [r7, #6]
 800d300:	429a      	cmp	r2, r3
 800d302:	d235      	bcs.n	800d370 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800d304:	4b2b      	ldr	r3, [pc, #172]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d306:	2201      	movs	r2, #1
 800d308:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800d30a:	4b2a      	ldr	r3, [pc, #168]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d30c:	8a5a      	ldrh	r2, [r3, #18]
 800d30e:	4b29      	ldr	r3, [pc, #164]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d310:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800d312:	4b28      	ldr	r3, [pc, #160]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d314:	8a1b      	ldrh	r3, [r3, #16]
 800d316:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800d318:	4b26      	ldr	r3, [pc, #152]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d31a:	2200      	movs	r2, #0
 800d31c:	825a      	strh	r2, [r3, #18]
 800d31e:	e027      	b.n	800d370 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800d320:	4b24      	ldr	r3, [pc, #144]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d322:	8a5a      	ldrh	r2, [r3, #18]
 800d324:	4b23      	ldr	r3, [pc, #140]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d326:	8a1b      	ldrh	r3, [r3, #16]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d91b      	bls.n	800d364 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800d32c:	4b21      	ldr	r3, [pc, #132]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d32e:	8a5b      	ldrh	r3, [r3, #18]
 800d330:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d334:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800d336:	88fa      	ldrh	r2, [r7, #6]
 800d338:	8afb      	ldrh	r3, [r7, #22]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d318      	bcc.n	800d370 <TRACE_AllocateBufer+0xb4>
 800d33e:	4b1d      	ldr	r3, [pc, #116]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d340:	8a1b      	ldrh	r3, [r3, #16]
 800d342:	88fa      	ldrh	r2, [r7, #6]
 800d344:	429a      	cmp	r2, r3
 800d346:	d213      	bcs.n	800d370 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800d348:	4b1a      	ldr	r3, [pc, #104]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d34a:	2201      	movs	r2, #1
 800d34c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800d34e:	4b19      	ldr	r3, [pc, #100]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d350:	8a5a      	ldrh	r2, [r3, #18]
 800d352:	4b18      	ldr	r3, [pc, #96]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d354:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800d356:	4b17      	ldr	r3, [pc, #92]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d358:	8a1b      	ldrh	r3, [r3, #16]
 800d35a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800d35c:	4b15      	ldr	r3, [pc, #84]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d35e:	2200      	movs	r2, #0
 800d360:	825a      	strh	r2, [r3, #18]
 800d362:	e005      	b.n	800d370 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800d364:	4b13      	ldr	r3, [pc, #76]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d366:	8a1a      	ldrh	r2, [r3, #16]
 800d368:	4b12      	ldr	r3, [pc, #72]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d36a:	8a5b      	ldrh	r3, [r3, #18]
 800d36c:	1ad3      	subs	r3, r2, r3
 800d36e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800d370:	8afa      	ldrh	r2, [r7, #22]
 800d372:	88fb      	ldrh	r3, [r7, #6]
 800d374:	429a      	cmp	r2, r3
 800d376:	d90f      	bls.n	800d398 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800d378:	4b0e      	ldr	r3, [pc, #56]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d37a:	8a5a      	ldrh	r2, [r3, #18]
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800d380:	4b0c      	ldr	r3, [pc, #48]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d382:	8a5a      	ldrh	r2, [r3, #18]
 800d384:	88fb      	ldrh	r3, [r7, #6]
 800d386:	4413      	add	r3, r2
 800d388:	b29b      	uxth	r3, r3
 800d38a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d38e:	b29a      	uxth	r2, r3
 800d390:	4b08      	ldr	r3, [pc, #32]	; (800d3b4 <TRACE_AllocateBufer+0xf8>)
 800d392:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800d394:	2300      	movs	r3, #0
 800d396:	82bb      	strh	r3, [r7, #20]
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	f383 8810 	msr	PRIMASK, r3
}
 800d3a2:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800d3a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	371c      	adds	r7, #28
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bc80      	pop	{r7}
 800d3b0:	4770      	bx	lr
 800d3b2:	bf00      	nop
 800d3b4:	2000056c 	.word	0x2000056c

0800d3b8 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b085      	sub	sp, #20
 800d3bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3be:	f3ef 8310 	mrs	r3, PRIMASK
 800d3c2:	607b      	str	r3, [r7, #4]
  return(result);
 800d3c4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800d3c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800d3c8:	b672      	cpsid	i
}
 800d3ca:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800d3cc:	4b08      	ldr	r3, [pc, #32]	; (800d3f0 <TRACE_Lock+0x38>)
 800d3ce:	8adb      	ldrh	r3, [r3, #22]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	4b06      	ldr	r3, [pc, #24]	; (800d3f0 <TRACE_Lock+0x38>)
 800d3d6:	82da      	strh	r2, [r3, #22]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	f383 8810 	msr	PRIMASK, r3
}
 800d3e2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800d3e4:	bf00      	nop
 800d3e6:	3714      	adds	r7, #20
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bc80      	pop	{r7}
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	2000056c 	.word	0x2000056c

0800d3f4 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3fa:	f3ef 8310 	mrs	r3, PRIMASK
 800d3fe:	607b      	str	r3, [r7, #4]
  return(result);
 800d400:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800d402:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800d404:	b672      	cpsid	i
}
 800d406:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800d408:	4b08      	ldr	r3, [pc, #32]	; (800d42c <TRACE_UnLock+0x38>)
 800d40a:	8adb      	ldrh	r3, [r3, #22]
 800d40c:	3b01      	subs	r3, #1
 800d40e:	b29a      	uxth	r2, r3
 800d410:	4b06      	ldr	r3, [pc, #24]	; (800d42c <TRACE_UnLock+0x38>)
 800d412:	82da      	strh	r2, [r3, #22]
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	f383 8810 	msr	PRIMASK, r3
}
 800d41e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800d420:	bf00      	nop
 800d422:	3714      	adds	r7, #20
 800d424:	46bd      	mov	sp, r7
 800d426:	bc80      	pop	{r7}
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop
 800d42c:	2000056c 	.word	0x2000056c

0800d430 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800d430:	b480      	push	{r7}
 800d432:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800d434:	4b05      	ldr	r3, [pc, #20]	; (800d44c <TRACE_IsLocked+0x1c>)
 800d436:	8adb      	ldrh	r3, [r3, #22]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	bf14      	ite	ne
 800d43c:	2301      	movne	r3, #1
 800d43e:	2300      	moveq	r3, #0
 800d440:	b2db      	uxtb	r3, r3
}
 800d442:	4618      	mov	r0, r3
 800d444:	46bd      	mov	sp, r7
 800d446:	bc80      	pop	{r7}
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	2000056c 	.word	0x2000056c

0800d450 <__errno>:
 800d450:	4b01      	ldr	r3, [pc, #4]	; (800d458 <__errno+0x8>)
 800d452:	6818      	ldr	r0, [r3, #0]
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop
 800d458:	2000002c 	.word	0x2000002c

0800d45c <__libc_init_array>:
 800d45c:	b570      	push	{r4, r5, r6, lr}
 800d45e:	4d0d      	ldr	r5, [pc, #52]	; (800d494 <__libc_init_array+0x38>)
 800d460:	4c0d      	ldr	r4, [pc, #52]	; (800d498 <__libc_init_array+0x3c>)
 800d462:	1b64      	subs	r4, r4, r5
 800d464:	10a4      	asrs	r4, r4, #2
 800d466:	2600      	movs	r6, #0
 800d468:	42a6      	cmp	r6, r4
 800d46a:	d109      	bne.n	800d480 <__libc_init_array+0x24>
 800d46c:	4d0b      	ldr	r5, [pc, #44]	; (800d49c <__libc_init_array+0x40>)
 800d46e:	4c0c      	ldr	r4, [pc, #48]	; (800d4a0 <__libc_init_array+0x44>)
 800d470:	f001 f88c 	bl	800e58c <_init>
 800d474:	1b64      	subs	r4, r4, r5
 800d476:	10a4      	asrs	r4, r4, #2
 800d478:	2600      	movs	r6, #0
 800d47a:	42a6      	cmp	r6, r4
 800d47c:	d105      	bne.n	800d48a <__libc_init_array+0x2e>
 800d47e:	bd70      	pop	{r4, r5, r6, pc}
 800d480:	f855 3b04 	ldr.w	r3, [r5], #4
 800d484:	4798      	blx	r3
 800d486:	3601      	adds	r6, #1
 800d488:	e7ee      	b.n	800d468 <__libc_init_array+0xc>
 800d48a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d48e:	4798      	blx	r3
 800d490:	3601      	adds	r6, #1
 800d492:	e7f2      	b.n	800d47a <__libc_init_array+0x1e>
 800d494:	0800ebdc 	.word	0x0800ebdc
 800d498:	0800ebdc 	.word	0x0800ebdc
 800d49c:	0800ebdc 	.word	0x0800ebdc
 800d4a0:	0800ebe0 	.word	0x0800ebe0

0800d4a4 <memcpy>:
 800d4a4:	440a      	add	r2, r1
 800d4a6:	4291      	cmp	r1, r2
 800d4a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4ac:	d100      	bne.n	800d4b0 <memcpy+0xc>
 800d4ae:	4770      	bx	lr
 800d4b0:	b510      	push	{r4, lr}
 800d4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4ba:	4291      	cmp	r1, r2
 800d4bc:	d1f9      	bne.n	800d4b2 <memcpy+0xe>
 800d4be:	bd10      	pop	{r4, pc}

0800d4c0 <memset>:
 800d4c0:	4402      	add	r2, r0
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d100      	bne.n	800d4ca <memset+0xa>
 800d4c8:	4770      	bx	lr
 800d4ca:	f803 1b01 	strb.w	r1, [r3], #1
 800d4ce:	e7f9      	b.n	800d4c4 <memset+0x4>

0800d4d0 <srand>:
 800d4d0:	b538      	push	{r3, r4, r5, lr}
 800d4d2:	4b10      	ldr	r3, [pc, #64]	; (800d514 <srand+0x44>)
 800d4d4:	681d      	ldr	r5, [r3, #0]
 800d4d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d4d8:	4604      	mov	r4, r0
 800d4da:	b9b3      	cbnz	r3, 800d50a <srand+0x3a>
 800d4dc:	2018      	movs	r0, #24
 800d4de:	f000 f893 	bl	800d608 <malloc>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	63a8      	str	r0, [r5, #56]	; 0x38
 800d4e6:	b920      	cbnz	r0, 800d4f2 <srand+0x22>
 800d4e8:	4b0b      	ldr	r3, [pc, #44]	; (800d518 <srand+0x48>)
 800d4ea:	480c      	ldr	r0, [pc, #48]	; (800d51c <srand+0x4c>)
 800d4ec:	2142      	movs	r1, #66	; 0x42
 800d4ee:	f000 f85b 	bl	800d5a8 <__assert_func>
 800d4f2:	490b      	ldr	r1, [pc, #44]	; (800d520 <srand+0x50>)
 800d4f4:	4b0b      	ldr	r3, [pc, #44]	; (800d524 <srand+0x54>)
 800d4f6:	e9c0 1300 	strd	r1, r3, [r0]
 800d4fa:	4b0b      	ldr	r3, [pc, #44]	; (800d528 <srand+0x58>)
 800d4fc:	6083      	str	r3, [r0, #8]
 800d4fe:	230b      	movs	r3, #11
 800d500:	8183      	strh	r3, [r0, #12]
 800d502:	2100      	movs	r1, #0
 800d504:	2001      	movs	r0, #1
 800d506:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d50a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d50c:	2200      	movs	r2, #0
 800d50e:	611c      	str	r4, [r3, #16]
 800d510:	615a      	str	r2, [r3, #20]
 800d512:	bd38      	pop	{r3, r4, r5, pc}
 800d514:	2000002c 	.word	0x2000002c
 800d518:	0800ea90 	.word	0x0800ea90
 800d51c:	0800eaa7 	.word	0x0800eaa7
 800d520:	abcd330e 	.word	0xabcd330e
 800d524:	e66d1234 	.word	0xe66d1234
 800d528:	0005deec 	.word	0x0005deec

0800d52c <rand>:
 800d52c:	4b16      	ldr	r3, [pc, #88]	; (800d588 <rand+0x5c>)
 800d52e:	b510      	push	{r4, lr}
 800d530:	681c      	ldr	r4, [r3, #0]
 800d532:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d534:	b9b3      	cbnz	r3, 800d564 <rand+0x38>
 800d536:	2018      	movs	r0, #24
 800d538:	f000 f866 	bl	800d608 <malloc>
 800d53c:	4602      	mov	r2, r0
 800d53e:	63a0      	str	r0, [r4, #56]	; 0x38
 800d540:	b920      	cbnz	r0, 800d54c <rand+0x20>
 800d542:	4b12      	ldr	r3, [pc, #72]	; (800d58c <rand+0x60>)
 800d544:	4812      	ldr	r0, [pc, #72]	; (800d590 <rand+0x64>)
 800d546:	214e      	movs	r1, #78	; 0x4e
 800d548:	f000 f82e 	bl	800d5a8 <__assert_func>
 800d54c:	4911      	ldr	r1, [pc, #68]	; (800d594 <rand+0x68>)
 800d54e:	4b12      	ldr	r3, [pc, #72]	; (800d598 <rand+0x6c>)
 800d550:	e9c0 1300 	strd	r1, r3, [r0]
 800d554:	4b11      	ldr	r3, [pc, #68]	; (800d59c <rand+0x70>)
 800d556:	6083      	str	r3, [r0, #8]
 800d558:	230b      	movs	r3, #11
 800d55a:	8183      	strh	r3, [r0, #12]
 800d55c:	2100      	movs	r1, #0
 800d55e:	2001      	movs	r0, #1
 800d560:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d564:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800d566:	4a0e      	ldr	r2, [pc, #56]	; (800d5a0 <rand+0x74>)
 800d568:	6920      	ldr	r0, [r4, #16]
 800d56a:	6963      	ldr	r3, [r4, #20]
 800d56c:	490d      	ldr	r1, [pc, #52]	; (800d5a4 <rand+0x78>)
 800d56e:	4342      	muls	r2, r0
 800d570:	fb01 2203 	mla	r2, r1, r3, r2
 800d574:	fba0 0101 	umull	r0, r1, r0, r1
 800d578:	1c43      	adds	r3, r0, #1
 800d57a:	eb42 0001 	adc.w	r0, r2, r1
 800d57e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800d582:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d586:	bd10      	pop	{r4, pc}
 800d588:	2000002c 	.word	0x2000002c
 800d58c:	0800ea90 	.word	0x0800ea90
 800d590:	0800eaa7 	.word	0x0800eaa7
 800d594:	abcd330e 	.word	0xabcd330e
 800d598:	e66d1234 	.word	0xe66d1234
 800d59c:	0005deec 	.word	0x0005deec
 800d5a0:	5851f42d 	.word	0x5851f42d
 800d5a4:	4c957f2d 	.word	0x4c957f2d

0800d5a8 <__assert_func>:
 800d5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5aa:	4614      	mov	r4, r2
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	4b09      	ldr	r3, [pc, #36]	; (800d5d4 <__assert_func+0x2c>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4605      	mov	r5, r0
 800d5b4:	68d8      	ldr	r0, [r3, #12]
 800d5b6:	b14c      	cbz	r4, 800d5cc <__assert_func+0x24>
 800d5b8:	4b07      	ldr	r3, [pc, #28]	; (800d5d8 <__assert_func+0x30>)
 800d5ba:	9100      	str	r1, [sp, #0]
 800d5bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5c0:	4906      	ldr	r1, [pc, #24]	; (800d5dc <__assert_func+0x34>)
 800d5c2:	462b      	mov	r3, r5
 800d5c4:	f000 f80e 	bl	800d5e4 <fiprintf>
 800d5c8:	f000 fcc0 	bl	800df4c <abort>
 800d5cc:	4b04      	ldr	r3, [pc, #16]	; (800d5e0 <__assert_func+0x38>)
 800d5ce:	461c      	mov	r4, r3
 800d5d0:	e7f3      	b.n	800d5ba <__assert_func+0x12>
 800d5d2:	bf00      	nop
 800d5d4:	2000002c 	.word	0x2000002c
 800d5d8:	0800eb02 	.word	0x0800eb02
 800d5dc:	0800eb0f 	.word	0x0800eb0f
 800d5e0:	0800eb3d 	.word	0x0800eb3d

0800d5e4 <fiprintf>:
 800d5e4:	b40e      	push	{r1, r2, r3}
 800d5e6:	b503      	push	{r0, r1, lr}
 800d5e8:	4601      	mov	r1, r0
 800d5ea:	ab03      	add	r3, sp, #12
 800d5ec:	4805      	ldr	r0, [pc, #20]	; (800d604 <fiprintf+0x20>)
 800d5ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5f2:	6800      	ldr	r0, [r0, #0]
 800d5f4:	9301      	str	r3, [sp, #4]
 800d5f6:	f000 f915 	bl	800d824 <_vfiprintf_r>
 800d5fa:	b002      	add	sp, #8
 800d5fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d600:	b003      	add	sp, #12
 800d602:	4770      	bx	lr
 800d604:	2000002c 	.word	0x2000002c

0800d608 <malloc>:
 800d608:	4b02      	ldr	r3, [pc, #8]	; (800d614 <malloc+0xc>)
 800d60a:	4601      	mov	r1, r0
 800d60c:	6818      	ldr	r0, [r3, #0]
 800d60e:	f000 b86d 	b.w	800d6ec <_malloc_r>
 800d612:	bf00      	nop
 800d614:	2000002c 	.word	0x2000002c

0800d618 <_free_r>:
 800d618:	b538      	push	{r3, r4, r5, lr}
 800d61a:	4605      	mov	r5, r0
 800d61c:	2900      	cmp	r1, #0
 800d61e:	d041      	beq.n	800d6a4 <_free_r+0x8c>
 800d620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d624:	1f0c      	subs	r4, r1, #4
 800d626:	2b00      	cmp	r3, #0
 800d628:	bfb8      	it	lt
 800d62a:	18e4      	addlt	r4, r4, r3
 800d62c:	f000 feb2 	bl	800e394 <__malloc_lock>
 800d630:	4a1d      	ldr	r2, [pc, #116]	; (800d6a8 <_free_r+0x90>)
 800d632:	6813      	ldr	r3, [r2, #0]
 800d634:	b933      	cbnz	r3, 800d644 <_free_r+0x2c>
 800d636:	6063      	str	r3, [r4, #4]
 800d638:	6014      	str	r4, [r2, #0]
 800d63a:	4628      	mov	r0, r5
 800d63c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d640:	f000 beae 	b.w	800e3a0 <__malloc_unlock>
 800d644:	42a3      	cmp	r3, r4
 800d646:	d908      	bls.n	800d65a <_free_r+0x42>
 800d648:	6820      	ldr	r0, [r4, #0]
 800d64a:	1821      	adds	r1, r4, r0
 800d64c:	428b      	cmp	r3, r1
 800d64e:	bf01      	itttt	eq
 800d650:	6819      	ldreq	r1, [r3, #0]
 800d652:	685b      	ldreq	r3, [r3, #4]
 800d654:	1809      	addeq	r1, r1, r0
 800d656:	6021      	streq	r1, [r4, #0]
 800d658:	e7ed      	b.n	800d636 <_free_r+0x1e>
 800d65a:	461a      	mov	r2, r3
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	b10b      	cbz	r3, 800d664 <_free_r+0x4c>
 800d660:	42a3      	cmp	r3, r4
 800d662:	d9fa      	bls.n	800d65a <_free_r+0x42>
 800d664:	6811      	ldr	r1, [r2, #0]
 800d666:	1850      	adds	r0, r2, r1
 800d668:	42a0      	cmp	r0, r4
 800d66a:	d10b      	bne.n	800d684 <_free_r+0x6c>
 800d66c:	6820      	ldr	r0, [r4, #0]
 800d66e:	4401      	add	r1, r0
 800d670:	1850      	adds	r0, r2, r1
 800d672:	4283      	cmp	r3, r0
 800d674:	6011      	str	r1, [r2, #0]
 800d676:	d1e0      	bne.n	800d63a <_free_r+0x22>
 800d678:	6818      	ldr	r0, [r3, #0]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	6053      	str	r3, [r2, #4]
 800d67e:	4401      	add	r1, r0
 800d680:	6011      	str	r1, [r2, #0]
 800d682:	e7da      	b.n	800d63a <_free_r+0x22>
 800d684:	d902      	bls.n	800d68c <_free_r+0x74>
 800d686:	230c      	movs	r3, #12
 800d688:	602b      	str	r3, [r5, #0]
 800d68a:	e7d6      	b.n	800d63a <_free_r+0x22>
 800d68c:	6820      	ldr	r0, [r4, #0]
 800d68e:	1821      	adds	r1, r4, r0
 800d690:	428b      	cmp	r3, r1
 800d692:	bf04      	itt	eq
 800d694:	6819      	ldreq	r1, [r3, #0]
 800d696:	685b      	ldreq	r3, [r3, #4]
 800d698:	6063      	str	r3, [r4, #4]
 800d69a:	bf04      	itt	eq
 800d69c:	1809      	addeq	r1, r1, r0
 800d69e:	6021      	streq	r1, [r4, #0]
 800d6a0:	6054      	str	r4, [r2, #4]
 800d6a2:	e7ca      	b.n	800d63a <_free_r+0x22>
 800d6a4:	bd38      	pop	{r3, r4, r5, pc}
 800d6a6:	bf00      	nop
 800d6a8:	20000884 	.word	0x20000884

0800d6ac <sbrk_aligned>:
 800d6ac:	b570      	push	{r4, r5, r6, lr}
 800d6ae:	4e0e      	ldr	r6, [pc, #56]	; (800d6e8 <sbrk_aligned+0x3c>)
 800d6b0:	460c      	mov	r4, r1
 800d6b2:	6831      	ldr	r1, [r6, #0]
 800d6b4:	4605      	mov	r5, r0
 800d6b6:	b911      	cbnz	r1, 800d6be <sbrk_aligned+0x12>
 800d6b8:	f000 fb78 	bl	800ddac <_sbrk_r>
 800d6bc:	6030      	str	r0, [r6, #0]
 800d6be:	4621      	mov	r1, r4
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	f000 fb73 	bl	800ddac <_sbrk_r>
 800d6c6:	1c43      	adds	r3, r0, #1
 800d6c8:	d00a      	beq.n	800d6e0 <sbrk_aligned+0x34>
 800d6ca:	1cc4      	adds	r4, r0, #3
 800d6cc:	f024 0403 	bic.w	r4, r4, #3
 800d6d0:	42a0      	cmp	r0, r4
 800d6d2:	d007      	beq.n	800d6e4 <sbrk_aligned+0x38>
 800d6d4:	1a21      	subs	r1, r4, r0
 800d6d6:	4628      	mov	r0, r5
 800d6d8:	f000 fb68 	bl	800ddac <_sbrk_r>
 800d6dc:	3001      	adds	r0, #1
 800d6de:	d101      	bne.n	800d6e4 <sbrk_aligned+0x38>
 800d6e0:	f04f 34ff 	mov.w	r4, #4294967295
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	bd70      	pop	{r4, r5, r6, pc}
 800d6e8:	20000888 	.word	0x20000888

0800d6ec <_malloc_r>:
 800d6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f0:	1ccd      	adds	r5, r1, #3
 800d6f2:	f025 0503 	bic.w	r5, r5, #3
 800d6f6:	3508      	adds	r5, #8
 800d6f8:	2d0c      	cmp	r5, #12
 800d6fa:	bf38      	it	cc
 800d6fc:	250c      	movcc	r5, #12
 800d6fe:	2d00      	cmp	r5, #0
 800d700:	4607      	mov	r7, r0
 800d702:	db01      	blt.n	800d708 <_malloc_r+0x1c>
 800d704:	42a9      	cmp	r1, r5
 800d706:	d905      	bls.n	800d714 <_malloc_r+0x28>
 800d708:	230c      	movs	r3, #12
 800d70a:	603b      	str	r3, [r7, #0]
 800d70c:	2600      	movs	r6, #0
 800d70e:	4630      	mov	r0, r6
 800d710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d714:	4e2e      	ldr	r6, [pc, #184]	; (800d7d0 <_malloc_r+0xe4>)
 800d716:	f000 fe3d 	bl	800e394 <__malloc_lock>
 800d71a:	6833      	ldr	r3, [r6, #0]
 800d71c:	461c      	mov	r4, r3
 800d71e:	bb34      	cbnz	r4, 800d76e <_malloc_r+0x82>
 800d720:	4629      	mov	r1, r5
 800d722:	4638      	mov	r0, r7
 800d724:	f7ff ffc2 	bl	800d6ac <sbrk_aligned>
 800d728:	1c43      	adds	r3, r0, #1
 800d72a:	4604      	mov	r4, r0
 800d72c:	d14d      	bne.n	800d7ca <_malloc_r+0xde>
 800d72e:	6834      	ldr	r4, [r6, #0]
 800d730:	4626      	mov	r6, r4
 800d732:	2e00      	cmp	r6, #0
 800d734:	d140      	bne.n	800d7b8 <_malloc_r+0xcc>
 800d736:	6823      	ldr	r3, [r4, #0]
 800d738:	4631      	mov	r1, r6
 800d73a:	4638      	mov	r0, r7
 800d73c:	eb04 0803 	add.w	r8, r4, r3
 800d740:	f000 fb34 	bl	800ddac <_sbrk_r>
 800d744:	4580      	cmp	r8, r0
 800d746:	d13a      	bne.n	800d7be <_malloc_r+0xd2>
 800d748:	6821      	ldr	r1, [r4, #0]
 800d74a:	3503      	adds	r5, #3
 800d74c:	1a6d      	subs	r5, r5, r1
 800d74e:	f025 0503 	bic.w	r5, r5, #3
 800d752:	3508      	adds	r5, #8
 800d754:	2d0c      	cmp	r5, #12
 800d756:	bf38      	it	cc
 800d758:	250c      	movcc	r5, #12
 800d75a:	4629      	mov	r1, r5
 800d75c:	4638      	mov	r0, r7
 800d75e:	f7ff ffa5 	bl	800d6ac <sbrk_aligned>
 800d762:	3001      	adds	r0, #1
 800d764:	d02b      	beq.n	800d7be <_malloc_r+0xd2>
 800d766:	6823      	ldr	r3, [r4, #0]
 800d768:	442b      	add	r3, r5
 800d76a:	6023      	str	r3, [r4, #0]
 800d76c:	e00e      	b.n	800d78c <_malloc_r+0xa0>
 800d76e:	6822      	ldr	r2, [r4, #0]
 800d770:	1b52      	subs	r2, r2, r5
 800d772:	d41e      	bmi.n	800d7b2 <_malloc_r+0xc6>
 800d774:	2a0b      	cmp	r2, #11
 800d776:	d916      	bls.n	800d7a6 <_malloc_r+0xba>
 800d778:	1961      	adds	r1, r4, r5
 800d77a:	42a3      	cmp	r3, r4
 800d77c:	6025      	str	r5, [r4, #0]
 800d77e:	bf18      	it	ne
 800d780:	6059      	strne	r1, [r3, #4]
 800d782:	6863      	ldr	r3, [r4, #4]
 800d784:	bf08      	it	eq
 800d786:	6031      	streq	r1, [r6, #0]
 800d788:	5162      	str	r2, [r4, r5]
 800d78a:	604b      	str	r3, [r1, #4]
 800d78c:	4638      	mov	r0, r7
 800d78e:	f104 060b 	add.w	r6, r4, #11
 800d792:	f000 fe05 	bl	800e3a0 <__malloc_unlock>
 800d796:	f026 0607 	bic.w	r6, r6, #7
 800d79a:	1d23      	adds	r3, r4, #4
 800d79c:	1af2      	subs	r2, r6, r3
 800d79e:	d0b6      	beq.n	800d70e <_malloc_r+0x22>
 800d7a0:	1b9b      	subs	r3, r3, r6
 800d7a2:	50a3      	str	r3, [r4, r2]
 800d7a4:	e7b3      	b.n	800d70e <_malloc_r+0x22>
 800d7a6:	6862      	ldr	r2, [r4, #4]
 800d7a8:	42a3      	cmp	r3, r4
 800d7aa:	bf0c      	ite	eq
 800d7ac:	6032      	streq	r2, [r6, #0]
 800d7ae:	605a      	strne	r2, [r3, #4]
 800d7b0:	e7ec      	b.n	800d78c <_malloc_r+0xa0>
 800d7b2:	4623      	mov	r3, r4
 800d7b4:	6864      	ldr	r4, [r4, #4]
 800d7b6:	e7b2      	b.n	800d71e <_malloc_r+0x32>
 800d7b8:	4634      	mov	r4, r6
 800d7ba:	6876      	ldr	r6, [r6, #4]
 800d7bc:	e7b9      	b.n	800d732 <_malloc_r+0x46>
 800d7be:	230c      	movs	r3, #12
 800d7c0:	603b      	str	r3, [r7, #0]
 800d7c2:	4638      	mov	r0, r7
 800d7c4:	f000 fdec 	bl	800e3a0 <__malloc_unlock>
 800d7c8:	e7a1      	b.n	800d70e <_malloc_r+0x22>
 800d7ca:	6025      	str	r5, [r4, #0]
 800d7cc:	e7de      	b.n	800d78c <_malloc_r+0xa0>
 800d7ce:	bf00      	nop
 800d7d0:	20000884 	.word	0x20000884

0800d7d4 <__sfputc_r>:
 800d7d4:	6893      	ldr	r3, [r2, #8]
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	b410      	push	{r4}
 800d7dc:	6093      	str	r3, [r2, #8]
 800d7de:	da07      	bge.n	800d7f0 <__sfputc_r+0x1c>
 800d7e0:	6994      	ldr	r4, [r2, #24]
 800d7e2:	42a3      	cmp	r3, r4
 800d7e4:	db01      	blt.n	800d7ea <__sfputc_r+0x16>
 800d7e6:	290a      	cmp	r1, #10
 800d7e8:	d102      	bne.n	800d7f0 <__sfputc_r+0x1c>
 800d7ea:	bc10      	pop	{r4}
 800d7ec:	f000 baee 	b.w	800ddcc <__swbuf_r>
 800d7f0:	6813      	ldr	r3, [r2, #0]
 800d7f2:	1c58      	adds	r0, r3, #1
 800d7f4:	6010      	str	r0, [r2, #0]
 800d7f6:	7019      	strb	r1, [r3, #0]
 800d7f8:	4608      	mov	r0, r1
 800d7fa:	bc10      	pop	{r4}
 800d7fc:	4770      	bx	lr

0800d7fe <__sfputs_r>:
 800d7fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d800:	4606      	mov	r6, r0
 800d802:	460f      	mov	r7, r1
 800d804:	4614      	mov	r4, r2
 800d806:	18d5      	adds	r5, r2, r3
 800d808:	42ac      	cmp	r4, r5
 800d80a:	d101      	bne.n	800d810 <__sfputs_r+0x12>
 800d80c:	2000      	movs	r0, #0
 800d80e:	e007      	b.n	800d820 <__sfputs_r+0x22>
 800d810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d814:	463a      	mov	r2, r7
 800d816:	4630      	mov	r0, r6
 800d818:	f7ff ffdc 	bl	800d7d4 <__sfputc_r>
 800d81c:	1c43      	adds	r3, r0, #1
 800d81e:	d1f3      	bne.n	800d808 <__sfputs_r+0xa>
 800d820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d824 <_vfiprintf_r>:
 800d824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d828:	460d      	mov	r5, r1
 800d82a:	b09d      	sub	sp, #116	; 0x74
 800d82c:	4614      	mov	r4, r2
 800d82e:	4698      	mov	r8, r3
 800d830:	4606      	mov	r6, r0
 800d832:	b118      	cbz	r0, 800d83c <_vfiprintf_r+0x18>
 800d834:	6983      	ldr	r3, [r0, #24]
 800d836:	b90b      	cbnz	r3, 800d83c <_vfiprintf_r+0x18>
 800d838:	f000 fca6 	bl	800e188 <__sinit>
 800d83c:	4b89      	ldr	r3, [pc, #548]	; (800da64 <_vfiprintf_r+0x240>)
 800d83e:	429d      	cmp	r5, r3
 800d840:	d11b      	bne.n	800d87a <_vfiprintf_r+0x56>
 800d842:	6875      	ldr	r5, [r6, #4]
 800d844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d846:	07d9      	lsls	r1, r3, #31
 800d848:	d405      	bmi.n	800d856 <_vfiprintf_r+0x32>
 800d84a:	89ab      	ldrh	r3, [r5, #12]
 800d84c:	059a      	lsls	r2, r3, #22
 800d84e:	d402      	bmi.n	800d856 <_vfiprintf_r+0x32>
 800d850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d852:	f000 fd37 	bl	800e2c4 <__retarget_lock_acquire_recursive>
 800d856:	89ab      	ldrh	r3, [r5, #12]
 800d858:	071b      	lsls	r3, r3, #28
 800d85a:	d501      	bpl.n	800d860 <_vfiprintf_r+0x3c>
 800d85c:	692b      	ldr	r3, [r5, #16]
 800d85e:	b9eb      	cbnz	r3, 800d89c <_vfiprintf_r+0x78>
 800d860:	4629      	mov	r1, r5
 800d862:	4630      	mov	r0, r6
 800d864:	f000 fb04 	bl	800de70 <__swsetup_r>
 800d868:	b1c0      	cbz	r0, 800d89c <_vfiprintf_r+0x78>
 800d86a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d86c:	07dc      	lsls	r4, r3, #31
 800d86e:	d50e      	bpl.n	800d88e <_vfiprintf_r+0x6a>
 800d870:	f04f 30ff 	mov.w	r0, #4294967295
 800d874:	b01d      	add	sp, #116	; 0x74
 800d876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d87a:	4b7b      	ldr	r3, [pc, #492]	; (800da68 <_vfiprintf_r+0x244>)
 800d87c:	429d      	cmp	r5, r3
 800d87e:	d101      	bne.n	800d884 <_vfiprintf_r+0x60>
 800d880:	68b5      	ldr	r5, [r6, #8]
 800d882:	e7df      	b.n	800d844 <_vfiprintf_r+0x20>
 800d884:	4b79      	ldr	r3, [pc, #484]	; (800da6c <_vfiprintf_r+0x248>)
 800d886:	429d      	cmp	r5, r3
 800d888:	bf08      	it	eq
 800d88a:	68f5      	ldreq	r5, [r6, #12]
 800d88c:	e7da      	b.n	800d844 <_vfiprintf_r+0x20>
 800d88e:	89ab      	ldrh	r3, [r5, #12]
 800d890:	0598      	lsls	r0, r3, #22
 800d892:	d4ed      	bmi.n	800d870 <_vfiprintf_r+0x4c>
 800d894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d896:	f000 fd16 	bl	800e2c6 <__retarget_lock_release_recursive>
 800d89a:	e7e9      	b.n	800d870 <_vfiprintf_r+0x4c>
 800d89c:	2300      	movs	r3, #0
 800d89e:	9309      	str	r3, [sp, #36]	; 0x24
 800d8a0:	2320      	movs	r3, #32
 800d8a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8aa:	2330      	movs	r3, #48	; 0x30
 800d8ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800da70 <_vfiprintf_r+0x24c>
 800d8b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8b4:	f04f 0901 	mov.w	r9, #1
 800d8b8:	4623      	mov	r3, r4
 800d8ba:	469a      	mov	sl, r3
 800d8bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8c0:	b10a      	cbz	r2, 800d8c6 <_vfiprintf_r+0xa2>
 800d8c2:	2a25      	cmp	r2, #37	; 0x25
 800d8c4:	d1f9      	bne.n	800d8ba <_vfiprintf_r+0x96>
 800d8c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d8ca:	d00b      	beq.n	800d8e4 <_vfiprintf_r+0xc0>
 800d8cc:	465b      	mov	r3, fp
 800d8ce:	4622      	mov	r2, r4
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	f7ff ff93 	bl	800d7fe <__sfputs_r>
 800d8d8:	3001      	adds	r0, #1
 800d8da:	f000 80aa 	beq.w	800da32 <_vfiprintf_r+0x20e>
 800d8de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8e0:	445a      	add	r2, fp
 800d8e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f000 80a2 	beq.w	800da32 <_vfiprintf_r+0x20e>
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8f8:	f10a 0a01 	add.w	sl, sl, #1
 800d8fc:	9304      	str	r3, [sp, #16]
 800d8fe:	9307      	str	r3, [sp, #28]
 800d900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d904:	931a      	str	r3, [sp, #104]	; 0x68
 800d906:	4654      	mov	r4, sl
 800d908:	2205      	movs	r2, #5
 800d90a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d90e:	4858      	ldr	r0, [pc, #352]	; (800da70 <_vfiprintf_r+0x24c>)
 800d910:	f7f2 fc3e 	bl	8000190 <memchr>
 800d914:	9a04      	ldr	r2, [sp, #16]
 800d916:	b9d8      	cbnz	r0, 800d950 <_vfiprintf_r+0x12c>
 800d918:	06d1      	lsls	r1, r2, #27
 800d91a:	bf44      	itt	mi
 800d91c:	2320      	movmi	r3, #32
 800d91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d922:	0713      	lsls	r3, r2, #28
 800d924:	bf44      	itt	mi
 800d926:	232b      	movmi	r3, #43	; 0x2b
 800d928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d92c:	f89a 3000 	ldrb.w	r3, [sl]
 800d930:	2b2a      	cmp	r3, #42	; 0x2a
 800d932:	d015      	beq.n	800d960 <_vfiprintf_r+0x13c>
 800d934:	9a07      	ldr	r2, [sp, #28]
 800d936:	4654      	mov	r4, sl
 800d938:	2000      	movs	r0, #0
 800d93a:	f04f 0c0a 	mov.w	ip, #10
 800d93e:	4621      	mov	r1, r4
 800d940:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d944:	3b30      	subs	r3, #48	; 0x30
 800d946:	2b09      	cmp	r3, #9
 800d948:	d94e      	bls.n	800d9e8 <_vfiprintf_r+0x1c4>
 800d94a:	b1b0      	cbz	r0, 800d97a <_vfiprintf_r+0x156>
 800d94c:	9207      	str	r2, [sp, #28]
 800d94e:	e014      	b.n	800d97a <_vfiprintf_r+0x156>
 800d950:	eba0 0308 	sub.w	r3, r0, r8
 800d954:	fa09 f303 	lsl.w	r3, r9, r3
 800d958:	4313      	orrs	r3, r2
 800d95a:	9304      	str	r3, [sp, #16]
 800d95c:	46a2      	mov	sl, r4
 800d95e:	e7d2      	b.n	800d906 <_vfiprintf_r+0xe2>
 800d960:	9b03      	ldr	r3, [sp, #12]
 800d962:	1d19      	adds	r1, r3, #4
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	9103      	str	r1, [sp, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	bfbb      	ittet	lt
 800d96c:	425b      	neglt	r3, r3
 800d96e:	f042 0202 	orrlt.w	r2, r2, #2
 800d972:	9307      	strge	r3, [sp, #28]
 800d974:	9307      	strlt	r3, [sp, #28]
 800d976:	bfb8      	it	lt
 800d978:	9204      	strlt	r2, [sp, #16]
 800d97a:	7823      	ldrb	r3, [r4, #0]
 800d97c:	2b2e      	cmp	r3, #46	; 0x2e
 800d97e:	d10c      	bne.n	800d99a <_vfiprintf_r+0x176>
 800d980:	7863      	ldrb	r3, [r4, #1]
 800d982:	2b2a      	cmp	r3, #42	; 0x2a
 800d984:	d135      	bne.n	800d9f2 <_vfiprintf_r+0x1ce>
 800d986:	9b03      	ldr	r3, [sp, #12]
 800d988:	1d1a      	adds	r2, r3, #4
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	9203      	str	r2, [sp, #12]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	bfb8      	it	lt
 800d992:	f04f 33ff 	movlt.w	r3, #4294967295
 800d996:	3402      	adds	r4, #2
 800d998:	9305      	str	r3, [sp, #20]
 800d99a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800da74 <_vfiprintf_r+0x250>
 800d99e:	7821      	ldrb	r1, [r4, #0]
 800d9a0:	2203      	movs	r2, #3
 800d9a2:	4650      	mov	r0, sl
 800d9a4:	f7f2 fbf4 	bl	8000190 <memchr>
 800d9a8:	b140      	cbz	r0, 800d9bc <_vfiprintf_r+0x198>
 800d9aa:	2340      	movs	r3, #64	; 0x40
 800d9ac:	eba0 000a 	sub.w	r0, r0, sl
 800d9b0:	fa03 f000 	lsl.w	r0, r3, r0
 800d9b4:	9b04      	ldr	r3, [sp, #16]
 800d9b6:	4303      	orrs	r3, r0
 800d9b8:	3401      	adds	r4, #1
 800d9ba:	9304      	str	r3, [sp, #16]
 800d9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9c0:	482d      	ldr	r0, [pc, #180]	; (800da78 <_vfiprintf_r+0x254>)
 800d9c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9c6:	2206      	movs	r2, #6
 800d9c8:	f7f2 fbe2 	bl	8000190 <memchr>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	d03f      	beq.n	800da50 <_vfiprintf_r+0x22c>
 800d9d0:	4b2a      	ldr	r3, [pc, #168]	; (800da7c <_vfiprintf_r+0x258>)
 800d9d2:	bb1b      	cbnz	r3, 800da1c <_vfiprintf_r+0x1f8>
 800d9d4:	9b03      	ldr	r3, [sp, #12]
 800d9d6:	3307      	adds	r3, #7
 800d9d8:	f023 0307 	bic.w	r3, r3, #7
 800d9dc:	3308      	adds	r3, #8
 800d9de:	9303      	str	r3, [sp, #12]
 800d9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9e2:	443b      	add	r3, r7
 800d9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d9e6:	e767      	b.n	800d8b8 <_vfiprintf_r+0x94>
 800d9e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9ec:	460c      	mov	r4, r1
 800d9ee:	2001      	movs	r0, #1
 800d9f0:	e7a5      	b.n	800d93e <_vfiprintf_r+0x11a>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	3401      	adds	r4, #1
 800d9f6:	9305      	str	r3, [sp, #20]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	f04f 0c0a 	mov.w	ip, #10
 800d9fe:	4620      	mov	r0, r4
 800da00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da04:	3a30      	subs	r2, #48	; 0x30
 800da06:	2a09      	cmp	r2, #9
 800da08:	d903      	bls.n	800da12 <_vfiprintf_r+0x1ee>
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d0c5      	beq.n	800d99a <_vfiprintf_r+0x176>
 800da0e:	9105      	str	r1, [sp, #20]
 800da10:	e7c3      	b.n	800d99a <_vfiprintf_r+0x176>
 800da12:	fb0c 2101 	mla	r1, ip, r1, r2
 800da16:	4604      	mov	r4, r0
 800da18:	2301      	movs	r3, #1
 800da1a:	e7f0      	b.n	800d9fe <_vfiprintf_r+0x1da>
 800da1c:	ab03      	add	r3, sp, #12
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	462a      	mov	r2, r5
 800da22:	4b17      	ldr	r3, [pc, #92]	; (800da80 <_vfiprintf_r+0x25c>)
 800da24:	a904      	add	r1, sp, #16
 800da26:	4630      	mov	r0, r6
 800da28:	f3af 8000 	nop.w
 800da2c:	4607      	mov	r7, r0
 800da2e:	1c78      	adds	r0, r7, #1
 800da30:	d1d6      	bne.n	800d9e0 <_vfiprintf_r+0x1bc>
 800da32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da34:	07d9      	lsls	r1, r3, #31
 800da36:	d405      	bmi.n	800da44 <_vfiprintf_r+0x220>
 800da38:	89ab      	ldrh	r3, [r5, #12]
 800da3a:	059a      	lsls	r2, r3, #22
 800da3c:	d402      	bmi.n	800da44 <_vfiprintf_r+0x220>
 800da3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da40:	f000 fc41 	bl	800e2c6 <__retarget_lock_release_recursive>
 800da44:	89ab      	ldrh	r3, [r5, #12]
 800da46:	065b      	lsls	r3, r3, #25
 800da48:	f53f af12 	bmi.w	800d870 <_vfiprintf_r+0x4c>
 800da4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da4e:	e711      	b.n	800d874 <_vfiprintf_r+0x50>
 800da50:	ab03      	add	r3, sp, #12
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	462a      	mov	r2, r5
 800da56:	4b0a      	ldr	r3, [pc, #40]	; (800da80 <_vfiprintf_r+0x25c>)
 800da58:	a904      	add	r1, sp, #16
 800da5a:	4630      	mov	r0, r6
 800da5c:	f000 f880 	bl	800db60 <_printf_i>
 800da60:	e7e4      	b.n	800da2c <_vfiprintf_r+0x208>
 800da62:	bf00      	nop
 800da64:	0800eb94 	.word	0x0800eb94
 800da68:	0800ebb4 	.word	0x0800ebb4
 800da6c:	0800eb74 	.word	0x0800eb74
 800da70:	0800eb3e 	.word	0x0800eb3e
 800da74:	0800eb44 	.word	0x0800eb44
 800da78:	0800eb48 	.word	0x0800eb48
 800da7c:	00000000 	.word	0x00000000
 800da80:	0800d7ff 	.word	0x0800d7ff

0800da84 <_printf_common>:
 800da84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da88:	4616      	mov	r6, r2
 800da8a:	4699      	mov	r9, r3
 800da8c:	688a      	ldr	r2, [r1, #8]
 800da8e:	690b      	ldr	r3, [r1, #16]
 800da90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da94:	4293      	cmp	r3, r2
 800da96:	bfb8      	it	lt
 800da98:	4613      	movlt	r3, r2
 800da9a:	6033      	str	r3, [r6, #0]
 800da9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800daa0:	4607      	mov	r7, r0
 800daa2:	460c      	mov	r4, r1
 800daa4:	b10a      	cbz	r2, 800daaa <_printf_common+0x26>
 800daa6:	3301      	adds	r3, #1
 800daa8:	6033      	str	r3, [r6, #0]
 800daaa:	6823      	ldr	r3, [r4, #0]
 800daac:	0699      	lsls	r1, r3, #26
 800daae:	bf42      	ittt	mi
 800dab0:	6833      	ldrmi	r3, [r6, #0]
 800dab2:	3302      	addmi	r3, #2
 800dab4:	6033      	strmi	r3, [r6, #0]
 800dab6:	6825      	ldr	r5, [r4, #0]
 800dab8:	f015 0506 	ands.w	r5, r5, #6
 800dabc:	d106      	bne.n	800dacc <_printf_common+0x48>
 800dabe:	f104 0a19 	add.w	sl, r4, #25
 800dac2:	68e3      	ldr	r3, [r4, #12]
 800dac4:	6832      	ldr	r2, [r6, #0]
 800dac6:	1a9b      	subs	r3, r3, r2
 800dac8:	42ab      	cmp	r3, r5
 800daca:	dc26      	bgt.n	800db1a <_printf_common+0x96>
 800dacc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dad0:	1e13      	subs	r3, r2, #0
 800dad2:	6822      	ldr	r2, [r4, #0]
 800dad4:	bf18      	it	ne
 800dad6:	2301      	movne	r3, #1
 800dad8:	0692      	lsls	r2, r2, #26
 800dada:	d42b      	bmi.n	800db34 <_printf_common+0xb0>
 800dadc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dae0:	4649      	mov	r1, r9
 800dae2:	4638      	mov	r0, r7
 800dae4:	47c0      	blx	r8
 800dae6:	3001      	adds	r0, #1
 800dae8:	d01e      	beq.n	800db28 <_printf_common+0xa4>
 800daea:	6823      	ldr	r3, [r4, #0]
 800daec:	68e5      	ldr	r5, [r4, #12]
 800daee:	6832      	ldr	r2, [r6, #0]
 800daf0:	f003 0306 	and.w	r3, r3, #6
 800daf4:	2b04      	cmp	r3, #4
 800daf6:	bf08      	it	eq
 800daf8:	1aad      	subeq	r5, r5, r2
 800dafa:	68a3      	ldr	r3, [r4, #8]
 800dafc:	6922      	ldr	r2, [r4, #16]
 800dafe:	bf0c      	ite	eq
 800db00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db04:	2500      	movne	r5, #0
 800db06:	4293      	cmp	r3, r2
 800db08:	bfc4      	itt	gt
 800db0a:	1a9b      	subgt	r3, r3, r2
 800db0c:	18ed      	addgt	r5, r5, r3
 800db0e:	2600      	movs	r6, #0
 800db10:	341a      	adds	r4, #26
 800db12:	42b5      	cmp	r5, r6
 800db14:	d11a      	bne.n	800db4c <_printf_common+0xc8>
 800db16:	2000      	movs	r0, #0
 800db18:	e008      	b.n	800db2c <_printf_common+0xa8>
 800db1a:	2301      	movs	r3, #1
 800db1c:	4652      	mov	r2, sl
 800db1e:	4649      	mov	r1, r9
 800db20:	4638      	mov	r0, r7
 800db22:	47c0      	blx	r8
 800db24:	3001      	adds	r0, #1
 800db26:	d103      	bne.n	800db30 <_printf_common+0xac>
 800db28:	f04f 30ff 	mov.w	r0, #4294967295
 800db2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db30:	3501      	adds	r5, #1
 800db32:	e7c6      	b.n	800dac2 <_printf_common+0x3e>
 800db34:	18e1      	adds	r1, r4, r3
 800db36:	1c5a      	adds	r2, r3, #1
 800db38:	2030      	movs	r0, #48	; 0x30
 800db3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db3e:	4422      	add	r2, r4
 800db40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db48:	3302      	adds	r3, #2
 800db4a:	e7c7      	b.n	800dadc <_printf_common+0x58>
 800db4c:	2301      	movs	r3, #1
 800db4e:	4622      	mov	r2, r4
 800db50:	4649      	mov	r1, r9
 800db52:	4638      	mov	r0, r7
 800db54:	47c0      	blx	r8
 800db56:	3001      	adds	r0, #1
 800db58:	d0e6      	beq.n	800db28 <_printf_common+0xa4>
 800db5a:	3601      	adds	r6, #1
 800db5c:	e7d9      	b.n	800db12 <_printf_common+0x8e>
	...

0800db60 <_printf_i>:
 800db60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db64:	7e0f      	ldrb	r7, [r1, #24]
 800db66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db68:	2f78      	cmp	r7, #120	; 0x78
 800db6a:	4691      	mov	r9, r2
 800db6c:	4680      	mov	r8, r0
 800db6e:	460c      	mov	r4, r1
 800db70:	469a      	mov	sl, r3
 800db72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db76:	d807      	bhi.n	800db88 <_printf_i+0x28>
 800db78:	2f62      	cmp	r7, #98	; 0x62
 800db7a:	d80a      	bhi.n	800db92 <_printf_i+0x32>
 800db7c:	2f00      	cmp	r7, #0
 800db7e:	f000 80d8 	beq.w	800dd32 <_printf_i+0x1d2>
 800db82:	2f58      	cmp	r7, #88	; 0x58
 800db84:	f000 80a3 	beq.w	800dcce <_printf_i+0x16e>
 800db88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db90:	e03a      	b.n	800dc08 <_printf_i+0xa8>
 800db92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db96:	2b15      	cmp	r3, #21
 800db98:	d8f6      	bhi.n	800db88 <_printf_i+0x28>
 800db9a:	a101      	add	r1, pc, #4	; (adr r1, 800dba0 <_printf_i+0x40>)
 800db9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dba0:	0800dbf9 	.word	0x0800dbf9
 800dba4:	0800dc0d 	.word	0x0800dc0d
 800dba8:	0800db89 	.word	0x0800db89
 800dbac:	0800db89 	.word	0x0800db89
 800dbb0:	0800db89 	.word	0x0800db89
 800dbb4:	0800db89 	.word	0x0800db89
 800dbb8:	0800dc0d 	.word	0x0800dc0d
 800dbbc:	0800db89 	.word	0x0800db89
 800dbc0:	0800db89 	.word	0x0800db89
 800dbc4:	0800db89 	.word	0x0800db89
 800dbc8:	0800db89 	.word	0x0800db89
 800dbcc:	0800dd19 	.word	0x0800dd19
 800dbd0:	0800dc3d 	.word	0x0800dc3d
 800dbd4:	0800dcfb 	.word	0x0800dcfb
 800dbd8:	0800db89 	.word	0x0800db89
 800dbdc:	0800db89 	.word	0x0800db89
 800dbe0:	0800dd3b 	.word	0x0800dd3b
 800dbe4:	0800db89 	.word	0x0800db89
 800dbe8:	0800dc3d 	.word	0x0800dc3d
 800dbec:	0800db89 	.word	0x0800db89
 800dbf0:	0800db89 	.word	0x0800db89
 800dbf4:	0800dd03 	.word	0x0800dd03
 800dbf8:	682b      	ldr	r3, [r5, #0]
 800dbfa:	1d1a      	adds	r2, r3, #4
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	602a      	str	r2, [r5, #0]
 800dc00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dc08:	2301      	movs	r3, #1
 800dc0a:	e0a3      	b.n	800dd54 <_printf_i+0x1f4>
 800dc0c:	6820      	ldr	r0, [r4, #0]
 800dc0e:	6829      	ldr	r1, [r5, #0]
 800dc10:	0606      	lsls	r6, r0, #24
 800dc12:	f101 0304 	add.w	r3, r1, #4
 800dc16:	d50a      	bpl.n	800dc2e <_printf_i+0xce>
 800dc18:	680e      	ldr	r6, [r1, #0]
 800dc1a:	602b      	str	r3, [r5, #0]
 800dc1c:	2e00      	cmp	r6, #0
 800dc1e:	da03      	bge.n	800dc28 <_printf_i+0xc8>
 800dc20:	232d      	movs	r3, #45	; 0x2d
 800dc22:	4276      	negs	r6, r6
 800dc24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc28:	485e      	ldr	r0, [pc, #376]	; (800dda4 <_printf_i+0x244>)
 800dc2a:	230a      	movs	r3, #10
 800dc2c:	e019      	b.n	800dc62 <_printf_i+0x102>
 800dc2e:	680e      	ldr	r6, [r1, #0]
 800dc30:	602b      	str	r3, [r5, #0]
 800dc32:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dc36:	bf18      	it	ne
 800dc38:	b236      	sxthne	r6, r6
 800dc3a:	e7ef      	b.n	800dc1c <_printf_i+0xbc>
 800dc3c:	682b      	ldr	r3, [r5, #0]
 800dc3e:	6820      	ldr	r0, [r4, #0]
 800dc40:	1d19      	adds	r1, r3, #4
 800dc42:	6029      	str	r1, [r5, #0]
 800dc44:	0601      	lsls	r1, r0, #24
 800dc46:	d501      	bpl.n	800dc4c <_printf_i+0xec>
 800dc48:	681e      	ldr	r6, [r3, #0]
 800dc4a:	e002      	b.n	800dc52 <_printf_i+0xf2>
 800dc4c:	0646      	lsls	r6, r0, #25
 800dc4e:	d5fb      	bpl.n	800dc48 <_printf_i+0xe8>
 800dc50:	881e      	ldrh	r6, [r3, #0]
 800dc52:	4854      	ldr	r0, [pc, #336]	; (800dda4 <_printf_i+0x244>)
 800dc54:	2f6f      	cmp	r7, #111	; 0x6f
 800dc56:	bf0c      	ite	eq
 800dc58:	2308      	moveq	r3, #8
 800dc5a:	230a      	movne	r3, #10
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc62:	6865      	ldr	r5, [r4, #4]
 800dc64:	60a5      	str	r5, [r4, #8]
 800dc66:	2d00      	cmp	r5, #0
 800dc68:	bfa2      	ittt	ge
 800dc6a:	6821      	ldrge	r1, [r4, #0]
 800dc6c:	f021 0104 	bicge.w	r1, r1, #4
 800dc70:	6021      	strge	r1, [r4, #0]
 800dc72:	b90e      	cbnz	r6, 800dc78 <_printf_i+0x118>
 800dc74:	2d00      	cmp	r5, #0
 800dc76:	d04d      	beq.n	800dd14 <_printf_i+0x1b4>
 800dc78:	4615      	mov	r5, r2
 800dc7a:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc7e:	fb03 6711 	mls	r7, r3, r1, r6
 800dc82:	5dc7      	ldrb	r7, [r0, r7]
 800dc84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc88:	4637      	mov	r7, r6
 800dc8a:	42bb      	cmp	r3, r7
 800dc8c:	460e      	mov	r6, r1
 800dc8e:	d9f4      	bls.n	800dc7a <_printf_i+0x11a>
 800dc90:	2b08      	cmp	r3, #8
 800dc92:	d10b      	bne.n	800dcac <_printf_i+0x14c>
 800dc94:	6823      	ldr	r3, [r4, #0]
 800dc96:	07de      	lsls	r6, r3, #31
 800dc98:	d508      	bpl.n	800dcac <_printf_i+0x14c>
 800dc9a:	6923      	ldr	r3, [r4, #16]
 800dc9c:	6861      	ldr	r1, [r4, #4]
 800dc9e:	4299      	cmp	r1, r3
 800dca0:	bfde      	ittt	le
 800dca2:	2330      	movle	r3, #48	; 0x30
 800dca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dca8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dcac:	1b52      	subs	r2, r2, r5
 800dcae:	6122      	str	r2, [r4, #16]
 800dcb0:	f8cd a000 	str.w	sl, [sp]
 800dcb4:	464b      	mov	r3, r9
 800dcb6:	aa03      	add	r2, sp, #12
 800dcb8:	4621      	mov	r1, r4
 800dcba:	4640      	mov	r0, r8
 800dcbc:	f7ff fee2 	bl	800da84 <_printf_common>
 800dcc0:	3001      	adds	r0, #1
 800dcc2:	d14c      	bne.n	800dd5e <_printf_i+0x1fe>
 800dcc4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc8:	b004      	add	sp, #16
 800dcca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcce:	4835      	ldr	r0, [pc, #212]	; (800dda4 <_printf_i+0x244>)
 800dcd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dcd4:	6829      	ldr	r1, [r5, #0]
 800dcd6:	6823      	ldr	r3, [r4, #0]
 800dcd8:	f851 6b04 	ldr.w	r6, [r1], #4
 800dcdc:	6029      	str	r1, [r5, #0]
 800dcde:	061d      	lsls	r5, r3, #24
 800dce0:	d514      	bpl.n	800dd0c <_printf_i+0x1ac>
 800dce2:	07df      	lsls	r7, r3, #31
 800dce4:	bf44      	itt	mi
 800dce6:	f043 0320 	orrmi.w	r3, r3, #32
 800dcea:	6023      	strmi	r3, [r4, #0]
 800dcec:	b91e      	cbnz	r6, 800dcf6 <_printf_i+0x196>
 800dcee:	6823      	ldr	r3, [r4, #0]
 800dcf0:	f023 0320 	bic.w	r3, r3, #32
 800dcf4:	6023      	str	r3, [r4, #0]
 800dcf6:	2310      	movs	r3, #16
 800dcf8:	e7b0      	b.n	800dc5c <_printf_i+0xfc>
 800dcfa:	6823      	ldr	r3, [r4, #0]
 800dcfc:	f043 0320 	orr.w	r3, r3, #32
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	2378      	movs	r3, #120	; 0x78
 800dd04:	4828      	ldr	r0, [pc, #160]	; (800dda8 <_printf_i+0x248>)
 800dd06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dd0a:	e7e3      	b.n	800dcd4 <_printf_i+0x174>
 800dd0c:	0659      	lsls	r1, r3, #25
 800dd0e:	bf48      	it	mi
 800dd10:	b2b6      	uxthmi	r6, r6
 800dd12:	e7e6      	b.n	800dce2 <_printf_i+0x182>
 800dd14:	4615      	mov	r5, r2
 800dd16:	e7bb      	b.n	800dc90 <_printf_i+0x130>
 800dd18:	682b      	ldr	r3, [r5, #0]
 800dd1a:	6826      	ldr	r6, [r4, #0]
 800dd1c:	6961      	ldr	r1, [r4, #20]
 800dd1e:	1d18      	adds	r0, r3, #4
 800dd20:	6028      	str	r0, [r5, #0]
 800dd22:	0635      	lsls	r5, r6, #24
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	d501      	bpl.n	800dd2c <_printf_i+0x1cc>
 800dd28:	6019      	str	r1, [r3, #0]
 800dd2a:	e002      	b.n	800dd32 <_printf_i+0x1d2>
 800dd2c:	0670      	lsls	r0, r6, #25
 800dd2e:	d5fb      	bpl.n	800dd28 <_printf_i+0x1c8>
 800dd30:	8019      	strh	r1, [r3, #0]
 800dd32:	2300      	movs	r3, #0
 800dd34:	6123      	str	r3, [r4, #16]
 800dd36:	4615      	mov	r5, r2
 800dd38:	e7ba      	b.n	800dcb0 <_printf_i+0x150>
 800dd3a:	682b      	ldr	r3, [r5, #0]
 800dd3c:	1d1a      	adds	r2, r3, #4
 800dd3e:	602a      	str	r2, [r5, #0]
 800dd40:	681d      	ldr	r5, [r3, #0]
 800dd42:	6862      	ldr	r2, [r4, #4]
 800dd44:	2100      	movs	r1, #0
 800dd46:	4628      	mov	r0, r5
 800dd48:	f7f2 fa22 	bl	8000190 <memchr>
 800dd4c:	b108      	cbz	r0, 800dd52 <_printf_i+0x1f2>
 800dd4e:	1b40      	subs	r0, r0, r5
 800dd50:	6060      	str	r0, [r4, #4]
 800dd52:	6863      	ldr	r3, [r4, #4]
 800dd54:	6123      	str	r3, [r4, #16]
 800dd56:	2300      	movs	r3, #0
 800dd58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd5c:	e7a8      	b.n	800dcb0 <_printf_i+0x150>
 800dd5e:	6923      	ldr	r3, [r4, #16]
 800dd60:	462a      	mov	r2, r5
 800dd62:	4649      	mov	r1, r9
 800dd64:	4640      	mov	r0, r8
 800dd66:	47d0      	blx	sl
 800dd68:	3001      	adds	r0, #1
 800dd6a:	d0ab      	beq.n	800dcc4 <_printf_i+0x164>
 800dd6c:	6823      	ldr	r3, [r4, #0]
 800dd6e:	079b      	lsls	r3, r3, #30
 800dd70:	d413      	bmi.n	800dd9a <_printf_i+0x23a>
 800dd72:	68e0      	ldr	r0, [r4, #12]
 800dd74:	9b03      	ldr	r3, [sp, #12]
 800dd76:	4298      	cmp	r0, r3
 800dd78:	bfb8      	it	lt
 800dd7a:	4618      	movlt	r0, r3
 800dd7c:	e7a4      	b.n	800dcc8 <_printf_i+0x168>
 800dd7e:	2301      	movs	r3, #1
 800dd80:	4632      	mov	r2, r6
 800dd82:	4649      	mov	r1, r9
 800dd84:	4640      	mov	r0, r8
 800dd86:	47d0      	blx	sl
 800dd88:	3001      	adds	r0, #1
 800dd8a:	d09b      	beq.n	800dcc4 <_printf_i+0x164>
 800dd8c:	3501      	adds	r5, #1
 800dd8e:	68e3      	ldr	r3, [r4, #12]
 800dd90:	9903      	ldr	r1, [sp, #12]
 800dd92:	1a5b      	subs	r3, r3, r1
 800dd94:	42ab      	cmp	r3, r5
 800dd96:	dcf2      	bgt.n	800dd7e <_printf_i+0x21e>
 800dd98:	e7eb      	b.n	800dd72 <_printf_i+0x212>
 800dd9a:	2500      	movs	r5, #0
 800dd9c:	f104 0619 	add.w	r6, r4, #25
 800dda0:	e7f5      	b.n	800dd8e <_printf_i+0x22e>
 800dda2:	bf00      	nop
 800dda4:	0800eb4f 	.word	0x0800eb4f
 800dda8:	0800eb60 	.word	0x0800eb60

0800ddac <_sbrk_r>:
 800ddac:	b538      	push	{r3, r4, r5, lr}
 800ddae:	4d06      	ldr	r5, [pc, #24]	; (800ddc8 <_sbrk_r+0x1c>)
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	4608      	mov	r0, r1
 800ddb6:	602b      	str	r3, [r5, #0]
 800ddb8:	f7f3 ffd2 	bl	8001d60 <_sbrk>
 800ddbc:	1c43      	adds	r3, r0, #1
 800ddbe:	d102      	bne.n	800ddc6 <_sbrk_r+0x1a>
 800ddc0:	682b      	ldr	r3, [r5, #0]
 800ddc2:	b103      	cbz	r3, 800ddc6 <_sbrk_r+0x1a>
 800ddc4:	6023      	str	r3, [r4, #0]
 800ddc6:	bd38      	pop	{r3, r4, r5, pc}
 800ddc8:	20000890 	.word	0x20000890

0800ddcc <__swbuf_r>:
 800ddcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddce:	460e      	mov	r6, r1
 800ddd0:	4614      	mov	r4, r2
 800ddd2:	4605      	mov	r5, r0
 800ddd4:	b118      	cbz	r0, 800ddde <__swbuf_r+0x12>
 800ddd6:	6983      	ldr	r3, [r0, #24]
 800ddd8:	b90b      	cbnz	r3, 800ddde <__swbuf_r+0x12>
 800ddda:	f000 f9d5 	bl	800e188 <__sinit>
 800ddde:	4b21      	ldr	r3, [pc, #132]	; (800de64 <__swbuf_r+0x98>)
 800dde0:	429c      	cmp	r4, r3
 800dde2:	d12b      	bne.n	800de3c <__swbuf_r+0x70>
 800dde4:	686c      	ldr	r4, [r5, #4]
 800dde6:	69a3      	ldr	r3, [r4, #24]
 800dde8:	60a3      	str	r3, [r4, #8]
 800ddea:	89a3      	ldrh	r3, [r4, #12]
 800ddec:	071a      	lsls	r2, r3, #28
 800ddee:	d52f      	bpl.n	800de50 <__swbuf_r+0x84>
 800ddf0:	6923      	ldr	r3, [r4, #16]
 800ddf2:	b36b      	cbz	r3, 800de50 <__swbuf_r+0x84>
 800ddf4:	6923      	ldr	r3, [r4, #16]
 800ddf6:	6820      	ldr	r0, [r4, #0]
 800ddf8:	1ac0      	subs	r0, r0, r3
 800ddfa:	6963      	ldr	r3, [r4, #20]
 800ddfc:	b2f6      	uxtb	r6, r6
 800ddfe:	4283      	cmp	r3, r0
 800de00:	4637      	mov	r7, r6
 800de02:	dc04      	bgt.n	800de0e <__swbuf_r+0x42>
 800de04:	4621      	mov	r1, r4
 800de06:	4628      	mov	r0, r5
 800de08:	f000 f92a 	bl	800e060 <_fflush_r>
 800de0c:	bb30      	cbnz	r0, 800de5c <__swbuf_r+0x90>
 800de0e:	68a3      	ldr	r3, [r4, #8]
 800de10:	3b01      	subs	r3, #1
 800de12:	60a3      	str	r3, [r4, #8]
 800de14:	6823      	ldr	r3, [r4, #0]
 800de16:	1c5a      	adds	r2, r3, #1
 800de18:	6022      	str	r2, [r4, #0]
 800de1a:	701e      	strb	r6, [r3, #0]
 800de1c:	6963      	ldr	r3, [r4, #20]
 800de1e:	3001      	adds	r0, #1
 800de20:	4283      	cmp	r3, r0
 800de22:	d004      	beq.n	800de2e <__swbuf_r+0x62>
 800de24:	89a3      	ldrh	r3, [r4, #12]
 800de26:	07db      	lsls	r3, r3, #31
 800de28:	d506      	bpl.n	800de38 <__swbuf_r+0x6c>
 800de2a:	2e0a      	cmp	r6, #10
 800de2c:	d104      	bne.n	800de38 <__swbuf_r+0x6c>
 800de2e:	4621      	mov	r1, r4
 800de30:	4628      	mov	r0, r5
 800de32:	f000 f915 	bl	800e060 <_fflush_r>
 800de36:	b988      	cbnz	r0, 800de5c <__swbuf_r+0x90>
 800de38:	4638      	mov	r0, r7
 800de3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de3c:	4b0a      	ldr	r3, [pc, #40]	; (800de68 <__swbuf_r+0x9c>)
 800de3e:	429c      	cmp	r4, r3
 800de40:	d101      	bne.n	800de46 <__swbuf_r+0x7a>
 800de42:	68ac      	ldr	r4, [r5, #8]
 800de44:	e7cf      	b.n	800dde6 <__swbuf_r+0x1a>
 800de46:	4b09      	ldr	r3, [pc, #36]	; (800de6c <__swbuf_r+0xa0>)
 800de48:	429c      	cmp	r4, r3
 800de4a:	bf08      	it	eq
 800de4c:	68ec      	ldreq	r4, [r5, #12]
 800de4e:	e7ca      	b.n	800dde6 <__swbuf_r+0x1a>
 800de50:	4621      	mov	r1, r4
 800de52:	4628      	mov	r0, r5
 800de54:	f000 f80c 	bl	800de70 <__swsetup_r>
 800de58:	2800      	cmp	r0, #0
 800de5a:	d0cb      	beq.n	800ddf4 <__swbuf_r+0x28>
 800de5c:	f04f 37ff 	mov.w	r7, #4294967295
 800de60:	e7ea      	b.n	800de38 <__swbuf_r+0x6c>
 800de62:	bf00      	nop
 800de64:	0800eb94 	.word	0x0800eb94
 800de68:	0800ebb4 	.word	0x0800ebb4
 800de6c:	0800eb74 	.word	0x0800eb74

0800de70 <__swsetup_r>:
 800de70:	4b32      	ldr	r3, [pc, #200]	; (800df3c <__swsetup_r+0xcc>)
 800de72:	b570      	push	{r4, r5, r6, lr}
 800de74:	681d      	ldr	r5, [r3, #0]
 800de76:	4606      	mov	r6, r0
 800de78:	460c      	mov	r4, r1
 800de7a:	b125      	cbz	r5, 800de86 <__swsetup_r+0x16>
 800de7c:	69ab      	ldr	r3, [r5, #24]
 800de7e:	b913      	cbnz	r3, 800de86 <__swsetup_r+0x16>
 800de80:	4628      	mov	r0, r5
 800de82:	f000 f981 	bl	800e188 <__sinit>
 800de86:	4b2e      	ldr	r3, [pc, #184]	; (800df40 <__swsetup_r+0xd0>)
 800de88:	429c      	cmp	r4, r3
 800de8a:	d10f      	bne.n	800deac <__swsetup_r+0x3c>
 800de8c:	686c      	ldr	r4, [r5, #4]
 800de8e:	89a3      	ldrh	r3, [r4, #12]
 800de90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de94:	0719      	lsls	r1, r3, #28
 800de96:	d42c      	bmi.n	800def2 <__swsetup_r+0x82>
 800de98:	06dd      	lsls	r5, r3, #27
 800de9a:	d411      	bmi.n	800dec0 <__swsetup_r+0x50>
 800de9c:	2309      	movs	r3, #9
 800de9e:	6033      	str	r3, [r6, #0]
 800dea0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dea4:	81a3      	strh	r3, [r4, #12]
 800dea6:	f04f 30ff 	mov.w	r0, #4294967295
 800deaa:	e03e      	b.n	800df2a <__swsetup_r+0xba>
 800deac:	4b25      	ldr	r3, [pc, #148]	; (800df44 <__swsetup_r+0xd4>)
 800deae:	429c      	cmp	r4, r3
 800deb0:	d101      	bne.n	800deb6 <__swsetup_r+0x46>
 800deb2:	68ac      	ldr	r4, [r5, #8]
 800deb4:	e7eb      	b.n	800de8e <__swsetup_r+0x1e>
 800deb6:	4b24      	ldr	r3, [pc, #144]	; (800df48 <__swsetup_r+0xd8>)
 800deb8:	429c      	cmp	r4, r3
 800deba:	bf08      	it	eq
 800debc:	68ec      	ldreq	r4, [r5, #12]
 800debe:	e7e6      	b.n	800de8e <__swsetup_r+0x1e>
 800dec0:	0758      	lsls	r0, r3, #29
 800dec2:	d512      	bpl.n	800deea <__swsetup_r+0x7a>
 800dec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dec6:	b141      	cbz	r1, 800deda <__swsetup_r+0x6a>
 800dec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800decc:	4299      	cmp	r1, r3
 800dece:	d002      	beq.n	800ded6 <__swsetup_r+0x66>
 800ded0:	4630      	mov	r0, r6
 800ded2:	f7ff fba1 	bl	800d618 <_free_r>
 800ded6:	2300      	movs	r3, #0
 800ded8:	6363      	str	r3, [r4, #52]	; 0x34
 800deda:	89a3      	ldrh	r3, [r4, #12]
 800dedc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dee0:	81a3      	strh	r3, [r4, #12]
 800dee2:	2300      	movs	r3, #0
 800dee4:	6063      	str	r3, [r4, #4]
 800dee6:	6923      	ldr	r3, [r4, #16]
 800dee8:	6023      	str	r3, [r4, #0]
 800deea:	89a3      	ldrh	r3, [r4, #12]
 800deec:	f043 0308 	orr.w	r3, r3, #8
 800def0:	81a3      	strh	r3, [r4, #12]
 800def2:	6923      	ldr	r3, [r4, #16]
 800def4:	b94b      	cbnz	r3, 800df0a <__swsetup_r+0x9a>
 800def6:	89a3      	ldrh	r3, [r4, #12]
 800def8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800defc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df00:	d003      	beq.n	800df0a <__swsetup_r+0x9a>
 800df02:	4621      	mov	r1, r4
 800df04:	4630      	mov	r0, r6
 800df06:	f000 fa05 	bl	800e314 <__smakebuf_r>
 800df0a:	89a0      	ldrh	r0, [r4, #12]
 800df0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df10:	f010 0301 	ands.w	r3, r0, #1
 800df14:	d00a      	beq.n	800df2c <__swsetup_r+0xbc>
 800df16:	2300      	movs	r3, #0
 800df18:	60a3      	str	r3, [r4, #8]
 800df1a:	6963      	ldr	r3, [r4, #20]
 800df1c:	425b      	negs	r3, r3
 800df1e:	61a3      	str	r3, [r4, #24]
 800df20:	6923      	ldr	r3, [r4, #16]
 800df22:	b943      	cbnz	r3, 800df36 <__swsetup_r+0xc6>
 800df24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800df28:	d1ba      	bne.n	800dea0 <__swsetup_r+0x30>
 800df2a:	bd70      	pop	{r4, r5, r6, pc}
 800df2c:	0781      	lsls	r1, r0, #30
 800df2e:	bf58      	it	pl
 800df30:	6963      	ldrpl	r3, [r4, #20]
 800df32:	60a3      	str	r3, [r4, #8]
 800df34:	e7f4      	b.n	800df20 <__swsetup_r+0xb0>
 800df36:	2000      	movs	r0, #0
 800df38:	e7f7      	b.n	800df2a <__swsetup_r+0xba>
 800df3a:	bf00      	nop
 800df3c:	2000002c 	.word	0x2000002c
 800df40:	0800eb94 	.word	0x0800eb94
 800df44:	0800ebb4 	.word	0x0800ebb4
 800df48:	0800eb74 	.word	0x0800eb74

0800df4c <abort>:
 800df4c:	b508      	push	{r3, lr}
 800df4e:	2006      	movs	r0, #6
 800df50:	f000 fa54 	bl	800e3fc <raise>
 800df54:	2001      	movs	r0, #1
 800df56:	f7f3 fe8f 	bl	8001c78 <_exit>
	...

0800df5c <__sflush_r>:
 800df5c:	898a      	ldrh	r2, [r1, #12]
 800df5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df60:	4605      	mov	r5, r0
 800df62:	0710      	lsls	r0, r2, #28
 800df64:	460c      	mov	r4, r1
 800df66:	d457      	bmi.n	800e018 <__sflush_r+0xbc>
 800df68:	684b      	ldr	r3, [r1, #4]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	dc04      	bgt.n	800df78 <__sflush_r+0x1c>
 800df6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df70:	2b00      	cmp	r3, #0
 800df72:	dc01      	bgt.n	800df78 <__sflush_r+0x1c>
 800df74:	2000      	movs	r0, #0
 800df76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df7a:	2e00      	cmp	r6, #0
 800df7c:	d0fa      	beq.n	800df74 <__sflush_r+0x18>
 800df7e:	2300      	movs	r3, #0
 800df80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df84:	682f      	ldr	r7, [r5, #0]
 800df86:	602b      	str	r3, [r5, #0]
 800df88:	d032      	beq.n	800dff0 <__sflush_r+0x94>
 800df8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df8c:	89a3      	ldrh	r3, [r4, #12]
 800df8e:	075a      	lsls	r2, r3, #29
 800df90:	d505      	bpl.n	800df9e <__sflush_r+0x42>
 800df92:	6863      	ldr	r3, [r4, #4]
 800df94:	1ac0      	subs	r0, r0, r3
 800df96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df98:	b10b      	cbz	r3, 800df9e <__sflush_r+0x42>
 800df9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df9c:	1ac0      	subs	r0, r0, r3
 800df9e:	2300      	movs	r3, #0
 800dfa0:	4602      	mov	r2, r0
 800dfa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfa4:	6a21      	ldr	r1, [r4, #32]
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	47b0      	blx	r6
 800dfaa:	1c43      	adds	r3, r0, #1
 800dfac:	89a3      	ldrh	r3, [r4, #12]
 800dfae:	d106      	bne.n	800dfbe <__sflush_r+0x62>
 800dfb0:	6829      	ldr	r1, [r5, #0]
 800dfb2:	291d      	cmp	r1, #29
 800dfb4:	d82c      	bhi.n	800e010 <__sflush_r+0xb4>
 800dfb6:	4a29      	ldr	r2, [pc, #164]	; (800e05c <__sflush_r+0x100>)
 800dfb8:	40ca      	lsrs	r2, r1
 800dfba:	07d6      	lsls	r6, r2, #31
 800dfbc:	d528      	bpl.n	800e010 <__sflush_r+0xb4>
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	6062      	str	r2, [r4, #4]
 800dfc2:	04d9      	lsls	r1, r3, #19
 800dfc4:	6922      	ldr	r2, [r4, #16]
 800dfc6:	6022      	str	r2, [r4, #0]
 800dfc8:	d504      	bpl.n	800dfd4 <__sflush_r+0x78>
 800dfca:	1c42      	adds	r2, r0, #1
 800dfcc:	d101      	bne.n	800dfd2 <__sflush_r+0x76>
 800dfce:	682b      	ldr	r3, [r5, #0]
 800dfd0:	b903      	cbnz	r3, 800dfd4 <__sflush_r+0x78>
 800dfd2:	6560      	str	r0, [r4, #84]	; 0x54
 800dfd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfd6:	602f      	str	r7, [r5, #0]
 800dfd8:	2900      	cmp	r1, #0
 800dfda:	d0cb      	beq.n	800df74 <__sflush_r+0x18>
 800dfdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfe0:	4299      	cmp	r1, r3
 800dfe2:	d002      	beq.n	800dfea <__sflush_r+0x8e>
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	f7ff fb17 	bl	800d618 <_free_r>
 800dfea:	2000      	movs	r0, #0
 800dfec:	6360      	str	r0, [r4, #52]	; 0x34
 800dfee:	e7c2      	b.n	800df76 <__sflush_r+0x1a>
 800dff0:	6a21      	ldr	r1, [r4, #32]
 800dff2:	2301      	movs	r3, #1
 800dff4:	4628      	mov	r0, r5
 800dff6:	47b0      	blx	r6
 800dff8:	1c41      	adds	r1, r0, #1
 800dffa:	d1c7      	bne.n	800df8c <__sflush_r+0x30>
 800dffc:	682b      	ldr	r3, [r5, #0]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d0c4      	beq.n	800df8c <__sflush_r+0x30>
 800e002:	2b1d      	cmp	r3, #29
 800e004:	d001      	beq.n	800e00a <__sflush_r+0xae>
 800e006:	2b16      	cmp	r3, #22
 800e008:	d101      	bne.n	800e00e <__sflush_r+0xb2>
 800e00a:	602f      	str	r7, [r5, #0]
 800e00c:	e7b2      	b.n	800df74 <__sflush_r+0x18>
 800e00e:	89a3      	ldrh	r3, [r4, #12]
 800e010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e014:	81a3      	strh	r3, [r4, #12]
 800e016:	e7ae      	b.n	800df76 <__sflush_r+0x1a>
 800e018:	690f      	ldr	r7, [r1, #16]
 800e01a:	2f00      	cmp	r7, #0
 800e01c:	d0aa      	beq.n	800df74 <__sflush_r+0x18>
 800e01e:	0793      	lsls	r3, r2, #30
 800e020:	680e      	ldr	r6, [r1, #0]
 800e022:	bf08      	it	eq
 800e024:	694b      	ldreq	r3, [r1, #20]
 800e026:	600f      	str	r7, [r1, #0]
 800e028:	bf18      	it	ne
 800e02a:	2300      	movne	r3, #0
 800e02c:	1bf6      	subs	r6, r6, r7
 800e02e:	608b      	str	r3, [r1, #8]
 800e030:	2e00      	cmp	r6, #0
 800e032:	dd9f      	ble.n	800df74 <__sflush_r+0x18>
 800e034:	6a21      	ldr	r1, [r4, #32]
 800e036:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e03a:	4633      	mov	r3, r6
 800e03c:	463a      	mov	r2, r7
 800e03e:	4628      	mov	r0, r5
 800e040:	47e0      	blx	ip
 800e042:	2800      	cmp	r0, #0
 800e044:	dc06      	bgt.n	800e054 <__sflush_r+0xf8>
 800e046:	89a3      	ldrh	r3, [r4, #12]
 800e048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e04c:	81a3      	strh	r3, [r4, #12]
 800e04e:	f04f 30ff 	mov.w	r0, #4294967295
 800e052:	e790      	b.n	800df76 <__sflush_r+0x1a>
 800e054:	4407      	add	r7, r0
 800e056:	1a36      	subs	r6, r6, r0
 800e058:	e7ea      	b.n	800e030 <__sflush_r+0xd4>
 800e05a:	bf00      	nop
 800e05c:	20400001 	.word	0x20400001

0800e060 <_fflush_r>:
 800e060:	b538      	push	{r3, r4, r5, lr}
 800e062:	690b      	ldr	r3, [r1, #16]
 800e064:	4605      	mov	r5, r0
 800e066:	460c      	mov	r4, r1
 800e068:	b913      	cbnz	r3, 800e070 <_fflush_r+0x10>
 800e06a:	2500      	movs	r5, #0
 800e06c:	4628      	mov	r0, r5
 800e06e:	bd38      	pop	{r3, r4, r5, pc}
 800e070:	b118      	cbz	r0, 800e07a <_fflush_r+0x1a>
 800e072:	6983      	ldr	r3, [r0, #24]
 800e074:	b90b      	cbnz	r3, 800e07a <_fflush_r+0x1a>
 800e076:	f000 f887 	bl	800e188 <__sinit>
 800e07a:	4b14      	ldr	r3, [pc, #80]	; (800e0cc <_fflush_r+0x6c>)
 800e07c:	429c      	cmp	r4, r3
 800e07e:	d11b      	bne.n	800e0b8 <_fflush_r+0x58>
 800e080:	686c      	ldr	r4, [r5, #4]
 800e082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d0ef      	beq.n	800e06a <_fflush_r+0xa>
 800e08a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e08c:	07d0      	lsls	r0, r2, #31
 800e08e:	d404      	bmi.n	800e09a <_fflush_r+0x3a>
 800e090:	0599      	lsls	r1, r3, #22
 800e092:	d402      	bmi.n	800e09a <_fflush_r+0x3a>
 800e094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e096:	f000 f915 	bl	800e2c4 <__retarget_lock_acquire_recursive>
 800e09a:	4628      	mov	r0, r5
 800e09c:	4621      	mov	r1, r4
 800e09e:	f7ff ff5d 	bl	800df5c <__sflush_r>
 800e0a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0a4:	07da      	lsls	r2, r3, #31
 800e0a6:	4605      	mov	r5, r0
 800e0a8:	d4e0      	bmi.n	800e06c <_fflush_r+0xc>
 800e0aa:	89a3      	ldrh	r3, [r4, #12]
 800e0ac:	059b      	lsls	r3, r3, #22
 800e0ae:	d4dd      	bmi.n	800e06c <_fflush_r+0xc>
 800e0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0b2:	f000 f908 	bl	800e2c6 <__retarget_lock_release_recursive>
 800e0b6:	e7d9      	b.n	800e06c <_fflush_r+0xc>
 800e0b8:	4b05      	ldr	r3, [pc, #20]	; (800e0d0 <_fflush_r+0x70>)
 800e0ba:	429c      	cmp	r4, r3
 800e0bc:	d101      	bne.n	800e0c2 <_fflush_r+0x62>
 800e0be:	68ac      	ldr	r4, [r5, #8]
 800e0c0:	e7df      	b.n	800e082 <_fflush_r+0x22>
 800e0c2:	4b04      	ldr	r3, [pc, #16]	; (800e0d4 <_fflush_r+0x74>)
 800e0c4:	429c      	cmp	r4, r3
 800e0c6:	bf08      	it	eq
 800e0c8:	68ec      	ldreq	r4, [r5, #12]
 800e0ca:	e7da      	b.n	800e082 <_fflush_r+0x22>
 800e0cc:	0800eb94 	.word	0x0800eb94
 800e0d0:	0800ebb4 	.word	0x0800ebb4
 800e0d4:	0800eb74 	.word	0x0800eb74

0800e0d8 <std>:
 800e0d8:	2300      	movs	r3, #0
 800e0da:	b510      	push	{r4, lr}
 800e0dc:	4604      	mov	r4, r0
 800e0de:	e9c0 3300 	strd	r3, r3, [r0]
 800e0e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0e6:	6083      	str	r3, [r0, #8]
 800e0e8:	8181      	strh	r1, [r0, #12]
 800e0ea:	6643      	str	r3, [r0, #100]	; 0x64
 800e0ec:	81c2      	strh	r2, [r0, #14]
 800e0ee:	6183      	str	r3, [r0, #24]
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	2208      	movs	r2, #8
 800e0f4:	305c      	adds	r0, #92	; 0x5c
 800e0f6:	f7ff f9e3 	bl	800d4c0 <memset>
 800e0fa:	4b05      	ldr	r3, [pc, #20]	; (800e110 <std+0x38>)
 800e0fc:	6263      	str	r3, [r4, #36]	; 0x24
 800e0fe:	4b05      	ldr	r3, [pc, #20]	; (800e114 <std+0x3c>)
 800e100:	62a3      	str	r3, [r4, #40]	; 0x28
 800e102:	4b05      	ldr	r3, [pc, #20]	; (800e118 <std+0x40>)
 800e104:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e106:	4b05      	ldr	r3, [pc, #20]	; (800e11c <std+0x44>)
 800e108:	6224      	str	r4, [r4, #32]
 800e10a:	6323      	str	r3, [r4, #48]	; 0x30
 800e10c:	bd10      	pop	{r4, pc}
 800e10e:	bf00      	nop
 800e110:	0800e435 	.word	0x0800e435
 800e114:	0800e457 	.word	0x0800e457
 800e118:	0800e48f 	.word	0x0800e48f
 800e11c:	0800e4b3 	.word	0x0800e4b3

0800e120 <_cleanup_r>:
 800e120:	4901      	ldr	r1, [pc, #4]	; (800e128 <_cleanup_r+0x8>)
 800e122:	f000 b8af 	b.w	800e284 <_fwalk_reent>
 800e126:	bf00      	nop
 800e128:	0800e061 	.word	0x0800e061

0800e12c <__sfmoreglue>:
 800e12c:	b570      	push	{r4, r5, r6, lr}
 800e12e:	2268      	movs	r2, #104	; 0x68
 800e130:	1e4d      	subs	r5, r1, #1
 800e132:	4355      	muls	r5, r2
 800e134:	460e      	mov	r6, r1
 800e136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e13a:	f7ff fad7 	bl	800d6ec <_malloc_r>
 800e13e:	4604      	mov	r4, r0
 800e140:	b140      	cbz	r0, 800e154 <__sfmoreglue+0x28>
 800e142:	2100      	movs	r1, #0
 800e144:	e9c0 1600 	strd	r1, r6, [r0]
 800e148:	300c      	adds	r0, #12
 800e14a:	60a0      	str	r0, [r4, #8]
 800e14c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e150:	f7ff f9b6 	bl	800d4c0 <memset>
 800e154:	4620      	mov	r0, r4
 800e156:	bd70      	pop	{r4, r5, r6, pc}

0800e158 <__sfp_lock_acquire>:
 800e158:	4801      	ldr	r0, [pc, #4]	; (800e160 <__sfp_lock_acquire+0x8>)
 800e15a:	f000 b8b3 	b.w	800e2c4 <__retarget_lock_acquire_recursive>
 800e15e:	bf00      	nop
 800e160:	2000088d 	.word	0x2000088d

0800e164 <__sfp_lock_release>:
 800e164:	4801      	ldr	r0, [pc, #4]	; (800e16c <__sfp_lock_release+0x8>)
 800e166:	f000 b8ae 	b.w	800e2c6 <__retarget_lock_release_recursive>
 800e16a:	bf00      	nop
 800e16c:	2000088d 	.word	0x2000088d

0800e170 <__sinit_lock_acquire>:
 800e170:	4801      	ldr	r0, [pc, #4]	; (800e178 <__sinit_lock_acquire+0x8>)
 800e172:	f000 b8a7 	b.w	800e2c4 <__retarget_lock_acquire_recursive>
 800e176:	bf00      	nop
 800e178:	2000088e 	.word	0x2000088e

0800e17c <__sinit_lock_release>:
 800e17c:	4801      	ldr	r0, [pc, #4]	; (800e184 <__sinit_lock_release+0x8>)
 800e17e:	f000 b8a2 	b.w	800e2c6 <__retarget_lock_release_recursive>
 800e182:	bf00      	nop
 800e184:	2000088e 	.word	0x2000088e

0800e188 <__sinit>:
 800e188:	b510      	push	{r4, lr}
 800e18a:	4604      	mov	r4, r0
 800e18c:	f7ff fff0 	bl	800e170 <__sinit_lock_acquire>
 800e190:	69a3      	ldr	r3, [r4, #24]
 800e192:	b11b      	cbz	r3, 800e19c <__sinit+0x14>
 800e194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e198:	f7ff bff0 	b.w	800e17c <__sinit_lock_release>
 800e19c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e1a0:	6523      	str	r3, [r4, #80]	; 0x50
 800e1a2:	4b13      	ldr	r3, [pc, #76]	; (800e1f0 <__sinit+0x68>)
 800e1a4:	4a13      	ldr	r2, [pc, #76]	; (800e1f4 <__sinit+0x6c>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e1aa:	42a3      	cmp	r3, r4
 800e1ac:	bf04      	itt	eq
 800e1ae:	2301      	moveq	r3, #1
 800e1b0:	61a3      	streq	r3, [r4, #24]
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f000 f820 	bl	800e1f8 <__sfp>
 800e1b8:	6060      	str	r0, [r4, #4]
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f000 f81c 	bl	800e1f8 <__sfp>
 800e1c0:	60a0      	str	r0, [r4, #8]
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f000 f818 	bl	800e1f8 <__sfp>
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	60e0      	str	r0, [r4, #12]
 800e1cc:	2104      	movs	r1, #4
 800e1ce:	6860      	ldr	r0, [r4, #4]
 800e1d0:	f7ff ff82 	bl	800e0d8 <std>
 800e1d4:	68a0      	ldr	r0, [r4, #8]
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	2109      	movs	r1, #9
 800e1da:	f7ff ff7d 	bl	800e0d8 <std>
 800e1de:	68e0      	ldr	r0, [r4, #12]
 800e1e0:	2202      	movs	r2, #2
 800e1e2:	2112      	movs	r1, #18
 800e1e4:	f7ff ff78 	bl	800e0d8 <std>
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	61a3      	str	r3, [r4, #24]
 800e1ec:	e7d2      	b.n	800e194 <__sinit+0xc>
 800e1ee:	bf00      	nop
 800e1f0:	0800ea8c 	.word	0x0800ea8c
 800e1f4:	0800e121 	.word	0x0800e121

0800e1f8 <__sfp>:
 800e1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fa:	4607      	mov	r7, r0
 800e1fc:	f7ff ffac 	bl	800e158 <__sfp_lock_acquire>
 800e200:	4b1e      	ldr	r3, [pc, #120]	; (800e27c <__sfp+0x84>)
 800e202:	681e      	ldr	r6, [r3, #0]
 800e204:	69b3      	ldr	r3, [r6, #24]
 800e206:	b913      	cbnz	r3, 800e20e <__sfp+0x16>
 800e208:	4630      	mov	r0, r6
 800e20a:	f7ff ffbd 	bl	800e188 <__sinit>
 800e20e:	3648      	adds	r6, #72	; 0x48
 800e210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e214:	3b01      	subs	r3, #1
 800e216:	d503      	bpl.n	800e220 <__sfp+0x28>
 800e218:	6833      	ldr	r3, [r6, #0]
 800e21a:	b30b      	cbz	r3, 800e260 <__sfp+0x68>
 800e21c:	6836      	ldr	r6, [r6, #0]
 800e21e:	e7f7      	b.n	800e210 <__sfp+0x18>
 800e220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e224:	b9d5      	cbnz	r5, 800e25c <__sfp+0x64>
 800e226:	4b16      	ldr	r3, [pc, #88]	; (800e280 <__sfp+0x88>)
 800e228:	60e3      	str	r3, [r4, #12]
 800e22a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e22e:	6665      	str	r5, [r4, #100]	; 0x64
 800e230:	f000 f847 	bl	800e2c2 <__retarget_lock_init_recursive>
 800e234:	f7ff ff96 	bl	800e164 <__sfp_lock_release>
 800e238:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e23c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e240:	6025      	str	r5, [r4, #0]
 800e242:	61a5      	str	r5, [r4, #24]
 800e244:	2208      	movs	r2, #8
 800e246:	4629      	mov	r1, r5
 800e248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e24c:	f7ff f938 	bl	800d4c0 <memset>
 800e250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e258:	4620      	mov	r0, r4
 800e25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e25c:	3468      	adds	r4, #104	; 0x68
 800e25e:	e7d9      	b.n	800e214 <__sfp+0x1c>
 800e260:	2104      	movs	r1, #4
 800e262:	4638      	mov	r0, r7
 800e264:	f7ff ff62 	bl	800e12c <__sfmoreglue>
 800e268:	4604      	mov	r4, r0
 800e26a:	6030      	str	r0, [r6, #0]
 800e26c:	2800      	cmp	r0, #0
 800e26e:	d1d5      	bne.n	800e21c <__sfp+0x24>
 800e270:	f7ff ff78 	bl	800e164 <__sfp_lock_release>
 800e274:	230c      	movs	r3, #12
 800e276:	603b      	str	r3, [r7, #0]
 800e278:	e7ee      	b.n	800e258 <__sfp+0x60>
 800e27a:	bf00      	nop
 800e27c:	0800ea8c 	.word	0x0800ea8c
 800e280:	ffff0001 	.word	0xffff0001

0800e284 <_fwalk_reent>:
 800e284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e288:	4606      	mov	r6, r0
 800e28a:	4688      	mov	r8, r1
 800e28c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e290:	2700      	movs	r7, #0
 800e292:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e296:	f1b9 0901 	subs.w	r9, r9, #1
 800e29a:	d505      	bpl.n	800e2a8 <_fwalk_reent+0x24>
 800e29c:	6824      	ldr	r4, [r4, #0]
 800e29e:	2c00      	cmp	r4, #0
 800e2a0:	d1f7      	bne.n	800e292 <_fwalk_reent+0xe>
 800e2a2:	4638      	mov	r0, r7
 800e2a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2a8:	89ab      	ldrh	r3, [r5, #12]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d907      	bls.n	800e2be <_fwalk_reent+0x3a>
 800e2ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	d003      	beq.n	800e2be <_fwalk_reent+0x3a>
 800e2b6:	4629      	mov	r1, r5
 800e2b8:	4630      	mov	r0, r6
 800e2ba:	47c0      	blx	r8
 800e2bc:	4307      	orrs	r7, r0
 800e2be:	3568      	adds	r5, #104	; 0x68
 800e2c0:	e7e9      	b.n	800e296 <_fwalk_reent+0x12>

0800e2c2 <__retarget_lock_init_recursive>:
 800e2c2:	4770      	bx	lr

0800e2c4 <__retarget_lock_acquire_recursive>:
 800e2c4:	4770      	bx	lr

0800e2c6 <__retarget_lock_release_recursive>:
 800e2c6:	4770      	bx	lr

0800e2c8 <__swhatbuf_r>:
 800e2c8:	b570      	push	{r4, r5, r6, lr}
 800e2ca:	460e      	mov	r6, r1
 800e2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2d0:	2900      	cmp	r1, #0
 800e2d2:	b096      	sub	sp, #88	; 0x58
 800e2d4:	4614      	mov	r4, r2
 800e2d6:	461d      	mov	r5, r3
 800e2d8:	da08      	bge.n	800e2ec <__swhatbuf_r+0x24>
 800e2da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	602a      	str	r2, [r5, #0]
 800e2e2:	061a      	lsls	r2, r3, #24
 800e2e4:	d410      	bmi.n	800e308 <__swhatbuf_r+0x40>
 800e2e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2ea:	e00e      	b.n	800e30a <__swhatbuf_r+0x42>
 800e2ec:	466a      	mov	r2, sp
 800e2ee:	f000 f907 	bl	800e500 <_fstat_r>
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	dbf1      	blt.n	800e2da <__swhatbuf_r+0x12>
 800e2f6:	9a01      	ldr	r2, [sp, #4]
 800e2f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e2fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e300:	425a      	negs	r2, r3
 800e302:	415a      	adcs	r2, r3
 800e304:	602a      	str	r2, [r5, #0]
 800e306:	e7ee      	b.n	800e2e6 <__swhatbuf_r+0x1e>
 800e308:	2340      	movs	r3, #64	; 0x40
 800e30a:	2000      	movs	r0, #0
 800e30c:	6023      	str	r3, [r4, #0]
 800e30e:	b016      	add	sp, #88	; 0x58
 800e310:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e314 <__smakebuf_r>:
 800e314:	898b      	ldrh	r3, [r1, #12]
 800e316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e318:	079d      	lsls	r5, r3, #30
 800e31a:	4606      	mov	r6, r0
 800e31c:	460c      	mov	r4, r1
 800e31e:	d507      	bpl.n	800e330 <__smakebuf_r+0x1c>
 800e320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e324:	6023      	str	r3, [r4, #0]
 800e326:	6123      	str	r3, [r4, #16]
 800e328:	2301      	movs	r3, #1
 800e32a:	6163      	str	r3, [r4, #20]
 800e32c:	b002      	add	sp, #8
 800e32e:	bd70      	pop	{r4, r5, r6, pc}
 800e330:	ab01      	add	r3, sp, #4
 800e332:	466a      	mov	r2, sp
 800e334:	f7ff ffc8 	bl	800e2c8 <__swhatbuf_r>
 800e338:	9900      	ldr	r1, [sp, #0]
 800e33a:	4605      	mov	r5, r0
 800e33c:	4630      	mov	r0, r6
 800e33e:	f7ff f9d5 	bl	800d6ec <_malloc_r>
 800e342:	b948      	cbnz	r0, 800e358 <__smakebuf_r+0x44>
 800e344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e348:	059a      	lsls	r2, r3, #22
 800e34a:	d4ef      	bmi.n	800e32c <__smakebuf_r+0x18>
 800e34c:	f023 0303 	bic.w	r3, r3, #3
 800e350:	f043 0302 	orr.w	r3, r3, #2
 800e354:	81a3      	strh	r3, [r4, #12]
 800e356:	e7e3      	b.n	800e320 <__smakebuf_r+0xc>
 800e358:	4b0d      	ldr	r3, [pc, #52]	; (800e390 <__smakebuf_r+0x7c>)
 800e35a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e35c:	89a3      	ldrh	r3, [r4, #12]
 800e35e:	6020      	str	r0, [r4, #0]
 800e360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e364:	81a3      	strh	r3, [r4, #12]
 800e366:	9b00      	ldr	r3, [sp, #0]
 800e368:	6163      	str	r3, [r4, #20]
 800e36a:	9b01      	ldr	r3, [sp, #4]
 800e36c:	6120      	str	r0, [r4, #16]
 800e36e:	b15b      	cbz	r3, 800e388 <__smakebuf_r+0x74>
 800e370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e374:	4630      	mov	r0, r6
 800e376:	f000 f8d5 	bl	800e524 <_isatty_r>
 800e37a:	b128      	cbz	r0, 800e388 <__smakebuf_r+0x74>
 800e37c:	89a3      	ldrh	r3, [r4, #12]
 800e37e:	f023 0303 	bic.w	r3, r3, #3
 800e382:	f043 0301 	orr.w	r3, r3, #1
 800e386:	81a3      	strh	r3, [r4, #12]
 800e388:	89a0      	ldrh	r0, [r4, #12]
 800e38a:	4305      	orrs	r5, r0
 800e38c:	81a5      	strh	r5, [r4, #12]
 800e38e:	e7cd      	b.n	800e32c <__smakebuf_r+0x18>
 800e390:	0800e121 	.word	0x0800e121

0800e394 <__malloc_lock>:
 800e394:	4801      	ldr	r0, [pc, #4]	; (800e39c <__malloc_lock+0x8>)
 800e396:	f7ff bf95 	b.w	800e2c4 <__retarget_lock_acquire_recursive>
 800e39a:	bf00      	nop
 800e39c:	2000088c 	.word	0x2000088c

0800e3a0 <__malloc_unlock>:
 800e3a0:	4801      	ldr	r0, [pc, #4]	; (800e3a8 <__malloc_unlock+0x8>)
 800e3a2:	f7ff bf90 	b.w	800e2c6 <__retarget_lock_release_recursive>
 800e3a6:	bf00      	nop
 800e3a8:	2000088c 	.word	0x2000088c

0800e3ac <_raise_r>:
 800e3ac:	291f      	cmp	r1, #31
 800e3ae:	b538      	push	{r3, r4, r5, lr}
 800e3b0:	4604      	mov	r4, r0
 800e3b2:	460d      	mov	r5, r1
 800e3b4:	d904      	bls.n	800e3c0 <_raise_r+0x14>
 800e3b6:	2316      	movs	r3, #22
 800e3b8:	6003      	str	r3, [r0, #0]
 800e3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e3be:	bd38      	pop	{r3, r4, r5, pc}
 800e3c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e3c2:	b112      	cbz	r2, 800e3ca <_raise_r+0x1e>
 800e3c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3c8:	b94b      	cbnz	r3, 800e3de <_raise_r+0x32>
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f000 f830 	bl	800e430 <_getpid_r>
 800e3d0:	462a      	mov	r2, r5
 800e3d2:	4601      	mov	r1, r0
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3da:	f000 b817 	b.w	800e40c <_kill_r>
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d00a      	beq.n	800e3f8 <_raise_r+0x4c>
 800e3e2:	1c59      	adds	r1, r3, #1
 800e3e4:	d103      	bne.n	800e3ee <_raise_r+0x42>
 800e3e6:	2316      	movs	r3, #22
 800e3e8:	6003      	str	r3, [r0, #0]
 800e3ea:	2001      	movs	r0, #1
 800e3ec:	e7e7      	b.n	800e3be <_raise_r+0x12>
 800e3ee:	2400      	movs	r4, #0
 800e3f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	4798      	blx	r3
 800e3f8:	2000      	movs	r0, #0
 800e3fa:	e7e0      	b.n	800e3be <_raise_r+0x12>

0800e3fc <raise>:
 800e3fc:	4b02      	ldr	r3, [pc, #8]	; (800e408 <raise+0xc>)
 800e3fe:	4601      	mov	r1, r0
 800e400:	6818      	ldr	r0, [r3, #0]
 800e402:	f7ff bfd3 	b.w	800e3ac <_raise_r>
 800e406:	bf00      	nop
 800e408:	2000002c 	.word	0x2000002c

0800e40c <_kill_r>:
 800e40c:	b538      	push	{r3, r4, r5, lr}
 800e40e:	4d07      	ldr	r5, [pc, #28]	; (800e42c <_kill_r+0x20>)
 800e410:	2300      	movs	r3, #0
 800e412:	4604      	mov	r4, r0
 800e414:	4608      	mov	r0, r1
 800e416:	4611      	mov	r1, r2
 800e418:	602b      	str	r3, [r5, #0]
 800e41a:	f7f3 fc1d 	bl	8001c58 <_kill>
 800e41e:	1c43      	adds	r3, r0, #1
 800e420:	d102      	bne.n	800e428 <_kill_r+0x1c>
 800e422:	682b      	ldr	r3, [r5, #0]
 800e424:	b103      	cbz	r3, 800e428 <_kill_r+0x1c>
 800e426:	6023      	str	r3, [r4, #0]
 800e428:	bd38      	pop	{r3, r4, r5, pc}
 800e42a:	bf00      	nop
 800e42c:	20000890 	.word	0x20000890

0800e430 <_getpid_r>:
 800e430:	f7f3 bc0b 	b.w	8001c4a <_getpid>

0800e434 <__sread>:
 800e434:	b510      	push	{r4, lr}
 800e436:	460c      	mov	r4, r1
 800e438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e43c:	f000 f894 	bl	800e568 <_read_r>
 800e440:	2800      	cmp	r0, #0
 800e442:	bfab      	itete	ge
 800e444:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e446:	89a3      	ldrhlt	r3, [r4, #12]
 800e448:	181b      	addge	r3, r3, r0
 800e44a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e44e:	bfac      	ite	ge
 800e450:	6563      	strge	r3, [r4, #84]	; 0x54
 800e452:	81a3      	strhlt	r3, [r4, #12]
 800e454:	bd10      	pop	{r4, pc}

0800e456 <__swrite>:
 800e456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e45a:	461f      	mov	r7, r3
 800e45c:	898b      	ldrh	r3, [r1, #12]
 800e45e:	05db      	lsls	r3, r3, #23
 800e460:	4605      	mov	r5, r0
 800e462:	460c      	mov	r4, r1
 800e464:	4616      	mov	r6, r2
 800e466:	d505      	bpl.n	800e474 <__swrite+0x1e>
 800e468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e46c:	2302      	movs	r3, #2
 800e46e:	2200      	movs	r2, #0
 800e470:	f000 f868 	bl	800e544 <_lseek_r>
 800e474:	89a3      	ldrh	r3, [r4, #12]
 800e476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e47a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e47e:	81a3      	strh	r3, [r4, #12]
 800e480:	4632      	mov	r2, r6
 800e482:	463b      	mov	r3, r7
 800e484:	4628      	mov	r0, r5
 800e486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e48a:	f000 b817 	b.w	800e4bc <_write_r>

0800e48e <__sseek>:
 800e48e:	b510      	push	{r4, lr}
 800e490:	460c      	mov	r4, r1
 800e492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e496:	f000 f855 	bl	800e544 <_lseek_r>
 800e49a:	1c43      	adds	r3, r0, #1
 800e49c:	89a3      	ldrh	r3, [r4, #12]
 800e49e:	bf15      	itete	ne
 800e4a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e4a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e4a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e4aa:	81a3      	strheq	r3, [r4, #12]
 800e4ac:	bf18      	it	ne
 800e4ae:	81a3      	strhne	r3, [r4, #12]
 800e4b0:	bd10      	pop	{r4, pc}

0800e4b2 <__sclose>:
 800e4b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4b6:	f000 b813 	b.w	800e4e0 <_close_r>
	...

0800e4bc <_write_r>:
 800e4bc:	b538      	push	{r3, r4, r5, lr}
 800e4be:	4d07      	ldr	r5, [pc, #28]	; (800e4dc <_write_r+0x20>)
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	4608      	mov	r0, r1
 800e4c4:	4611      	mov	r1, r2
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	602a      	str	r2, [r5, #0]
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	f7f3 fbfb 	bl	8001cc6 <_write>
 800e4d0:	1c43      	adds	r3, r0, #1
 800e4d2:	d102      	bne.n	800e4da <_write_r+0x1e>
 800e4d4:	682b      	ldr	r3, [r5, #0]
 800e4d6:	b103      	cbz	r3, 800e4da <_write_r+0x1e>
 800e4d8:	6023      	str	r3, [r4, #0]
 800e4da:	bd38      	pop	{r3, r4, r5, pc}
 800e4dc:	20000890 	.word	0x20000890

0800e4e0 <_close_r>:
 800e4e0:	b538      	push	{r3, r4, r5, lr}
 800e4e2:	4d06      	ldr	r5, [pc, #24]	; (800e4fc <_close_r+0x1c>)
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	4608      	mov	r0, r1
 800e4ea:	602b      	str	r3, [r5, #0]
 800e4ec:	f7f3 fc07 	bl	8001cfe <_close>
 800e4f0:	1c43      	adds	r3, r0, #1
 800e4f2:	d102      	bne.n	800e4fa <_close_r+0x1a>
 800e4f4:	682b      	ldr	r3, [r5, #0]
 800e4f6:	b103      	cbz	r3, 800e4fa <_close_r+0x1a>
 800e4f8:	6023      	str	r3, [r4, #0]
 800e4fa:	bd38      	pop	{r3, r4, r5, pc}
 800e4fc:	20000890 	.word	0x20000890

0800e500 <_fstat_r>:
 800e500:	b538      	push	{r3, r4, r5, lr}
 800e502:	4d07      	ldr	r5, [pc, #28]	; (800e520 <_fstat_r+0x20>)
 800e504:	2300      	movs	r3, #0
 800e506:	4604      	mov	r4, r0
 800e508:	4608      	mov	r0, r1
 800e50a:	4611      	mov	r1, r2
 800e50c:	602b      	str	r3, [r5, #0]
 800e50e:	f7f3 fc01 	bl	8001d14 <_fstat>
 800e512:	1c43      	adds	r3, r0, #1
 800e514:	d102      	bne.n	800e51c <_fstat_r+0x1c>
 800e516:	682b      	ldr	r3, [r5, #0]
 800e518:	b103      	cbz	r3, 800e51c <_fstat_r+0x1c>
 800e51a:	6023      	str	r3, [r4, #0]
 800e51c:	bd38      	pop	{r3, r4, r5, pc}
 800e51e:	bf00      	nop
 800e520:	20000890 	.word	0x20000890

0800e524 <_isatty_r>:
 800e524:	b538      	push	{r3, r4, r5, lr}
 800e526:	4d06      	ldr	r5, [pc, #24]	; (800e540 <_isatty_r+0x1c>)
 800e528:	2300      	movs	r3, #0
 800e52a:	4604      	mov	r4, r0
 800e52c:	4608      	mov	r0, r1
 800e52e:	602b      	str	r3, [r5, #0]
 800e530:	f7f3 fbff 	bl	8001d32 <_isatty>
 800e534:	1c43      	adds	r3, r0, #1
 800e536:	d102      	bne.n	800e53e <_isatty_r+0x1a>
 800e538:	682b      	ldr	r3, [r5, #0]
 800e53a:	b103      	cbz	r3, 800e53e <_isatty_r+0x1a>
 800e53c:	6023      	str	r3, [r4, #0]
 800e53e:	bd38      	pop	{r3, r4, r5, pc}
 800e540:	20000890 	.word	0x20000890

0800e544 <_lseek_r>:
 800e544:	b538      	push	{r3, r4, r5, lr}
 800e546:	4d07      	ldr	r5, [pc, #28]	; (800e564 <_lseek_r+0x20>)
 800e548:	4604      	mov	r4, r0
 800e54a:	4608      	mov	r0, r1
 800e54c:	4611      	mov	r1, r2
 800e54e:	2200      	movs	r2, #0
 800e550:	602a      	str	r2, [r5, #0]
 800e552:	461a      	mov	r2, r3
 800e554:	f7f3 fbf7 	bl	8001d46 <_lseek>
 800e558:	1c43      	adds	r3, r0, #1
 800e55a:	d102      	bne.n	800e562 <_lseek_r+0x1e>
 800e55c:	682b      	ldr	r3, [r5, #0]
 800e55e:	b103      	cbz	r3, 800e562 <_lseek_r+0x1e>
 800e560:	6023      	str	r3, [r4, #0]
 800e562:	bd38      	pop	{r3, r4, r5, pc}
 800e564:	20000890 	.word	0x20000890

0800e568 <_read_r>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	4d07      	ldr	r5, [pc, #28]	; (800e588 <_read_r+0x20>)
 800e56c:	4604      	mov	r4, r0
 800e56e:	4608      	mov	r0, r1
 800e570:	4611      	mov	r1, r2
 800e572:	2200      	movs	r2, #0
 800e574:	602a      	str	r2, [r5, #0]
 800e576:	461a      	mov	r2, r3
 800e578:	f7f3 fb88 	bl	8001c8c <_read>
 800e57c:	1c43      	adds	r3, r0, #1
 800e57e:	d102      	bne.n	800e586 <_read_r+0x1e>
 800e580:	682b      	ldr	r3, [r5, #0]
 800e582:	b103      	cbz	r3, 800e586 <_read_r+0x1e>
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	bd38      	pop	{r3, r4, r5, pc}
 800e588:	20000890 	.word	0x20000890

0800e58c <_init>:
 800e58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e58e:	bf00      	nop
 800e590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e592:	bc08      	pop	{r3}
 800e594:	469e      	mov	lr, r3
 800e596:	4770      	bx	lr

0800e598 <_fini>:
 800e598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e59a:	bf00      	nop
 800e59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e59e:	bc08      	pop	{r3}
 800e5a0:	469e      	mov	lr, r3
 800e5a2:	4770      	bx	lr
